
SOFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08009b4c  08009b4c  00019b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a004  0800a004  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a004  0800a004  0001a004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a00c  0800a00c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a00c  0800a00c  0001a00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a010  0800a010  0001a010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  0800a014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d0  2**0
                  CONTENTS
 10 .bss          000042b8  200000d0  200000d0  000200d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004388  20004388  000200d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018b8b  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004538  00000000  00000000  00038cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001838  00000000  00000000  0003d208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012b2  00000000  00000000  0003ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026ec5  00000000  00000000  0003fcf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d8bb  00000000  00000000  00066bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e85a2  00000000  00000000  00084472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006cfc  00000000  00000000  0016ca14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00173710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b34 	.word	0x08009b34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	08009b34 	.word	0x08009b34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <HAL_Init+0x40>)
 8000586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <HAL_Init+0x40>)
 8000592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000596:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <HAL_Init+0x40>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a07      	ldr	r2, [pc, #28]	; (80005bc <HAL_Init+0x40>)
 800059e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a4:	2003      	movs	r0, #3
 80005a6:	f000 fd31 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005aa:	200f      	movs	r0, #15
 80005ac:	f000 f808 	bl	80005c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b0:	f004 f9ca 	bl	8004948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b4:	2300      	movs	r3, #0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40023c00 	.word	0x40023c00

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_InitTick+0x54>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x58>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4619      	mov	r1, r3
 80005d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005da:	fbb2 f3f3 	udiv	r3, r2, r3
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fd3b 	bl	800105a <HAL_SYSTICK_Config>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ea:	2301      	movs	r3, #1
 80005ec:	e00e      	b.n	800060c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b0f      	cmp	r3, #15
 80005f2:	d80a      	bhi.n	800060a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f4:	2200      	movs	r2, #0
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	f04f 30ff 	mov.w	r0, #4294967295
 80005fc:	f000 fd11 	bl	8001022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000600:	4a06      	ldr	r2, [pc, #24]	; (800061c <HAL_InitTick+0x5c>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000606:	2300      	movs	r3, #0
 8000608:	e000      	b.n	800060c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060a:	2301      	movs	r3, #1
}
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000024 	.word	0x20000024
 8000618:	20000004 	.word	0x20000004
 800061c:	20000000 	.word	0x20000000

08000620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_IncTick+0x20>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x24>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4413      	add	r3, r2
 8000630:	4a04      	ldr	r2, [pc, #16]	; (8000644 <HAL_IncTick+0x24>)
 8000632:	6013      	str	r3, [r2, #0]
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000004 	.word	0x20000004
 8000644:	200000ec 	.word	0x200000ec

08000648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return uwTick;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <HAL_GetTick+0x14>)
 800064e:	681b      	ldr	r3, [r3, #0]
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200000ec 	.word	0x200000ec

08000660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000668:	f7ff ffee 	bl	8000648 <HAL_GetTick>
 800066c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000678:	d005      	beq.n	8000686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_Delay+0x44>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	4413      	add	r3, r2
 8000684:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000686:	bf00      	nop
 8000688:	f7ff ffde 	bl	8000648 <HAL_GetTick>
 800068c:	4602      	mov	r2, r0
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	429a      	cmp	r2, r3
 8000696:	d8f7      	bhi.n	8000688 <HAL_Delay+0x28>
  {
  }
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d101      	bne.n	80006be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e033      	b.n	8000726 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d109      	bne.n	80006da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f003 ff02 	bl	80044d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d118      	bne.n	8000718 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006ee:	f023 0302 	bic.w	r3, r3, #2
 80006f2:	f043 0202 	orr.w	r2, r3, #2
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 fad8 	bl	8000cb0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f023 0303 	bic.w	r3, r3, #3
 800070e:	f043 0201 	orr.w	r2, r3, #1
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	641a      	str	r2, [r3, #64]	; 0x40
 8000716:	e001      	b.n	800071c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000742:	2b01      	cmp	r3, #1
 8000744:	d101      	bne.n	800074a <HAL_ADC_Start+0x1a>
 8000746:	2302      	movs	r3, #2
 8000748:	e0b2      	b.n	80008b0 <HAL_ADC_Start+0x180>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2201      	movs	r2, #1
 800074e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	2b01      	cmp	r3, #1
 800075e:	d018      	beq.n	8000792 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f042 0201 	orr.w	r2, r2, #1
 800076e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000770:	4b52      	ldr	r3, [pc, #328]	; (80008bc <HAL_ADC_Start+0x18c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a52      	ldr	r2, [pc, #328]	; (80008c0 <HAL_ADC_Start+0x190>)
 8000776:	fba2 2303 	umull	r2, r3, r2, r3
 800077a:	0c9a      	lsrs	r2, r3, #18
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000784:	e002      	b.n	800078c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	3b01      	subs	r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f9      	bne.n	8000786 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	2b01      	cmp	r3, #1
 800079e:	d17a      	bne.n	8000896 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007a8:	f023 0301 	bic.w	r3, r3, #1
 80007ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d007      	beq.n	80007d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007de:	d106      	bne.n	80007ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e4:	f023 0206 	bic.w	r2, r3, #6
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	645a      	str	r2, [r3, #68]	; 0x44
 80007ec:	e002      	b.n	80007f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007fc:	4b31      	ldr	r3, [pc, #196]	; (80008c4 <HAL_ADC_Start+0x194>)
 80007fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000808:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	f003 031f 	and.w	r3, r3, #31
 8000812:	2b00      	cmp	r3, #0
 8000814:	d12a      	bne.n	800086c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a2b      	ldr	r2, [pc, #172]	; (80008c8 <HAL_ADC_Start+0x198>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d015      	beq.n	800084c <HAL_ADC_Start+0x11c>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a29      	ldr	r2, [pc, #164]	; (80008cc <HAL_ADC_Start+0x19c>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d105      	bne.n	8000836 <HAL_ADC_Start+0x106>
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <HAL_ADC_Start+0x194>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f003 031f 	and.w	r3, r3, #31
 8000832:	2b00      	cmp	r3, #0
 8000834:	d00a      	beq.n	800084c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a25      	ldr	r2, [pc, #148]	; (80008d0 <HAL_ADC_Start+0x1a0>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d136      	bne.n	80008ae <HAL_ADC_Start+0x17e>
 8000840:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <HAL_ADC_Start+0x194>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f003 0310 	and.w	r3, r3, #16
 8000848:	2b00      	cmp	r3, #0
 800084a:	d130      	bne.n	80008ae <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d129      	bne.n	80008ae <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	689a      	ldr	r2, [r3, #8]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	e020      	b.n	80008ae <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <HAL_ADC_Start+0x198>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d11b      	bne.n	80008ae <HAL_ADC_Start+0x17e>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000880:	2b00      	cmp	r3, #0
 8000882:	d114      	bne.n	80008ae <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	e00b      	b.n	80008ae <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f043 0210 	orr.w	r2, r3, #16
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	f043 0201 	orr.w	r2, r3, #1
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	20000024 	.word	0x20000024
 80008c0:	431bde83 	.word	0x431bde83
 80008c4:	40012300 	.word	0x40012300
 80008c8:	40012000 	.word	0x40012000
 80008cc:	40012100 	.word	0x40012100
 80008d0:	40012200 	.word	0x40012200

080008d4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d101      	bne.n	80008ea <HAL_ADC_Stop+0x16>
 80008e6:	2302      	movs	r3, #2
 80008e8:	e021      	b.n	800092e <HAL_ADC_Stop+0x5a>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2201      	movs	r2, #1
 80008ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	689a      	ldr	r2, [r3, #8]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f022 0201 	bic.w	r2, r2, #1
 8000900:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	2b00      	cmp	r3, #0
 800090e:	d109      	bne.n	8000924 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000918:	f023 0301 	bic.w	r3, r3, #1
 800091c:	f043 0201 	orr.w	r2, r3, #1
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b084      	sub	sp, #16
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000956:	d113      	bne.n	8000980 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000966:	d10b      	bne.n	8000980 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	f043 0220 	orr.w	r2, r3, #32
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800097c:	2301      	movs	r3, #1
 800097e:	e063      	b.n	8000a48 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8000980:	f7ff fe62 	bl	8000648 <HAL_GetTick>
 8000984:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000986:	e021      	b.n	80009cc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098e:	d01d      	beq.n	80009cc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d007      	beq.n	80009a6 <HAL_ADC_PollForConversion+0x6c>
 8000996:	f7ff fe57 	bl	8000648 <HAL_GetTick>
 800099a:	4602      	mov	r2, r0
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d212      	bcs.n	80009cc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f003 0302 	and.w	r3, r3, #2
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d00b      	beq.n	80009cc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	f043 0204 	orr.w	r2, r3, #4
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2200      	movs	r2, #0
 80009c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80009c8:	2303      	movs	r3, #3
 80009ca:	e03d      	b.n	8000a48 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d1d6      	bne.n	8000988 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f06f 0212 	mvn.w	r2, #18
 80009e2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d123      	bne.n	8000a46 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d11f      	bne.n	8000a46 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d006      	beq.n	8000a22 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d111      	bne.n	8000a46 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d105      	bne.n	8000a46 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f043 0201 	orr.w	r2, r3, #1
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d101      	bne.n	8000a88 <HAL_ADC_ConfigChannel+0x1c>
 8000a84:	2302      	movs	r3, #2
 8000a86:	e105      	b.n	8000c94 <HAL_ADC_ConfigChannel+0x228>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b09      	cmp	r3, #9
 8000a96:	d925      	bls.n	8000ae4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	68d9      	ldr	r1, [r3, #12]
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	3b1e      	subs	r3, #30
 8000aae:	2207      	movs	r2, #7
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	43da      	mvns	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	400a      	ands	r2, r1
 8000abc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	68d9      	ldr	r1, [r3, #12]
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	689a      	ldr	r2, [r3, #8]
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	4403      	add	r3, r0
 8000ad6:	3b1e      	subs	r3, #30
 8000ad8:	409a      	lsls	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	e022      	b.n	8000b2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6919      	ldr	r1, [r3, #16]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	4613      	mov	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4413      	add	r3, r2
 8000af8:	2207      	movs	r2, #7
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43da      	mvns	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	400a      	ands	r2, r1
 8000b06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6919      	ldr	r1, [r3, #16]
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	4618      	mov	r0, r3
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	4403      	add	r3, r0
 8000b20:	409a      	lsls	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	430a      	orrs	r2, r1
 8000b28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	d824      	bhi.n	8000b7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	3b05      	subs	r3, #5
 8000b44:	221f      	movs	r2, #31
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	400a      	ands	r2, r1
 8000b52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	4618      	mov	r0, r3
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4413      	add	r3, r2
 8000b6c:	3b05      	subs	r3, #5
 8000b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	430a      	orrs	r2, r1
 8000b78:	635a      	str	r2, [r3, #52]	; 0x34
 8000b7a:	e04c      	b.n	8000c16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	2b0c      	cmp	r3, #12
 8000b82:	d824      	bhi.n	8000bce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	3b23      	subs	r3, #35	; 0x23
 8000b96:	221f      	movs	r2, #31
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43da      	mvns	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	400a      	ands	r2, r1
 8000ba4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	3b23      	subs	r3, #35	; 0x23
 8000bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	631a      	str	r2, [r3, #48]	; 0x30
 8000bcc:	e023      	b.n	8000c16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4413      	add	r3, r2
 8000bde:	3b41      	subs	r3, #65	; 0x41
 8000be0:	221f      	movs	r2, #31
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43da      	mvns	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	400a      	ands	r2, r1
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	4613      	mov	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4413      	add	r3, r2
 8000c08:	3b41      	subs	r3, #65	; 0x41
 8000c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	430a      	orrs	r2, r1
 8000c14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c16:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <HAL_ADC_ConfigChannel+0x234>)
 8000c18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <HAL_ADC_ConfigChannel+0x238>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d109      	bne.n	8000c38 <HAL_ADC_ConfigChannel+0x1cc>
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b12      	cmp	r3, #18
 8000c2a:	d105      	bne.n	8000c38 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_ADC_ConfigChannel+0x238>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d123      	bne.n	8000c8a <HAL_ADC_ConfigChannel+0x21e>
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b10      	cmp	r3, #16
 8000c48:	d003      	beq.n	8000c52 <HAL_ADC_ConfigChannel+0x1e6>
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b11      	cmp	r3, #17
 8000c50:	d11b      	bne.n	8000c8a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b10      	cmp	r3, #16
 8000c64:	d111      	bne.n	8000c8a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <HAL_ADC_ConfigChannel+0x23c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_ADC_ConfigChannel+0x240>)
 8000c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c70:	0c9a      	lsrs	r2, r3, #18
 8000c72:	4613      	mov	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000c7c:	e002      	b.n	8000c84 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	3b01      	subs	r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1f9      	bne.n	8000c7e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	40012300 	.word	0x40012300
 8000ca4:	40012000 	.word	0x40012000
 8000ca8:	20000024 	.word	0x20000024
 8000cac:	431bde83 	.word	0x431bde83

08000cb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cb8:	4b79      	ldr	r3, [pc, #484]	; (8000ea0 <ADC_Init+0x1f0>)
 8000cba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ce4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6859      	ldr	r1, [r3, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	021a      	lsls	r2, r3, #8
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000d08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	6859      	ldr	r1, [r3, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6899      	ldr	r1, [r3, #8]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d42:	4a58      	ldr	r2, [pc, #352]	; (8000ea4 <ADC_Init+0x1f4>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d022      	beq.n	8000d8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6899      	ldr	r1, [r3, #8]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	430a      	orrs	r2, r1
 8000d68:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6899      	ldr	r1, [r3, #8]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	e00f      	b.n	8000dae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000dac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 0202 	bic.w	r2, r2, #2
 8000dbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6899      	ldr	r1, [r3, #8]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7e1b      	ldrb	r3, [r3, #24]
 8000dc8:	005a      	lsls	r2, r3, #1
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d01b      	beq.n	8000e14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000dea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000dfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6859      	ldr	r1, [r3, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e06:	3b01      	subs	r3, #1
 8000e08:	035a      	lsls	r2, r3, #13
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	e007      	b.n	8000e24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e22:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	051a      	lsls	r2, r3, #20
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	430a      	orrs	r2, r1
 8000e48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6899      	ldr	r1, [r3, #8]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e66:	025a      	lsls	r2, r3, #9
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6899      	ldr	r1, [r3, #8]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	029a      	lsls	r2, r3, #10
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	609a      	str	r2, [r3, #8]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	40012300 	.word	0x40012300
 8000ea4:	0f000001 	.word	0x0f000001

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd8:	d301      	bcc.n	8000fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00f      	b.n	8000ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <SysTick_Config+0x40>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f7ff ff8e 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <SysTick_Config+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SysTick_Config+0x40>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff47 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001034:	f7ff ff5c 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 8001038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f7ff ff8e 	bl	8000f60 <NVIC_EncodePriority>
 8001044:	4602      	mov	r2, r0
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff5d 	bl	8000f0c <__NVIC_SetPriority>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffb0 	bl	8000fc8 <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	e16b      	b.n	8001368 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	f040 815a 	bne.w	8001362 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d005      	beq.n	80010c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d130      	bne.n	8001128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010fc:	2201      	movs	r2, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	091b      	lsrs	r3, r3, #4
 8001112:	f003 0201 	and.w	r2, r3, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b03      	cmp	r3, #3
 8001132:	d017      	beq.n	8001164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d123      	bne.n	80011b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	08da      	lsrs	r2, r3, #3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3208      	adds	r2, #8
 8001178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	08da      	lsrs	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3208      	adds	r2, #8
 80011b2:	69b9      	ldr	r1, [r7, #24]
 80011b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0203 	and.w	r2, r3, #3
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 80b4 	beq.w	8001362 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b60      	ldr	r3, [pc, #384]	; (8001380 <HAL_GPIO_Init+0x30c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a5f      	ldr	r2, [pc, #380]	; (8001380 <HAL_GPIO_Init+0x30c>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b5d      	ldr	r3, [pc, #372]	; (8001380 <HAL_GPIO_Init+0x30c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001216:	4a5b      	ldr	r2, [pc, #364]	; (8001384 <HAL_GPIO_Init+0x310>)
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a52      	ldr	r2, [pc, #328]	; (8001388 <HAL_GPIO_Init+0x314>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d02b      	beq.n	800129a <HAL_GPIO_Init+0x226>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a51      	ldr	r2, [pc, #324]	; (800138c <HAL_GPIO_Init+0x318>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d025      	beq.n	8001296 <HAL_GPIO_Init+0x222>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a50      	ldr	r2, [pc, #320]	; (8001390 <HAL_GPIO_Init+0x31c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d01f      	beq.n	8001292 <HAL_GPIO_Init+0x21e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4f      	ldr	r2, [pc, #316]	; (8001394 <HAL_GPIO_Init+0x320>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d019      	beq.n	800128e <HAL_GPIO_Init+0x21a>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4e      	ldr	r2, [pc, #312]	; (8001398 <HAL_GPIO_Init+0x324>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0x216>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4d      	ldr	r2, [pc, #308]	; (800139c <HAL_GPIO_Init+0x328>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00d      	beq.n	8001286 <HAL_GPIO_Init+0x212>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4c      	ldr	r2, [pc, #304]	; (80013a0 <HAL_GPIO_Init+0x32c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d007      	beq.n	8001282 <HAL_GPIO_Init+0x20e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4b      	ldr	r2, [pc, #300]	; (80013a4 <HAL_GPIO_Init+0x330>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_GPIO_Init+0x20a>
 800127a:	2307      	movs	r3, #7
 800127c:	e00e      	b.n	800129c <HAL_GPIO_Init+0x228>
 800127e:	2308      	movs	r3, #8
 8001280:	e00c      	b.n	800129c <HAL_GPIO_Init+0x228>
 8001282:	2306      	movs	r3, #6
 8001284:	e00a      	b.n	800129c <HAL_GPIO_Init+0x228>
 8001286:	2305      	movs	r3, #5
 8001288:	e008      	b.n	800129c <HAL_GPIO_Init+0x228>
 800128a:	2304      	movs	r3, #4
 800128c:	e006      	b.n	800129c <HAL_GPIO_Init+0x228>
 800128e:	2303      	movs	r3, #3
 8001290:	e004      	b.n	800129c <HAL_GPIO_Init+0x228>
 8001292:	2302      	movs	r3, #2
 8001294:	e002      	b.n	800129c <HAL_GPIO_Init+0x228>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <HAL_GPIO_Init+0x228>
 800129a:	2300      	movs	r3, #0
 800129c:	69fa      	ldr	r2, [r7, #28]
 800129e:	f002 0203 	and.w	r2, r2, #3
 80012a2:	0092      	lsls	r2, r2, #2
 80012a4:	4093      	lsls	r3, r2
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ac:	4935      	ldr	r1, [pc, #212]	; (8001384 <HAL_GPIO_Init+0x310>)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ba:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <HAL_GPIO_Init+0x334>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012de:	4a32      	ldr	r2, [pc, #200]	; (80013a8 <HAL_GPIO_Init+0x334>)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e4:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <HAL_GPIO_Init+0x334>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001308:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <HAL_GPIO_Init+0x334>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <HAL_GPIO_Init+0x334>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001332:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <HAL_GPIO_Init+0x334>)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_GPIO_Init+0x334>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <HAL_GPIO_Init+0x334>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3301      	adds	r3, #1
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	2b0f      	cmp	r3, #15
 800136c:	f67f ae90 	bls.w	8001090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40013800 	.word	0x40013800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400
 8001390:	40020800 	.word	0x40020800
 8001394:	40020c00 	.word	0x40020c00
 8001398:	40021000 	.word	0x40021000
 800139c:	40021400 	.word	0x40021400
 80013a0:	40021800 	.word	0x40021800
 80013a4:	40021c00 	.word	0x40021c00
 80013a8:	40013c00 	.word	0x40013c00

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c8:	e003      	b.n	80013d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	041a      	lsls	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	619a      	str	r2, [r3, #24]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e267      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d075      	beq.n	80014ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013fe:	4b88      	ldr	r3, [pc, #544]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b04      	cmp	r3, #4
 8001408:	d00c      	beq.n	8001424 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800140a:	4b85      	ldr	r3, [pc, #532]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001412:	2b08      	cmp	r3, #8
 8001414:	d112      	bne.n	800143c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001416:	4b82      	ldr	r3, [pc, #520]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001422:	d10b      	bne.n	800143c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	4b7e      	ldr	r3, [pc, #504]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d05b      	beq.n	80014e8 <HAL_RCC_OscConfig+0x108>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d157      	bne.n	80014e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e242      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d106      	bne.n	8001454 <HAL_RCC_OscConfig+0x74>
 8001446:	4b76      	ldr	r3, [pc, #472]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a75      	ldr	r2, [pc, #468]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e01d      	b.n	8001490 <HAL_RCC_OscConfig+0xb0>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0x98>
 800145e:	4b70      	ldr	r3, [pc, #448]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a6f      	ldr	r2, [pc, #444]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b6d      	ldr	r3, [pc, #436]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a6c      	ldr	r2, [pc, #432]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e00b      	b.n	8001490 <HAL_RCC_OscConfig+0xb0>
 8001478:	4b69      	ldr	r3, [pc, #420]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a68      	ldr	r2, [pc, #416]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800147e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b66      	ldr	r3, [pc, #408]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a65      	ldr	r2, [pc, #404]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800148a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d013      	beq.n	80014c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff f8d6 	bl	8000648 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff f8d2 	bl	8000648 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e207      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	4b5b      	ldr	r3, [pc, #364]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0xc0>
 80014be:	e014      	b.n	80014ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff f8c2 	bl	8000648 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff f8be 	bl	8000648 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e1f3      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014da:	4b51      	ldr	r3, [pc, #324]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0xe8>
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d063      	beq.n	80015be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014f6:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001502:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800150a:	2b08      	cmp	r3, #8
 800150c:	d11c      	bne.n	8001548 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800150e:	4b44      	ldr	r3, [pc, #272]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d116      	bne.n	8001548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151a:	4b41      	ldr	r3, [pc, #260]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <HAL_RCC_OscConfig+0x152>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d001      	beq.n	8001532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e1c7      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001532:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	4937      	ldr	r1, [pc, #220]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	e03a      	b.n	80015be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d020      	beq.n	8001592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001550:	4b34      	ldr	r3, [pc, #208]	; (8001624 <HAL_RCC_OscConfig+0x244>)
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff f877 	bl	8000648 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff f873 	bl	8000648 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e1a8      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001570:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	4b28      	ldr	r3, [pc, #160]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4925      	ldr	r1, [pc, #148]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 800158c:	4313      	orrs	r3, r2
 800158e:	600b      	str	r3, [r1, #0]
 8001590:	e015      	b.n	80015be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_RCC_OscConfig+0x244>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff f856 	bl	8000648 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a0:	f7ff f852 	bl	8000648 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e187      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d036      	beq.n	8001638 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d016      	beq.n	8001600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_RCC_OscConfig+0x248>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d8:	f7ff f836 	bl	8000648 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e0:	f7ff f832 	bl	8000648 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e167      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_RCC_OscConfig+0x240>)
 80015f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x200>
 80015fe:	e01b      	b.n	8001638 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_RCC_OscConfig+0x248>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001606:	f7ff f81f 	bl	8000648 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160c:	e00e      	b.n	800162c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160e:	f7ff f81b 	bl	8000648 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d907      	bls.n	800162c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e150      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
 8001620:	40023800 	.word	0x40023800
 8001624:	42470000 	.word	0x42470000
 8001628:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162c:	4b88      	ldr	r3, [pc, #544]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 800162e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1ea      	bne.n	800160e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 8097 	beq.w	8001774 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800164a:	4b81      	ldr	r3, [pc, #516]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10f      	bne.n	8001676 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	4b7d      	ldr	r3, [pc, #500]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a7c      	ldr	r2, [pc, #496]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
 8001666:	4b7a      	ldr	r3, [pc, #488]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001672:	2301      	movs	r3, #1
 8001674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001676:	4b77      	ldr	r3, [pc, #476]	; (8001854 <HAL_RCC_OscConfig+0x474>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167e:	2b00      	cmp	r3, #0
 8001680:	d118      	bne.n	80016b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001682:	4b74      	ldr	r3, [pc, #464]	; (8001854 <HAL_RCC_OscConfig+0x474>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a73      	ldr	r2, [pc, #460]	; (8001854 <HAL_RCC_OscConfig+0x474>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800168e:	f7fe ffdb 	bl	8000648 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001696:	f7fe ffd7 	bl	8000648 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e10c      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a8:	4b6a      	ldr	r3, [pc, #424]	; (8001854 <HAL_RCC_OscConfig+0x474>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d106      	bne.n	80016ca <HAL_RCC_OscConfig+0x2ea>
 80016bc:	4b64      	ldr	r3, [pc, #400]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	4a63      	ldr	r2, [pc, #396]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6713      	str	r3, [r2, #112]	; 0x70
 80016c8:	e01c      	b.n	8001704 <HAL_RCC_OscConfig+0x324>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b05      	cmp	r3, #5
 80016d0:	d10c      	bne.n	80016ec <HAL_RCC_OscConfig+0x30c>
 80016d2:	4b5f      	ldr	r3, [pc, #380]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d6:	4a5e      	ldr	r2, [pc, #376]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6713      	str	r3, [r2, #112]	; 0x70
 80016de:	4b5c      	ldr	r3, [pc, #368]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e2:	4a5b      	ldr	r2, [pc, #364]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ea:	e00b      	b.n	8001704 <HAL_RCC_OscConfig+0x324>
 80016ec:	4b58      	ldr	r3, [pc, #352]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f0:	4a57      	ldr	r2, [pc, #348]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	6713      	str	r3, [r2, #112]	; 0x70
 80016f8:	4b55      	ldr	r3, [pc, #340]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fc:	4a54      	ldr	r2, [pc, #336]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80016fe:	f023 0304 	bic.w	r3, r3, #4
 8001702:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d015      	beq.n	8001738 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170c:	f7fe ff9c 	bl	8000648 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001712:	e00a      	b.n	800172a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001714:	f7fe ff98 	bl	8000648 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0cb      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172a:	4b49      	ldr	r3, [pc, #292]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0ee      	beq.n	8001714 <HAL_RCC_OscConfig+0x334>
 8001736:	e014      	b.n	8001762 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001738:	f7fe ff86 	bl	8000648 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173e:	e00a      	b.n	8001756 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001740:	f7fe ff82 	bl	8000648 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f241 3288 	movw	r2, #5000	; 0x1388
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e0b5      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001756:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1ee      	bne.n	8001740 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001762:	7dfb      	ldrb	r3, [r7, #23]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d105      	bne.n	8001774 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001768:	4b39      	ldr	r3, [pc, #228]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	4a38      	ldr	r2, [pc, #224]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 800176e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001772:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 80a1 	beq.w	80018c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b08      	cmp	r3, #8
 8001788:	d05c      	beq.n	8001844 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d141      	bne.n	8001816 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001792:	4b31      	ldr	r3, [pc, #196]	; (8001858 <HAL_RCC_OscConfig+0x478>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7fe ff56 	bl	8000648 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a0:	f7fe ff52 	bl	8000648 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e087      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b2:	4b27      	ldr	r3, [pc, #156]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69da      	ldr	r2, [r3, #28]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	019b      	lsls	r3, r3, #6
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	085b      	lsrs	r3, r3, #1
 80017d6:	3b01      	subs	r3, #1
 80017d8:	041b      	lsls	r3, r3, #16
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	061b      	lsls	r3, r3, #24
 80017e2:	491b      	ldr	r1, [pc, #108]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_RCC_OscConfig+0x478>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ee:	f7fe ff2b 	bl	8000648 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f6:	f7fe ff27 	bl	8000648 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e05c      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x416>
 8001814:	e054      	b.n	80018c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_RCC_OscConfig+0x478>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7fe ff14 	bl	8000648 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001824:	f7fe ff10 	bl	8000648 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e045      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_RCC_OscConfig+0x470>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x444>
 8001842:	e03d      	b.n	80018c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d107      	bne.n	800185c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e038      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
 8001850:	40023800 	.word	0x40023800
 8001854:	40007000 	.word	0x40007000
 8001858:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_RCC_OscConfig+0x4ec>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d028      	beq.n	80018bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d121      	bne.n	80018bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001882:	429a      	cmp	r2, r3
 8001884:	d11a      	bne.n	80018bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800188c:	4013      	ands	r3, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001892:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001894:	4293      	cmp	r3, r2
 8001896:	d111      	bne.n	80018bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	085b      	lsrs	r3, r3, #1
 80018a4:	3b01      	subs	r3, #1
 80018a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d107      	bne.n	80018bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800

080018d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0cc      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e4:	4b68      	ldr	r3, [pc, #416]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d90c      	bls.n	800190c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	4b65      	ldr	r3, [pc, #404]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fa:	4b63      	ldr	r3, [pc, #396]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0b8      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d020      	beq.n	800195a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001924:	4b59      	ldr	r3, [pc, #356]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4a58      	ldr	r2, [pc, #352]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800192e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800193c:	4b53      	ldr	r3, [pc, #332]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4a52      	ldr	r2, [pc, #328]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001948:	4b50      	ldr	r3, [pc, #320]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	494d      	ldr	r1, [pc, #308]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d044      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d119      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e07f      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d003      	beq.n	800198e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800198a:	2b03      	cmp	r3, #3
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198e:	4b3f      	ldr	r3, [pc, #252]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d109      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e06f      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199e:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e067      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ae:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f023 0203 	bic.w	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4934      	ldr	r1, [pc, #208]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c0:	f7fe fe42 	bl	8000648 <HAL_GetTick>
 80019c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c6:	e00a      	b.n	80019de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c8:	f7fe fe3e 	bl	8000648 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e04f      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 020c 	and.w	r2, r3, #12
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d1eb      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d20c      	bcs.n	8001a18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_RCC_ClockConfig+0x1b8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e032      	b.n	8001a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d008      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	4916      	ldr	r1, [pc, #88]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d009      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	490e      	ldr	r1, [pc, #56]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a56:	f000 f821 	bl	8001a9c <HAL_RCC_GetSysClockFreq>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	490a      	ldr	r1, [pc, #40]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	5ccb      	ldrb	r3, [r1, r3]
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fda2 	bl	80005c0 <HAL_InitTick>

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023c00 	.word	0x40023c00
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	08009fb8 	.word	0x08009fb8
 8001a94:	20000024 	.word	0x20000024
 8001a98:	20000000 	.word	0x20000000

08001a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aa0:	b090      	sub	sp, #64	; 0x40
 8001aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ab4:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d00d      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x40>
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	f200 80a1 	bhi.w	8001c08 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d003      	beq.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ace:	e09b      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ad0:	4b53      	ldr	r3, [pc, #332]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ad2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ad4:	e09b      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ad6:	4b53      	ldr	r3, [pc, #332]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ad8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ada:	e098      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001adc:	4b4f      	ldr	r3, [pc, #316]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ae4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ae6:	4b4d      	ldr	r3, [pc, #308]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d028      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af2:	4b4a      	ldr	r3, [pc, #296]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	099b      	lsrs	r3, r3, #6
 8001af8:	2200      	movs	r2, #0
 8001afa:	623b      	str	r3, [r7, #32]
 8001afc:	627a      	str	r2, [r7, #36]	; 0x24
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b04:	2100      	movs	r1, #0
 8001b06:	4b47      	ldr	r3, [pc, #284]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b08:	fb03 f201 	mul.w	r2, r3, r1
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	fb00 f303 	mul.w	r3, r0, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	4a43      	ldr	r2, [pc, #268]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b16:	fba0 1202 	umull	r1, r2, r0, r2
 8001b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b1c:	460a      	mov	r2, r1
 8001b1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b22:	4413      	add	r3, r2
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b28:	2200      	movs	r2, #0
 8001b2a:	61bb      	str	r3, [r7, #24]
 8001b2c:	61fa      	str	r2, [r7, #28]
 8001b2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b36:	f7fe fba3 	bl	8000280 <__aeabi_uldivmod>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4613      	mov	r3, r2
 8001b40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b42:	e053      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b44:	4b35      	ldr	r3, [pc, #212]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	099b      	lsrs	r3, r3, #6
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	617a      	str	r2, [r7, #20]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b56:	f04f 0b00 	mov.w	fp, #0
 8001b5a:	4652      	mov	r2, sl
 8001b5c:	465b      	mov	r3, fp
 8001b5e:	f04f 0000 	mov.w	r0, #0
 8001b62:	f04f 0100 	mov.w	r1, #0
 8001b66:	0159      	lsls	r1, r3, #5
 8001b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b6c:	0150      	lsls	r0, r2, #5
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	ebb2 080a 	subs.w	r8, r2, sl
 8001b76:	eb63 090b 	sbc.w	r9, r3, fp
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b8e:	ebb2 0408 	subs.w	r4, r2, r8
 8001b92:	eb63 0509 	sbc.w	r5, r3, r9
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	00eb      	lsls	r3, r5, #3
 8001ba0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ba4:	00e2      	lsls	r2, r4, #3
 8001ba6:	4614      	mov	r4, r2
 8001ba8:	461d      	mov	r5, r3
 8001baa:	eb14 030a 	adds.w	r3, r4, sl
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	eb45 030b 	adc.w	r3, r5, fp
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	028b      	lsls	r3, r1, #10
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bcc:	4621      	mov	r1, r4
 8001bce:	028a      	lsls	r2, r1, #10
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	60fa      	str	r2, [r7, #12]
 8001bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001be0:	f7fe fb4e 	bl	8000280 <__aeabi_uldivmod>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4613      	mov	r3, r2
 8001bea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	0c1b      	lsrs	r3, r3, #16
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001bfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c06:	e002      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3740      	adds	r7, #64	; 0x40
 8001c14:	46bd      	mov	sp, r7
 8001c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	00f42400 	.word	0x00f42400
 8001c24:	017d7840 	.word	0x017d7840

08001c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000024 	.word	0x20000024

08001c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c44:	f7ff fff0 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	0a9b      	lsrs	r3, r3, #10
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	4903      	ldr	r1, [pc, #12]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	08009fc8 	.word	0x08009fc8

08001c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c6c:	f7ff ffdc 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	0b5b      	lsrs	r3, r3, #13
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	4903      	ldr	r1, [pc, #12]	; (8001c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c7e:	5ccb      	ldrb	r3, [r1, r3]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	08009fc8 	.word	0x08009fc8

08001c90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e07b      	b.n	8001d9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d108      	bne.n	8001cbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cb2:	d009      	beq.n	8001cc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
 8001cba:	e005      	b.n	8001cc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d106      	bne.n	8001ce8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f002 fde8 	bl	80048b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4c:	ea42 0103 	orr.w	r1, r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	0c1b      	lsrs	r3, r3, #16
 8001d66:	f003 0104 	and.w	r1, r3, #4
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	f003 0210 	and.w	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	69da      	ldr	r2, [r3, #28]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e041      	b.n	8001e38 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d106      	bne.n	8001dce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f002 ff19 	bl	8004c00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	4619      	mov	r1, r3
 8001de0:	4610      	mov	r0, r2
 8001de2:	f000 f9b7 	bl	8002154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d109      	bne.n	8001e64 <HAL_TIM_PWM_Start+0x24>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	e022      	b.n	8001eaa <HAL_TIM_PWM_Start+0x6a>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d109      	bne.n	8001e7e <HAL_TIM_PWM_Start+0x3e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	bf14      	ite	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	2300      	moveq	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	e015      	b.n	8001eaa <HAL_TIM_PWM_Start+0x6a>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d109      	bne.n	8001e98 <HAL_TIM_PWM_Start+0x58>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	bf14      	ite	ne
 8001e90:	2301      	movne	r3, #1
 8001e92:	2300      	moveq	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	e008      	b.n	8001eaa <HAL_TIM_PWM_Start+0x6a>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	bf14      	ite	ne
 8001ea4:	2301      	movne	r3, #1
 8001ea6:	2300      	moveq	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e07c      	b.n	8001fac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d104      	bne.n	8001ec2 <HAL_TIM_PWM_Start+0x82>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ec0:	e013      	b.n	8001eea <HAL_TIM_PWM_Start+0xaa>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d104      	bne.n	8001ed2 <HAL_TIM_PWM_Start+0x92>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ed0:	e00b      	b.n	8001eea <HAL_TIM_PWM_Start+0xaa>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d104      	bne.n	8001ee2 <HAL_TIM_PWM_Start+0xa2>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ee0:	e003      	b.n	8001eea <HAL_TIM_PWM_Start+0xaa>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	6839      	ldr	r1, [r7, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 fb84 	bl	8002600 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a2d      	ldr	r2, [pc, #180]	; (8001fb4 <HAL_TIM_PWM_Start+0x174>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d004      	beq.n	8001f0c <HAL_TIM_PWM_Start+0xcc>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a2c      	ldr	r2, [pc, #176]	; (8001fb8 <HAL_TIM_PWM_Start+0x178>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d101      	bne.n	8001f10 <HAL_TIM_PWM_Start+0xd0>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_TIM_PWM_Start+0xd2>
 8001f10:	2300      	movs	r3, #0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d007      	beq.n	8001f26 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a22      	ldr	r2, [pc, #136]	; (8001fb4 <HAL_TIM_PWM_Start+0x174>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d022      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x136>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	d01d      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x136>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1f      	ldr	r2, [pc, #124]	; (8001fbc <HAL_TIM_PWM_Start+0x17c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d018      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x136>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <HAL_TIM_PWM_Start+0x180>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x136>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <HAL_TIM_PWM_Start+0x184>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d00e      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x136>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a16      	ldr	r2, [pc, #88]	; (8001fb8 <HAL_TIM_PWM_Start+0x178>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d009      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x136>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <HAL_TIM_PWM_Start+0x188>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d004      	beq.n	8001f76 <HAL_TIM_PWM_Start+0x136>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a16      	ldr	r2, [pc, #88]	; (8001fcc <HAL_TIM_PWM_Start+0x18c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d111      	bne.n	8001f9a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b06      	cmp	r3, #6
 8001f86:	d010      	beq.n	8001faa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f98:	e007      	b.n	8001faa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0201 	orr.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40010000 	.word	0x40010000
 8001fb8:	40010400 	.word	0x40010400
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40000800 	.word	0x40000800
 8001fc4:	40000c00 	.word	0x40000c00
 8001fc8:	40014000 	.word	0x40014000
 8001fcc:	40001800 	.word	0x40001800

08001fd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e0ae      	b.n	800214c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	f200 809f 	bhi.w	800213c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001ffe:	a201      	add	r2, pc, #4	; (adr r2, 8002004 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002004:	08002039 	.word	0x08002039
 8002008:	0800213d 	.word	0x0800213d
 800200c:	0800213d 	.word	0x0800213d
 8002010:	0800213d 	.word	0x0800213d
 8002014:	08002079 	.word	0x08002079
 8002018:	0800213d 	.word	0x0800213d
 800201c:	0800213d 	.word	0x0800213d
 8002020:	0800213d 	.word	0x0800213d
 8002024:	080020bb 	.word	0x080020bb
 8002028:	0800213d 	.word	0x0800213d
 800202c:	0800213d 	.word	0x0800213d
 8002030:	0800213d 	.word	0x0800213d
 8002034:	080020fb 	.word	0x080020fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f92e 	bl	80022a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0208 	orr.w	r2, r2, #8
 8002052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699a      	ldr	r2, [r3, #24]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0204 	bic.w	r2, r2, #4
 8002062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6999      	ldr	r1, [r3, #24]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	619a      	str	r2, [r3, #24]
      break;
 8002076:	e064      	b.n	8002142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	4618      	mov	r0, r3
 8002080:	f000 f97e 	bl	8002380 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6999      	ldr	r1, [r3, #24]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	021a      	lsls	r2, r3, #8
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	619a      	str	r2, [r3, #24]
      break;
 80020b8:	e043      	b.n	8002142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 f9d3 	bl	800246c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69da      	ldr	r2, [r3, #28]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0208 	orr.w	r2, r2, #8
 80020d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0204 	bic.w	r2, r2, #4
 80020e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	69d9      	ldr	r1, [r3, #28]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	61da      	str	r2, [r3, #28]
      break;
 80020f8:	e023      	b.n	8002142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68b9      	ldr	r1, [r7, #8]
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fa27 	bl	8002554 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69da      	ldr	r2, [r3, #28]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	69da      	ldr	r2, [r3, #28]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	69d9      	ldr	r1, [r3, #28]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	021a      	lsls	r2, r3, #8
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	61da      	str	r2, [r3, #28]
      break;
 800213a:	e002      	b.n	8002142 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	75fb      	strb	r3, [r7, #23]
      break;
 8002140:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800214a:	7dfb      	ldrb	r3, [r7, #23]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a43      	ldr	r2, [pc, #268]	; (8002274 <TIM_Base_SetConfig+0x120>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d013      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002172:	d00f      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a40      	ldr	r2, [pc, #256]	; (8002278 <TIM_Base_SetConfig+0x124>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d00b      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a3f      	ldr	r2, [pc, #252]	; (800227c <TIM_Base_SetConfig+0x128>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d007      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a3e      	ldr	r2, [pc, #248]	; (8002280 <TIM_Base_SetConfig+0x12c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d003      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a3d      	ldr	r2, [pc, #244]	; (8002284 <TIM_Base_SetConfig+0x130>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d108      	bne.n	80021a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a32      	ldr	r2, [pc, #200]	; (8002274 <TIM_Base_SetConfig+0x120>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d02b      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	d027      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a2f      	ldr	r2, [pc, #188]	; (8002278 <TIM_Base_SetConfig+0x124>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d023      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a2e      	ldr	r2, [pc, #184]	; (800227c <TIM_Base_SetConfig+0x128>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01f      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a2d      	ldr	r2, [pc, #180]	; (8002280 <TIM_Base_SetConfig+0x12c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01b      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a2c      	ldr	r2, [pc, #176]	; (8002284 <TIM_Base_SetConfig+0x130>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d017      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a2b      	ldr	r2, [pc, #172]	; (8002288 <TIM_Base_SetConfig+0x134>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d013      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a2a      	ldr	r2, [pc, #168]	; (800228c <TIM_Base_SetConfig+0x138>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00f      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a29      	ldr	r2, [pc, #164]	; (8002290 <TIM_Base_SetConfig+0x13c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00b      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a28      	ldr	r2, [pc, #160]	; (8002294 <TIM_Base_SetConfig+0x140>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d007      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a27      	ldr	r2, [pc, #156]	; (8002298 <TIM_Base_SetConfig+0x144>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d003      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a26      	ldr	r2, [pc, #152]	; (800229c <TIM_Base_SetConfig+0x148>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d108      	bne.n	8002218 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <TIM_Base_SetConfig+0x120>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d003      	beq.n	8002246 <TIM_Base_SetConfig+0xf2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a10      	ldr	r2, [pc, #64]	; (8002284 <TIM_Base_SetConfig+0x130>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d103      	bne.n	800224e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f043 0204 	orr.w	r2, r3, #4
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	601a      	str	r2, [r3, #0]
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40010000 	.word	0x40010000
 8002278:	40000400 	.word	0x40000400
 800227c:	40000800 	.word	0x40000800
 8002280:	40000c00 	.word	0x40000c00
 8002284:	40010400 	.word	0x40010400
 8002288:	40014000 	.word	0x40014000
 800228c:	40014400 	.word	0x40014400
 8002290:	40014800 	.word	0x40014800
 8002294:	40001800 	.word	0x40001800
 8002298:	40001c00 	.word	0x40001c00
 800229c:	40002000 	.word	0x40002000

080022a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	f023 0201 	bic.w	r2, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0303 	bic.w	r3, r3, #3
 80022d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f023 0302 	bic.w	r3, r3, #2
 80022e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a20      	ldr	r2, [pc, #128]	; (8002378 <TIM_OC1_SetConfig+0xd8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d003      	beq.n	8002304 <TIM_OC1_SetConfig+0x64>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a1f      	ldr	r2, [pc, #124]	; (800237c <TIM_OC1_SetConfig+0xdc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d10c      	bne.n	800231e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f023 0308 	bic.w	r3, r3, #8
 800230a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4313      	orrs	r3, r2
 8002314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f023 0304 	bic.w	r3, r3, #4
 800231c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a15      	ldr	r2, [pc, #84]	; (8002378 <TIM_OC1_SetConfig+0xd8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d003      	beq.n	800232e <TIM_OC1_SetConfig+0x8e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <TIM_OC1_SetConfig+0xdc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d111      	bne.n	8002352 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800233c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	621a      	str	r2, [r3, #32]
}
 800236c:	bf00      	nop
 800236e:	371c      	adds	r7, #28
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	40010000 	.word	0x40010000
 800237c:	40010400 	.word	0x40010400

08002380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f023 0210 	bic.w	r2, r3, #16
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f023 0320 	bic.w	r3, r3, #32
 80023ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a22      	ldr	r2, [pc, #136]	; (8002464 <TIM_OC2_SetConfig+0xe4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d003      	beq.n	80023e8 <TIM_OC2_SetConfig+0x68>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a21      	ldr	r2, [pc, #132]	; (8002468 <TIM_OC2_SetConfig+0xe8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d10d      	bne.n	8002404 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002402:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a17      	ldr	r2, [pc, #92]	; (8002464 <TIM_OC2_SetConfig+0xe4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d003      	beq.n	8002414 <TIM_OC2_SetConfig+0x94>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a16      	ldr	r2, [pc, #88]	; (8002468 <TIM_OC2_SetConfig+0xe8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d113      	bne.n	800243c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800241a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002422:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	621a      	str	r2, [r3, #32]
}
 8002456:	bf00      	nop
 8002458:	371c      	adds	r7, #28
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40010000 	.word	0x40010000
 8002468:	40010400 	.word	0x40010400

0800246c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800246c:	b480      	push	{r7}
 800246e:	b087      	sub	sp, #28
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f023 0303 	bic.w	r3, r3, #3
 80024a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a21      	ldr	r2, [pc, #132]	; (800254c <TIM_OC3_SetConfig+0xe0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d003      	beq.n	80024d2 <TIM_OC3_SetConfig+0x66>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a20      	ldr	r2, [pc, #128]	; (8002550 <TIM_OC3_SetConfig+0xe4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d10d      	bne.n	80024ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a16      	ldr	r2, [pc, #88]	; (800254c <TIM_OC3_SetConfig+0xe0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d003      	beq.n	80024fe <TIM_OC3_SetConfig+0x92>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a15      	ldr	r2, [pc, #84]	; (8002550 <TIM_OC3_SetConfig+0xe4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d113      	bne.n	8002526 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800250c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	621a      	str	r2, [r3, #32]
}
 8002540:	bf00      	nop
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	40010000 	.word	0x40010000
 8002550:	40010400 	.word	0x40010400

08002554 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800259e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	031b      	lsls	r3, r3, #12
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <TIM_OC4_SetConfig+0xa4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d003      	beq.n	80025bc <TIM_OC4_SetConfig+0x68>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a11      	ldr	r2, [pc, #68]	; (80025fc <TIM_OC4_SetConfig+0xa8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d109      	bne.n	80025d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	019b      	lsls	r3, r3, #6
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	621a      	str	r2, [r3, #32]
}
 80025ea:	bf00      	nop
 80025ec:	371c      	adds	r7, #28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40010000 	.word	0x40010000
 80025fc:	40010400 	.word	0x40010400

08002600 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2201      	movs	r2, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a1a      	ldr	r2, [r3, #32]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	43db      	mvns	r3, r3
 8002622:	401a      	ands	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a1a      	ldr	r2, [r3, #32]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f003 031f 	and.w	r3, r3, #31
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	431a      	orrs	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	621a      	str	r2, [r3, #32]
}
 800263e:	bf00      	nop
 8002640:	371c      	adds	r7, #28
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002660:	2302      	movs	r3, #2
 8002662:	e05a      	b.n	800271a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a21      	ldr	r2, [pc, #132]	; (8002728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d022      	beq.n	80026ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b0:	d01d      	beq.n	80026ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a1d      	ldr	r2, [pc, #116]	; (800272c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d018      	beq.n	80026ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a1b      	ldr	r2, [pc, #108]	; (8002730 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a1a      	ldr	r2, [pc, #104]	; (8002734 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00e      	beq.n	80026ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a18      	ldr	r2, [pc, #96]	; (8002738 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d009      	beq.n	80026ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a17      	ldr	r2, [pc, #92]	; (800273c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d004      	beq.n	80026ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a15      	ldr	r2, [pc, #84]	; (8002740 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d10c      	bne.n	8002708 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40010000 	.word	0x40010000
 800272c:	40000400 	.word	0x40000400
 8002730:	40000800 	.word	0x40000800
 8002734:	40000c00 	.word	0x40000c00
 8002738:	40010400 	.word	0x40010400
 800273c:	40014000 	.word	0x40014000
 8002740:	40001800 	.word	0x40001800

08002744 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e042      	b.n	80027dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f002 faca 	bl	8004d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2224      	movs	r2, #36	; 0x24
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002786:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f973 	bl	8002a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800279c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	; 0x28
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	4613      	mov	r3, r2
 80027f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b20      	cmp	r3, #32
 8002802:	d175      	bne.n	80028f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_UART_Transmit+0x2c>
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e06e      	b.n	80028f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2221      	movs	r2, #33	; 0x21
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002822:	f7fd ff11 	bl	8000648 <HAL_GetTick>
 8002826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	88fa      	ldrh	r2, [r7, #6]
 800282c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	88fa      	ldrh	r2, [r7, #6]
 8002832:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283c:	d108      	bne.n	8002850 <HAL_UART_Transmit+0x6c>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d104      	bne.n	8002850 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	e003      	b.n	8002858 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002858:	e02e      	b.n	80028b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2200      	movs	r2, #0
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f848 	bl	80028fa <UART_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e03a      	b.n	80028f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10b      	bne.n	800289a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002890:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	3302      	adds	r3, #2
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	e007      	b.n	80028aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	3301      	adds	r3, #1
 80028a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1cb      	bne.n	800285a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2200      	movs	r2, #0
 80028ca:	2140      	movs	r1, #64	; 0x40
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f814 	bl	80028fa <UART_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e006      	b.n	80028f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	4613      	mov	r3, r2
 8002908:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800290a:	e03b      	b.n	8002984 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002912:	d037      	beq.n	8002984 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002914:	f7fd fe98 	bl	8000648 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	6a3a      	ldr	r2, [r7, #32]
 8002920:	429a      	cmp	r2, r3
 8002922:	d302      	bcc.n	800292a <UART_WaitOnFlagUntilTimeout+0x30>
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e03a      	b.n	80029a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d023      	beq.n	8002984 <UART_WaitOnFlagUntilTimeout+0x8a>
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b80      	cmp	r3, #128	; 0x80
 8002940:	d020      	beq.n	8002984 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b40      	cmp	r3, #64	; 0x40
 8002946:	d01d      	beq.n	8002984 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b08      	cmp	r3, #8
 8002954:	d116      	bne.n	8002984 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f81d 	bl	80029ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2208      	movs	r2, #8
 8002976:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e00f      	b.n	80029a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	4013      	ands	r3, r2
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	429a      	cmp	r2, r3
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d0b4      	beq.n	800290c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b095      	sub	sp, #84	; 0x54
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	330c      	adds	r3, #12
 80029ba:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029be:	e853 3f00 	ldrex	r3, [r3]
 80029c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	330c      	adds	r3, #12
 80029d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029d4:	643a      	str	r2, [r7, #64]	; 0x40
 80029d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029dc:	e841 2300 	strex	r3, r2, [r1]
 80029e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e5      	bne.n	80029b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	3314      	adds	r3, #20
 80029ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	e853 3f00 	ldrex	r3, [r3]
 80029f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f023 0301 	bic.w	r3, r3, #1
 80029fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3314      	adds	r3, #20
 8002a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a10:	e841 2300 	strex	r3, r2, [r1]
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e5      	bne.n	80029e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d119      	bne.n	8002a58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	330c      	adds	r3, #12
 8002a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	e853 3f00 	ldrex	r3, [r3]
 8002a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f023 0310 	bic.w	r3, r3, #16
 8002a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	330c      	adds	r3, #12
 8002a42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a44:	61ba      	str	r2, [r7, #24]
 8002a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a48:	6979      	ldr	r1, [r7, #20]
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	e841 2300 	strex	r3, r2, [r1]
 8002a50:	613b      	str	r3, [r7, #16]
   return(result);
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e5      	bne.n	8002a24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a66:	bf00      	nop
 8002a68:	3754      	adds	r7, #84	; 0x54
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a78:	b0c0      	sub	sp, #256	; 0x100
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a90:	68d9      	ldr	r1, [r3, #12]
 8002a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	ea40 0301 	orr.w	r3, r0, r1
 8002a9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002acc:	f021 010c 	bic.w	r1, r1, #12
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ada:	430b      	orrs	r3, r1
 8002adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aee:	6999      	ldr	r1, [r3, #24]
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	ea40 0301 	orr.w	r3, r0, r1
 8002afa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4b8f      	ldr	r3, [pc, #572]	; (8002d40 <UART_SetConfig+0x2cc>)
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d005      	beq.n	8002b14 <UART_SetConfig+0xa0>
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b8d      	ldr	r3, [pc, #564]	; (8002d44 <UART_SetConfig+0x2d0>)
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d104      	bne.n	8002b1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b14:	f7ff f8a8 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 8002b18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b1c:	e003      	b.n	8002b26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b1e:	f7ff f88f 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 8002b22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b30:	f040 810c 	bne.w	8002d4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b46:	4622      	mov	r2, r4
 8002b48:	462b      	mov	r3, r5
 8002b4a:	1891      	adds	r1, r2, r2
 8002b4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b4e:	415b      	adcs	r3, r3
 8002b50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b56:	4621      	mov	r1, r4
 8002b58:	eb12 0801 	adds.w	r8, r2, r1
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	eb43 0901 	adc.w	r9, r3, r1
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b76:	4690      	mov	r8, r2
 8002b78:	4699      	mov	r9, r3
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	eb18 0303 	adds.w	r3, r8, r3
 8002b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b84:	462b      	mov	r3, r5
 8002b86:	eb49 0303 	adc.w	r3, r9, r3
 8002b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	18db      	adds	r3, r3, r3
 8002ba6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ba8:	4613      	mov	r3, r2
 8002baa:	eb42 0303 	adc.w	r3, r2, r3
 8002bae:	657b      	str	r3, [r7, #84]	; 0x54
 8002bb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002bb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002bb8:	f7fd fb62 	bl	8000280 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	011c      	lsls	r4, r3, #4
 8002bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002bd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002bdc:	4642      	mov	r2, r8
 8002bde:	464b      	mov	r3, r9
 8002be0:	1891      	adds	r1, r2, r2
 8002be2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002be4:	415b      	adcs	r3, r3
 8002be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bec:	4641      	mov	r1, r8
 8002bee:	eb12 0a01 	adds.w	sl, r2, r1
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	eb43 0b01 	adc.w	fp, r3, r1
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c0c:	4692      	mov	sl, r2
 8002c0e:	469b      	mov	fp, r3
 8002c10:	4643      	mov	r3, r8
 8002c12:	eb1a 0303 	adds.w	r3, sl, r3
 8002c16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	18db      	adds	r3, r3, r3
 8002c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8002c3e:	4613      	mov	r3, r2
 8002c40:	eb42 0303 	adc.w	r3, r2, r3
 8002c44:	647b      	str	r3, [r7, #68]	; 0x44
 8002c46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c4e:	f7fd fb17 	bl	8000280 <__aeabi_uldivmod>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4611      	mov	r1, r2
 8002c58:	4b3b      	ldr	r3, [pc, #236]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	2264      	movs	r2, #100	; 0x64
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	1acb      	subs	r3, r1, r3
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c6e:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002c70:	fba3 2302 	umull	r2, r3, r3, r2
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c7c:	441c      	add	r4, r3
 8002c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c82:	2200      	movs	r2, #0
 8002c84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c90:	4642      	mov	r2, r8
 8002c92:	464b      	mov	r3, r9
 8002c94:	1891      	adds	r1, r2, r2
 8002c96:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c98:	415b      	adcs	r3, r3
 8002c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ca0:	4641      	mov	r1, r8
 8002ca2:	1851      	adds	r1, r2, r1
 8002ca4:	6339      	str	r1, [r7, #48]	; 0x30
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	414b      	adcs	r3, r1
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002cb8:	4659      	mov	r1, fp
 8002cba:	00cb      	lsls	r3, r1, #3
 8002cbc:	4651      	mov	r1, sl
 8002cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cc2:	4651      	mov	r1, sl
 8002cc4:	00ca      	lsls	r2, r1, #3
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4642      	mov	r2, r8
 8002cce:	189b      	adds	r3, r3, r2
 8002cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cd4:	464b      	mov	r3, r9
 8002cd6:	460a      	mov	r2, r1
 8002cd8:	eb42 0303 	adc.w	r3, r2, r3
 8002cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	18db      	adds	r3, r3, r3
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	eb42 0303 	adc.w	r3, r2, r3
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d0a:	f7fd fab9 	bl	8000280 <__aeabi_uldivmod>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002d14:	fba3 1302 	umull	r1, r3, r3, r2
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	2164      	movs	r1, #100	; 0x64
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	3332      	adds	r3, #50	; 0x32
 8002d26:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	f003 0207 	and.w	r2, r3, #7
 8002d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4422      	add	r2, r4
 8002d3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d3c:	e106      	b.n	8002f4c <UART_SetConfig+0x4d8>
 8002d3e:	bf00      	nop
 8002d40:	40011000 	.word	0x40011000
 8002d44:	40011400 	.word	0x40011400
 8002d48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d50:	2200      	movs	r2, #0
 8002d52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d5e:	4642      	mov	r2, r8
 8002d60:	464b      	mov	r3, r9
 8002d62:	1891      	adds	r1, r2, r2
 8002d64:	6239      	str	r1, [r7, #32]
 8002d66:	415b      	adcs	r3, r3
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d6e:	4641      	mov	r1, r8
 8002d70:	1854      	adds	r4, r2, r1
 8002d72:	4649      	mov	r1, r9
 8002d74:	eb43 0501 	adc.w	r5, r3, r1
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	00eb      	lsls	r3, r5, #3
 8002d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d86:	00e2      	lsls	r2, r4, #3
 8002d88:	4614      	mov	r4, r2
 8002d8a:	461d      	mov	r5, r3
 8002d8c:	4643      	mov	r3, r8
 8002d8e:	18e3      	adds	r3, r4, r3
 8002d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d94:	464b      	mov	r3, r9
 8002d96:	eb45 0303 	adc.w	r3, r5, r3
 8002d9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002daa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dba:	4629      	mov	r1, r5
 8002dbc:	008b      	lsls	r3, r1, #2
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	008a      	lsls	r2, r1, #2
 8002dc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002dcc:	f7fd fa58 	bl	8000280 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4b60      	ldr	r3, [pc, #384]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	011c      	lsls	r4, r3, #4
 8002dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de2:	2200      	movs	r2, #0
 8002de4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002de8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002dec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002df0:	4642      	mov	r2, r8
 8002df2:	464b      	mov	r3, r9
 8002df4:	1891      	adds	r1, r2, r2
 8002df6:	61b9      	str	r1, [r7, #24]
 8002df8:	415b      	adcs	r3, r3
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e00:	4641      	mov	r1, r8
 8002e02:	1851      	adds	r1, r2, r1
 8002e04:	6139      	str	r1, [r7, #16]
 8002e06:	4649      	mov	r1, r9
 8002e08:	414b      	adcs	r3, r1
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e18:	4659      	mov	r1, fp
 8002e1a:	00cb      	lsls	r3, r1, #3
 8002e1c:	4651      	mov	r1, sl
 8002e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e22:	4651      	mov	r1, sl
 8002e24:	00ca      	lsls	r2, r1, #3
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4642      	mov	r2, r8
 8002e2e:	189b      	adds	r3, r3, r2
 8002e30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e34:	464b      	mov	r3, r9
 8002e36:	460a      	mov	r2, r1
 8002e38:	eb42 0303 	adc.w	r3, r2, r3
 8002e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e58:	4649      	mov	r1, r9
 8002e5a:	008b      	lsls	r3, r1, #2
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e62:	4641      	mov	r1, r8
 8002e64:	008a      	lsls	r2, r1, #2
 8002e66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e6a:	f7fd fa09 	bl	8000280 <__aeabi_uldivmod>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	4b38      	ldr	r3, [pc, #224]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002e76:	fba3 2301 	umull	r2, r3, r3, r1
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	2264      	movs	r2, #100	; 0x64
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	1acb      	subs	r3, r1, r3
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	3332      	adds	r3, #50	; 0x32
 8002e88:	4a33      	ldr	r2, [pc, #204]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e94:	441c      	add	r4, r3
 8002e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	673b      	str	r3, [r7, #112]	; 0x70
 8002e9e:	677a      	str	r2, [r7, #116]	; 0x74
 8002ea0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ea4:	4642      	mov	r2, r8
 8002ea6:	464b      	mov	r3, r9
 8002ea8:	1891      	adds	r1, r2, r2
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	415b      	adcs	r3, r3
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb4:	4641      	mov	r1, r8
 8002eb6:	1851      	adds	r1, r2, r1
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	4649      	mov	r1, r9
 8002ebc:	414b      	adcs	r3, r1
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ecc:	4659      	mov	r1, fp
 8002ece:	00cb      	lsls	r3, r1, #3
 8002ed0:	4651      	mov	r1, sl
 8002ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ed6:	4651      	mov	r1, sl
 8002ed8:	00ca      	lsls	r2, r1, #3
 8002eda:	4610      	mov	r0, r2
 8002edc:	4619      	mov	r1, r3
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4642      	mov	r2, r8
 8002ee2:	189b      	adds	r3, r3, r2
 8002ee4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ee6:	464b      	mov	r3, r9
 8002ee8:	460a      	mov	r2, r1
 8002eea:	eb42 0303 	adc.w	r3, r2, r3
 8002eee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	663b      	str	r3, [r7, #96]	; 0x60
 8002efa:	667a      	str	r2, [r7, #100]	; 0x64
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f08:	4649      	mov	r1, r9
 8002f0a:	008b      	lsls	r3, r1, #2
 8002f0c:	4641      	mov	r1, r8
 8002f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f12:	4641      	mov	r1, r8
 8002f14:	008a      	lsls	r2, r1, #2
 8002f16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f1a:	f7fd f9b1 	bl	8000280 <__aeabi_uldivmod>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002f24:	fba3 1302 	umull	r1, r3, r3, r2
 8002f28:	095b      	lsrs	r3, r3, #5
 8002f2a:	2164      	movs	r1, #100	; 0x64
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	3332      	adds	r3, #50	; 0x32
 8002f36:	4a08      	ldr	r2, [pc, #32]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	f003 020f 	and.w	r2, r3, #15
 8002f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4422      	add	r2, r4
 8002f4a:	609a      	str	r2, [r3, #8]
}
 8002f4c:	bf00      	nop
 8002f4e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f52:	46bd      	mov	sp, r7
 8002f54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f58:	51eb851f 	.word	0x51eb851f

08002f5c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f6e:	2b84      	cmp	r3, #132	; 0x84
 8002f70:	d005      	beq.n	8002f7e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002f72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4413      	add	r3, r2
 8002f7a:	3303      	adds	r3, #3
 8002f7c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002f90:	f000 fade 	bl	8003550 <vTaskStartScheduler>
  
  return osOK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f9c:	b089      	sub	sp, #36	; 0x24
 8002f9e:	af04      	add	r7, sp, #16
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d020      	beq.n	8002fee <osThreadCreate+0x54>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01c      	beq.n	8002fee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685c      	ldr	r4, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691e      	ldr	r6, [r3, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ffc8 	bl	8002f5c <makeFreeRtosPriority>
 8002fcc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fd6:	9202      	str	r2, [sp, #8]
 8002fd8:	9301      	str	r3, [sp, #4]
 8002fda:	9100      	str	r1, [sp, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	4632      	mov	r2, r6
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	f000 f8ed 	bl	80031c2 <xTaskCreateStatic>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e01c      	b.n	8003028 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685c      	ldr	r4, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ffa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff ffaa 	bl	8002f5c <makeFreeRtosPriority>
 8003008:	4602      	mov	r2, r0
 800300a:	f107 030c 	add.w	r3, r7, #12
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	9200      	str	r2, [sp, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	4632      	mov	r2, r6
 8003016:	4629      	mov	r1, r5
 8003018:	4620      	mov	r0, r4
 800301a:	f000 f92f 	bl	800327c <xTaskCreate>
 800301e:	4603      	mov	r3, r0
 8003020:	2b01      	cmp	r3, #1
 8003022:	d001      	beq.n	8003028 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003024:	2300      	movs	r3, #0
 8003026:	e000      	b.n	800302a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003028:	68fb      	ldr	r3, [r7, #12]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003032 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <osDelay+0x16>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	e000      	b.n	800304a <osDelay+0x18>
 8003048:	2301      	movs	r3, #1
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fa4c 	bl	80034e8 <vTaskDelay>
  
  return osOK;
 8003050:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f103 0208 	add.w	r2, r3, #8
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f04f 32ff 	mov.w	r2, #4294967295
 8003072:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f103 0208 	add.w	r2, r3, #8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f103 0208 	add.w	r2, r3, #8
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	601a      	str	r2, [r3, #0]
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003112:	d103      	bne.n	800311c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	e00c      	b.n	8003136 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3308      	adds	r3, #8
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	e002      	b.n	800312a <vListInsert+0x2e>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	429a      	cmp	r2, r3
 8003134:	d2f6      	bcs.n	8003124 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	601a      	str	r2, [r3, #0]
}
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6892      	ldr	r2, [r2, #8]
 8003184:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6852      	ldr	r2, [r2, #4]
 800318e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	429a      	cmp	r2, r3
 8003198:	d103      	bne.n	80031a2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	1e5a      	subs	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b08e      	sub	sp, #56	; 0x38
 80031c6:	af04      	add	r7, sp, #16
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80031d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80031e8:	bf00      	nop
 80031ea:	e7fe      	b.n	80031ea <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80031ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10a      	bne.n	8003208 <xTaskCreateStatic+0x46>
	__asm volatile
 80031f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	61fb      	str	r3, [r7, #28]
}
 8003204:	bf00      	nop
 8003206:	e7fe      	b.n	8003206 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003208:	2354      	movs	r3, #84	; 0x54
 800320a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b54      	cmp	r3, #84	; 0x54
 8003210:	d00a      	beq.n	8003228 <xTaskCreateStatic+0x66>
	__asm volatile
 8003212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	61bb      	str	r3, [r7, #24]
}
 8003224:	bf00      	nop
 8003226:	e7fe      	b.n	8003226 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003228:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800322a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01e      	beq.n	800326e <xTaskCreateStatic+0xac>
 8003230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01b      	beq.n	800326e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800323e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	2202      	movs	r2, #2
 8003244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003248:	2300      	movs	r3, #0
 800324a:	9303      	str	r3, [sp, #12]
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	9302      	str	r3, [sp, #8]
 8003250:	f107 0314 	add.w	r3, r7, #20
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f850 	bl	8003306 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003266:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003268:	f000 f8d4 	bl	8003414 <prvAddNewTaskToReadyList>
 800326c:	e001      	b.n	8003272 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003272:	697b      	ldr	r3, [r7, #20]
	}
 8003274:	4618      	mov	r0, r3
 8003276:	3728      	adds	r7, #40	; 0x28
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08c      	sub	sp, #48	; 0x30
 8003280:	af04      	add	r7, sp, #16
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fee1 	bl	8004058 <pvPortMalloc>
 8003296:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00e      	beq.n	80032bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800329e:	2054      	movs	r0, #84	; 0x54
 80032a0:	f000 feda 	bl	8004058 <pvPortMalloc>
 80032a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30
 80032b2:	e005      	b.n	80032c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032b4:	6978      	ldr	r0, [r7, #20]
 80032b6:	f000 ff9b 	bl	80041f0 <vPortFree>
 80032ba:	e001      	b.n	80032c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d017      	beq.n	80032f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032ce:	88fa      	ldrh	r2, [r7, #6]
 80032d0:	2300      	movs	r3, #0
 80032d2:	9303      	str	r3, [sp, #12]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	9302      	str	r3, [sp, #8]
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f80e 	bl	8003306 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032ea:	69f8      	ldr	r0, [r7, #28]
 80032ec:	f000 f892 	bl	8003414 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032f0:	2301      	movs	r3, #1
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	e002      	b.n	80032fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032fc:	69bb      	ldr	r3, [r7, #24]
	}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b088      	sub	sp, #32
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800331e:	3b01      	subs	r3, #1
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	f023 0307 	bic.w	r3, r3, #7
 800332c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <prvInitialiseNewTask+0x48>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	617b      	str	r3, [r7, #20]
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01f      	beq.n	8003394 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
 8003358:	e012      	b.n	8003380 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	4413      	add	r3, r2
 8003360:	7819      	ldrb	r1, [r3, #0]
 8003362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	4413      	add	r3, r2
 8003368:	3334      	adds	r3, #52	; 0x34
 800336a:	460a      	mov	r2, r1
 800336c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	4413      	add	r3, r2
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d006      	beq.n	8003388 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3301      	adds	r3, #1
 800337e:	61fb      	str	r3, [r7, #28]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	2b0f      	cmp	r3, #15
 8003384:	d9e9      	bls.n	800335a <prvInitialiseNewTask+0x54>
 8003386:	e000      	b.n	800338a <prvInitialiseNewTask+0x84>
			{
				break;
 8003388:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003392:	e003      	b.n	800339c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d901      	bls.n	80033a6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033a2:	2306      	movs	r3, #6
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033b0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	2200      	movs	r2, #0
 80033b6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	3304      	adds	r3, #4
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fe6c 	bl	800309a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	3318      	adds	r3, #24
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fe67 	bl	800309a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	f1c3 0207 	rsb	r2, r3, #7
 80033d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	2200      	movs	r2, #0
 80033e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	68f9      	ldr	r1, [r7, #12]
 80033f4:	69b8      	ldr	r0, [r7, #24]
 80033f6:	f000 fc23 	bl	8003c40 <pxPortInitialiseStack>
 80033fa:	4602      	mov	r2, r0
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800340a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800340c:	bf00      	nop
 800340e:	3720      	adds	r7, #32
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800341c:	f000 fd3a 	bl	8003e94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003420:	4b2a      	ldr	r3, [pc, #168]	; (80034cc <prvAddNewTaskToReadyList+0xb8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3301      	adds	r3, #1
 8003426:	4a29      	ldr	r2, [pc, #164]	; (80034cc <prvAddNewTaskToReadyList+0xb8>)
 8003428:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800342a:	4b29      	ldr	r3, [pc, #164]	; (80034d0 <prvAddNewTaskToReadyList+0xbc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003432:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <prvAddNewTaskToReadyList+0xbc>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003438:	4b24      	ldr	r3, [pc, #144]	; (80034cc <prvAddNewTaskToReadyList+0xb8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d110      	bne.n	8003462 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003440:	f000 fabc 	bl	80039bc <prvInitialiseTaskLists>
 8003444:	e00d      	b.n	8003462 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003446:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <prvAddNewTaskToReadyList+0xc0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800344e:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <prvAddNewTaskToReadyList+0xbc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	429a      	cmp	r2, r3
 800345a:	d802      	bhi.n	8003462 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800345c:	4a1c      	ldr	r2, [pc, #112]	; (80034d0 <prvAddNewTaskToReadyList+0xbc>)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003462:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <prvAddNewTaskToReadyList+0xc4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3301      	adds	r3, #1
 8003468:	4a1b      	ldr	r2, [pc, #108]	; (80034d8 <prvAddNewTaskToReadyList+0xc4>)
 800346a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	2201      	movs	r2, #1
 8003472:	409a      	lsls	r2, r3
 8003474:	4b19      	ldr	r3, [pc, #100]	; (80034dc <prvAddNewTaskToReadyList+0xc8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4313      	orrs	r3, r2
 800347a:	4a18      	ldr	r2, [pc, #96]	; (80034dc <prvAddNewTaskToReadyList+0xc8>)
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4a15      	ldr	r2, [pc, #84]	; (80034e0 <prvAddNewTaskToReadyList+0xcc>)
 800348c:	441a      	add	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	4619      	mov	r1, r3
 8003494:	4610      	mov	r0, r2
 8003496:	f7ff fe0d 	bl	80030b4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800349a:	f000 fd2b 	bl	8003ef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <prvAddNewTaskToReadyList+0xc0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00e      	beq.n	80034c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <prvAddNewTaskToReadyList+0xbc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d207      	bcs.n	80034c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <prvAddNewTaskToReadyList+0xd0>)
 80034b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	200001f0 	.word	0x200001f0
 80034d0:	200000f0 	.word	0x200000f0
 80034d4:	200001fc 	.word	0x200001fc
 80034d8:	2000020c 	.word	0x2000020c
 80034dc:	200001f8 	.word	0x200001f8
 80034e0:	200000f4 	.word	0x200000f4
 80034e4:	e000ed04 	.word	0xe000ed04

080034e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d017      	beq.n	800352a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <vTaskDelay+0x60>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <vTaskDelay+0x30>
	__asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	60bb      	str	r3, [r7, #8]
}
 8003514:	bf00      	nop
 8003516:	e7fe      	b.n	8003516 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003518:	f000 f87a 	bl	8003610 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800351c:	2100      	movs	r1, #0
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fb28 	bl	8003b74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003524:	f000 f882 	bl	800362c <xTaskResumeAll>
 8003528:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d107      	bne.n	8003540 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <vTaskDelay+0x64>)
 8003532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003540:	bf00      	nop
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000218 	.word	0x20000218
 800354c:	e000ed04 	.word	0xe000ed04

08003550 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800355a:	2300      	movs	r3, #0
 800355c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800355e:	463a      	mov	r2, r7
 8003560:	1d39      	adds	r1, r7, #4
 8003562:	f107 0308 	add.w	r3, r7, #8
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fff6 	bl	8004558 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800356c:	6839      	ldr	r1, [r7, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	9202      	str	r2, [sp, #8]
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	2300      	movs	r3, #0
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	2300      	movs	r3, #0
 800357c:	460a      	mov	r2, r1
 800357e:	491e      	ldr	r1, [pc, #120]	; (80035f8 <vTaskStartScheduler+0xa8>)
 8003580:	481e      	ldr	r0, [pc, #120]	; (80035fc <vTaskStartScheduler+0xac>)
 8003582:	f7ff fe1e 	bl	80031c2 <xTaskCreateStatic>
 8003586:	4603      	mov	r3, r0
 8003588:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <vTaskStartScheduler+0xb0>)
 800358a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800358c:	4b1c      	ldr	r3, [pc, #112]	; (8003600 <vTaskStartScheduler+0xb0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003594:	2301      	movs	r3, #1
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	e001      	b.n	800359e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d116      	bne.n	80035d2 <vTaskStartScheduler+0x82>
	__asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	613b      	str	r3, [r7, #16]
}
 80035b6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035b8:	4b12      	ldr	r3, [pc, #72]	; (8003604 <vTaskStartScheduler+0xb4>)
 80035ba:	f04f 32ff 	mov.w	r2, #4294967295
 80035be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <vTaskStartScheduler+0xb8>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035c6:	4b11      	ldr	r3, [pc, #68]	; (800360c <vTaskStartScheduler+0xbc>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035cc:	f000 fbc0 	bl	8003d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035d0:	e00e      	b.n	80035f0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d8:	d10a      	bne.n	80035f0 <vTaskStartScheduler+0xa0>
	__asm volatile
 80035da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	60fb      	str	r3, [r7, #12]
}
 80035ec:	bf00      	nop
 80035ee:	e7fe      	b.n	80035ee <vTaskStartScheduler+0x9e>
}
 80035f0:	bf00      	nop
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	08009b4c 	.word	0x08009b4c
 80035fc:	0800398d 	.word	0x0800398d
 8003600:	20000214 	.word	0x20000214
 8003604:	20000210 	.word	0x20000210
 8003608:	200001fc 	.word	0x200001fc
 800360c:	200001f4 	.word	0x200001f4

08003610 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <vTaskSuspendAll+0x18>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3301      	adds	r3, #1
 800361a:	4a03      	ldr	r2, [pc, #12]	; (8003628 <vTaskSuspendAll+0x18>)
 800361c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800361e:	bf00      	nop
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	20000218 	.word	0x20000218

0800362c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800363a:	4b41      	ldr	r3, [pc, #260]	; (8003740 <xTaskResumeAll+0x114>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <xTaskResumeAll+0x2c>
	__asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	603b      	str	r3, [r7, #0]
}
 8003654:	bf00      	nop
 8003656:	e7fe      	b.n	8003656 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003658:	f000 fc1c 	bl	8003e94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800365c:	4b38      	ldr	r3, [pc, #224]	; (8003740 <xTaskResumeAll+0x114>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3b01      	subs	r3, #1
 8003662:	4a37      	ldr	r2, [pc, #220]	; (8003740 <xTaskResumeAll+0x114>)
 8003664:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003666:	4b36      	ldr	r3, [pc, #216]	; (8003740 <xTaskResumeAll+0x114>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d161      	bne.n	8003732 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800366e:	4b35      	ldr	r3, [pc, #212]	; (8003744 <xTaskResumeAll+0x118>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d05d      	beq.n	8003732 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003676:	e02e      	b.n	80036d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003678:	4b33      	ldr	r3, [pc, #204]	; (8003748 <xTaskResumeAll+0x11c>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	3318      	adds	r3, #24
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fd72 	bl	800316e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	3304      	adds	r3, #4
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff fd6d 	bl	800316e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	2201      	movs	r2, #1
 800369a:	409a      	lsls	r2, r3
 800369c:	4b2b      	ldr	r3, [pc, #172]	; (800374c <xTaskResumeAll+0x120>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	4a2a      	ldr	r2, [pc, #168]	; (800374c <xTaskResumeAll+0x120>)
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4a27      	ldr	r2, [pc, #156]	; (8003750 <xTaskResumeAll+0x124>)
 80036b4:	441a      	add	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3304      	adds	r3, #4
 80036ba:	4619      	mov	r1, r3
 80036bc:	4610      	mov	r0, r2
 80036be:	f7ff fcf9 	bl	80030b4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c6:	4b23      	ldr	r3, [pc, #140]	; (8003754 <xTaskResumeAll+0x128>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d302      	bcc.n	80036d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80036d0:	4b21      	ldr	r3, [pc, #132]	; (8003758 <xTaskResumeAll+0x12c>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036d6:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <xTaskResumeAll+0x11c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1cc      	bne.n	8003678 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036e4:	f000 fa08 	bl	8003af8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036e8:	4b1c      	ldr	r3, [pc, #112]	; (800375c <xTaskResumeAll+0x130>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d010      	beq.n	8003716 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036f4:	f000 f836 	bl	8003764 <xTaskIncrementTick>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80036fe:	4b16      	ldr	r3, [pc, #88]	; (8003758 <xTaskResumeAll+0x12c>)
 8003700:	2201      	movs	r2, #1
 8003702:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3b01      	subs	r3, #1
 8003708:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f1      	bne.n	80036f4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <xTaskResumeAll+0x130>)
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003716:	4b10      	ldr	r3, [pc, #64]	; (8003758 <xTaskResumeAll+0x12c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800371e:	2301      	movs	r3, #1
 8003720:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003722:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <xTaskResumeAll+0x134>)
 8003724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003732:	f000 fbdf 	bl	8003ef4 <vPortExitCritical>

	return xAlreadyYielded;
 8003736:	68bb      	ldr	r3, [r7, #8]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	20000218 	.word	0x20000218
 8003744:	200001f0 	.word	0x200001f0
 8003748:	200001b0 	.word	0x200001b0
 800374c:	200001f8 	.word	0x200001f8
 8003750:	200000f4 	.word	0x200000f4
 8003754:	200000f0 	.word	0x200000f0
 8003758:	20000204 	.word	0x20000204
 800375c:	20000200 	.word	0x20000200
 8003760:	e000ed04 	.word	0xe000ed04

08003764 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800376e:	4b4e      	ldr	r3, [pc, #312]	; (80038a8 <xTaskIncrementTick+0x144>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f040 808e 	bne.w	8003894 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003778:	4b4c      	ldr	r3, [pc, #304]	; (80038ac <xTaskIncrementTick+0x148>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3301      	adds	r3, #1
 800377e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003780:	4a4a      	ldr	r2, [pc, #296]	; (80038ac <xTaskIncrementTick+0x148>)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d120      	bne.n	80037ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800378c:	4b48      	ldr	r3, [pc, #288]	; (80038b0 <xTaskIncrementTick+0x14c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <xTaskIncrementTick+0x48>
	__asm volatile
 8003796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379a:	f383 8811 	msr	BASEPRI, r3
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	603b      	str	r3, [r7, #0]
}
 80037a8:	bf00      	nop
 80037aa:	e7fe      	b.n	80037aa <xTaskIncrementTick+0x46>
 80037ac:	4b40      	ldr	r3, [pc, #256]	; (80038b0 <xTaskIncrementTick+0x14c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	4b40      	ldr	r3, [pc, #256]	; (80038b4 <xTaskIncrementTick+0x150>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a3e      	ldr	r2, [pc, #248]	; (80038b0 <xTaskIncrementTick+0x14c>)
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	4a3e      	ldr	r2, [pc, #248]	; (80038b4 <xTaskIncrementTick+0x150>)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4b3d      	ldr	r3, [pc, #244]	; (80038b8 <xTaskIncrementTick+0x154>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3301      	adds	r3, #1
 80037c6:	4a3c      	ldr	r2, [pc, #240]	; (80038b8 <xTaskIncrementTick+0x154>)
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	f000 f995 	bl	8003af8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037ce:	4b3b      	ldr	r3, [pc, #236]	; (80038bc <xTaskIncrementTick+0x158>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d348      	bcc.n	800386a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037d8:	4b35      	ldr	r3, [pc, #212]	; (80038b0 <xTaskIncrementTick+0x14c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d104      	bne.n	80037ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037e2:	4b36      	ldr	r3, [pc, #216]	; (80038bc <xTaskIncrementTick+0x158>)
 80037e4:	f04f 32ff 	mov.w	r2, #4294967295
 80037e8:	601a      	str	r2, [r3, #0]
					break;
 80037ea:	e03e      	b.n	800386a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037ec:	4b30      	ldr	r3, [pc, #192]	; (80038b0 <xTaskIncrementTick+0x14c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	429a      	cmp	r2, r3
 8003802:	d203      	bcs.n	800380c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003804:	4a2d      	ldr	r2, [pc, #180]	; (80038bc <xTaskIncrementTick+0x158>)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800380a:	e02e      	b.n	800386a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	3304      	adds	r3, #4
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fcac 	bl	800316e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	2b00      	cmp	r3, #0
 800381c:	d004      	beq.n	8003828 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	3318      	adds	r3, #24
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fca3 	bl	800316e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	2201      	movs	r2, #1
 800382e:	409a      	lsls	r2, r3
 8003830:	4b23      	ldr	r3, [pc, #140]	; (80038c0 <xTaskIncrementTick+0x15c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4313      	orrs	r3, r2
 8003836:	4a22      	ldr	r2, [pc, #136]	; (80038c0 <xTaskIncrementTick+0x15c>)
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4a1f      	ldr	r2, [pc, #124]	; (80038c4 <xTaskIncrementTick+0x160>)
 8003848:	441a      	add	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	3304      	adds	r3, #4
 800384e:	4619      	mov	r1, r3
 8003850:	4610      	mov	r0, r2
 8003852:	f7ff fc2f 	bl	80030b4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385a:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <xTaskIncrementTick+0x164>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	429a      	cmp	r2, r3
 8003862:	d3b9      	bcc.n	80037d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003864:	2301      	movs	r3, #1
 8003866:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003868:	e7b6      	b.n	80037d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800386a:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <xTaskIncrementTick+0x164>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003870:	4914      	ldr	r1, [pc, #80]	; (80038c4 <xTaskIncrementTick+0x160>)
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d901      	bls.n	8003886 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003882:	2301      	movs	r3, #1
 8003884:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <xTaskIncrementTick+0x168>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d007      	beq.n	800389e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800388e:	2301      	movs	r3, #1
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	e004      	b.n	800389e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003894:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <xTaskIncrementTick+0x16c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	4a0d      	ldr	r2, [pc, #52]	; (80038d0 <xTaskIncrementTick+0x16c>)
 800389c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800389e:	697b      	ldr	r3, [r7, #20]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20000218 	.word	0x20000218
 80038ac:	200001f4 	.word	0x200001f4
 80038b0:	200001a8 	.word	0x200001a8
 80038b4:	200001ac 	.word	0x200001ac
 80038b8:	20000208 	.word	0x20000208
 80038bc:	20000210 	.word	0x20000210
 80038c0:	200001f8 	.word	0x200001f8
 80038c4:	200000f4 	.word	0x200000f4
 80038c8:	200000f0 	.word	0x200000f0
 80038cc:	20000204 	.word	0x20000204
 80038d0:	20000200 	.word	0x20000200

080038d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038da:	4b27      	ldr	r3, [pc, #156]	; (8003978 <vTaskSwitchContext+0xa4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038e2:	4b26      	ldr	r3, [pc, #152]	; (800397c <vTaskSwitchContext+0xa8>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038e8:	e03f      	b.n	800396a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <vTaskSwitchContext+0xa8>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038f0:	4b23      	ldr	r3, [pc, #140]	; (8003980 <vTaskSwitchContext+0xac>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	fab3 f383 	clz	r3, r3
 80038fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80038fe:	7afb      	ldrb	r3, [r7, #11]
 8003900:	f1c3 031f 	rsb	r3, r3, #31
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	491f      	ldr	r1, [pc, #124]	; (8003984 <vTaskSwitchContext+0xb0>)
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <vTaskSwitchContext+0x5c>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	607b      	str	r3, [r7, #4]
}
 800392c:	bf00      	nop
 800392e:	e7fe      	b.n	800392e <vTaskSwitchContext+0x5a>
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4a12      	ldr	r2, [pc, #72]	; (8003984 <vTaskSwitchContext+0xb0>)
 800393c:	4413      	add	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	3308      	adds	r3, #8
 8003952:	429a      	cmp	r2, r3
 8003954:	d104      	bne.n	8003960 <vTaskSwitchContext+0x8c>
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	605a      	str	r2, [r3, #4]
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	4a08      	ldr	r2, [pc, #32]	; (8003988 <vTaskSwitchContext+0xb4>)
 8003968:	6013      	str	r3, [r2, #0]
}
 800396a:	bf00      	nop
 800396c:	371c      	adds	r7, #28
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000218 	.word	0x20000218
 800397c:	20000204 	.word	0x20000204
 8003980:	200001f8 	.word	0x200001f8
 8003984:	200000f4 	.word	0x200000f4
 8003988:	200000f0 	.word	0x200000f0

0800398c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003994:	f000 f852 	bl	8003a3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003998:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <prvIdleTask+0x28>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d9f9      	bls.n	8003994 <prvIdleTask+0x8>
			{
				taskYIELD();
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <prvIdleTask+0x2c>)
 80039a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80039b0:	e7f0      	b.n	8003994 <prvIdleTask+0x8>
 80039b2:	bf00      	nop
 80039b4:	200000f4 	.word	0x200000f4
 80039b8:	e000ed04 	.word	0xe000ed04

080039bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	e00c      	b.n	80039e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4a12      	ldr	r2, [pc, #72]	; (8003a1c <prvInitialiseTaskLists+0x60>)
 80039d4:	4413      	add	r3, r2
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fb3f 	bl	800305a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3301      	adds	r3, #1
 80039e0:	607b      	str	r3, [r7, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b06      	cmp	r3, #6
 80039e6:	d9ef      	bls.n	80039c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80039e8:	480d      	ldr	r0, [pc, #52]	; (8003a20 <prvInitialiseTaskLists+0x64>)
 80039ea:	f7ff fb36 	bl	800305a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039ee:	480d      	ldr	r0, [pc, #52]	; (8003a24 <prvInitialiseTaskLists+0x68>)
 80039f0:	f7ff fb33 	bl	800305a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039f4:	480c      	ldr	r0, [pc, #48]	; (8003a28 <prvInitialiseTaskLists+0x6c>)
 80039f6:	f7ff fb30 	bl	800305a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039fa:	480c      	ldr	r0, [pc, #48]	; (8003a2c <prvInitialiseTaskLists+0x70>)
 80039fc:	f7ff fb2d 	bl	800305a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a00:	480b      	ldr	r0, [pc, #44]	; (8003a30 <prvInitialiseTaskLists+0x74>)
 8003a02:	f7ff fb2a 	bl	800305a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a06:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <prvInitialiseTaskLists+0x78>)
 8003a08:	4a05      	ldr	r2, [pc, #20]	; (8003a20 <prvInitialiseTaskLists+0x64>)
 8003a0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <prvInitialiseTaskLists+0x7c>)
 8003a0e:	4a05      	ldr	r2, [pc, #20]	; (8003a24 <prvInitialiseTaskLists+0x68>)
 8003a10:	601a      	str	r2, [r3, #0]
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	200000f4 	.word	0x200000f4
 8003a20:	20000180 	.word	0x20000180
 8003a24:	20000194 	.word	0x20000194
 8003a28:	200001b0 	.word	0x200001b0
 8003a2c:	200001c4 	.word	0x200001c4
 8003a30:	200001dc 	.word	0x200001dc
 8003a34:	200001a8 	.word	0x200001a8
 8003a38:	200001ac 	.word	0x200001ac

08003a3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a42:	e019      	b.n	8003a78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a44:	f000 fa26 	bl	8003e94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a48:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <prvCheckTasksWaitingTermination+0x50>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3304      	adds	r3, #4
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fb8a 	bl	800316e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a5a:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <prvCheckTasksWaitingTermination+0x54>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <prvCheckTasksWaitingTermination+0x54>)
 8003a62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <prvCheckTasksWaitingTermination+0x58>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <prvCheckTasksWaitingTermination+0x58>)
 8003a6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a6e:	f000 fa41 	bl	8003ef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f810 	bl	8003a98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <prvCheckTasksWaitingTermination+0x58>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1e1      	bne.n	8003a44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200001c4 	.word	0x200001c4
 8003a90:	200001f0 	.word	0x200001f0
 8003a94:	200001d8 	.word	0x200001d8

08003a98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d108      	bne.n	8003abc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fb9e 	bl	80041f0 <vPortFree>
				vPortFree( pxTCB );
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fb9b 	bl	80041f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003aba:	e018      	b.n	8003aee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d103      	bne.n	8003ace <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fb92 	bl	80041f0 <vPortFree>
	}
 8003acc:	e00f      	b.n	8003aee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d00a      	beq.n	8003aee <prvDeleteTCB+0x56>
	__asm volatile
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	60fb      	str	r3, [r7, #12]
}
 8003aea:	bf00      	nop
 8003aec:	e7fe      	b.n	8003aec <prvDeleteTCB+0x54>
	}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003afe:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <prvResetNextTaskUnblockTime+0x38>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <prvResetNextTaskUnblockTime+0x3c>)
 8003b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b10:	e008      	b.n	8003b24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <prvResetNextTaskUnblockTime+0x38>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <prvResetNextTaskUnblockTime+0x3c>)
 8003b22:	6013      	str	r3, [r2, #0]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	200001a8 	.word	0x200001a8
 8003b34:	20000210 	.word	0x20000210

08003b38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <xTaskGetSchedulerState+0x34>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d102      	bne.n	8003b4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b46:	2301      	movs	r3, #1
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	e008      	b.n	8003b5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <xTaskGetSchedulerState+0x38>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b54:	2302      	movs	r3, #2
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	e001      	b.n	8003b5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b5e:	687b      	ldr	r3, [r7, #4]
	}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	200001fc 	.word	0x200001fc
 8003b70:	20000218 	.word	0x20000218

08003b74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b7e:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b84:	4b28      	ldr	r3, [pc, #160]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff faef 	bl	800316e <uxListRemove>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10b      	bne.n	8003bae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b96:	4b24      	ldr	r3, [pc, #144]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43da      	mvns	r2, r3
 8003ba4:	4b21      	ldr	r3, [pc, #132]	; (8003c2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	4a20      	ldr	r2, [pc, #128]	; (8003c2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003bac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d10a      	bne.n	8003bcc <prvAddCurrentTaskToDelayedList+0x58>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	481a      	ldr	r0, [pc, #104]	; (8003c30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003bc6:	f7ff fa75 	bl	80030b4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003bca:	e026      	b.n	8003c1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bd4:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d209      	bcs.n	8003bf8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003be4:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3304      	adds	r3, #4
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	f7ff fa83 	bl	80030fc <vListInsert>
}
 8003bf6:	e010      	b.n	8003c1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3304      	adds	r3, #4
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f7ff fa79 	bl	80030fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c0a:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d202      	bcs.n	8003c1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003c14:	4a09      	ldr	r2, [pc, #36]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	6013      	str	r3, [r2, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	200001f4 	.word	0x200001f4
 8003c28:	200000f0 	.word	0x200000f0
 8003c2c:	200001f8 	.word	0x200001f8
 8003c30:	200001dc 	.word	0x200001dc
 8003c34:	200001ac 	.word	0x200001ac
 8003c38:	200001a8 	.word	0x200001a8
 8003c3c:	20000210 	.word	0x20000210

08003c40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3b04      	subs	r3, #4
 8003c50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3b04      	subs	r3, #4
 8003c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f023 0201 	bic.w	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3b04      	subs	r3, #4
 8003c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c70:	4a0c      	ldr	r2, [pc, #48]	; (8003ca4 <pxPortInitialiseStack+0x64>)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	3b14      	subs	r3, #20
 8003c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3b04      	subs	r3, #4
 8003c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f06f 0202 	mvn.w	r2, #2
 8003c8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3b20      	subs	r3, #32
 8003c94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c96:	68fb      	ldr	r3, [r7, #12]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	08003ca9 	.word	0x08003ca9

08003ca8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003cb2:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <prvTaskExitError+0x54>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cba:	d00a      	beq.n	8003cd2 <prvTaskExitError+0x2a>
	__asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	60fb      	str	r3, [r7, #12]
}
 8003cce:	bf00      	nop
 8003cd0:	e7fe      	b.n	8003cd0 <prvTaskExitError+0x28>
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	60bb      	str	r3, [r7, #8]
}
 8003ce4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003ce6:	bf00      	nop
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0fc      	beq.n	8003ce8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003cee:	bf00      	nop
 8003cf0:	bf00      	nop
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	20000008 	.word	0x20000008

08003d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d00:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <pxCurrentTCBConst2>)
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	6808      	ldr	r0, [r1, #0]
 8003d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d0a:	f380 8809 	msr	PSP, r0
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f04f 0000 	mov.w	r0, #0
 8003d16:	f380 8811 	msr	BASEPRI, r0
 8003d1a:	4770      	bx	lr
 8003d1c:	f3af 8000 	nop.w

08003d20 <pxCurrentTCBConst2>:
 8003d20:	200000f0 	.word	0x200000f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop

08003d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003d28:	4808      	ldr	r0, [pc, #32]	; (8003d4c <prvPortStartFirstTask+0x24>)
 8003d2a:	6800      	ldr	r0, [r0, #0]
 8003d2c:	6800      	ldr	r0, [r0, #0]
 8003d2e:	f380 8808 	msr	MSP, r0
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f380 8814 	msr	CONTROL, r0
 8003d3a:	b662      	cpsie	i
 8003d3c:	b661      	cpsie	f
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	df00      	svc	0
 8003d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d4a:	bf00      	nop
 8003d4c:	e000ed08 	.word	0xe000ed08

08003d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d56:	4b46      	ldr	r3, [pc, #280]	; (8003e70 <xPortStartScheduler+0x120>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a46      	ldr	r2, [pc, #280]	; (8003e74 <xPortStartScheduler+0x124>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d10a      	bne.n	8003d76 <xPortStartScheduler+0x26>
	__asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	613b      	str	r3, [r7, #16]
}
 8003d72:	bf00      	nop
 8003d74:	e7fe      	b.n	8003d74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d76:	4b3e      	ldr	r3, [pc, #248]	; (8003e70 <xPortStartScheduler+0x120>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a3f      	ldr	r2, [pc, #252]	; (8003e78 <xPortStartScheduler+0x128>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d10a      	bne.n	8003d96 <xPortStartScheduler+0x46>
	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	60fb      	str	r3, [r7, #12]
}
 8003d92:	bf00      	nop
 8003d94:	e7fe      	b.n	8003d94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d96:	4b39      	ldr	r3, [pc, #228]	; (8003e7c <xPortStartScheduler+0x12c>)
 8003d98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	22ff      	movs	r2, #255	; 0xff
 8003da6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	4b31      	ldr	r3, [pc, #196]	; (8003e80 <xPortStartScheduler+0x130>)
 8003dbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003dbe:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <xPortStartScheduler+0x134>)
 8003dc0:	2207      	movs	r2, #7
 8003dc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dc4:	e009      	b.n	8003dda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003dc6:	4b2f      	ldr	r3, [pc, #188]	; (8003e84 <xPortStartScheduler+0x134>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	4a2d      	ldr	r2, [pc, #180]	; (8003e84 <xPortStartScheduler+0x134>)
 8003dce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dda:	78fb      	ldrb	r3, [r7, #3]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de2:	2b80      	cmp	r3, #128	; 0x80
 8003de4:	d0ef      	beq.n	8003dc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003de6:	4b27      	ldr	r3, [pc, #156]	; (8003e84 <xPortStartScheduler+0x134>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f1c3 0307 	rsb	r3, r3, #7
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d00a      	beq.n	8003e08 <xPortStartScheduler+0xb8>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	60bb      	str	r3, [r7, #8]
}
 8003e04:	bf00      	nop
 8003e06:	e7fe      	b.n	8003e06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e08:	4b1e      	ldr	r3, [pc, #120]	; (8003e84 <xPortStartScheduler+0x134>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	021b      	lsls	r3, r3, #8
 8003e0e:	4a1d      	ldr	r2, [pc, #116]	; (8003e84 <xPortStartScheduler+0x134>)
 8003e10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e12:	4b1c      	ldr	r3, [pc, #112]	; (8003e84 <xPortStartScheduler+0x134>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e1a:	4a1a      	ldr	r2, [pc, #104]	; (8003e84 <xPortStartScheduler+0x134>)
 8003e1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e26:	4b18      	ldr	r3, [pc, #96]	; (8003e88 <xPortStartScheduler+0x138>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a17      	ldr	r2, [pc, #92]	; (8003e88 <xPortStartScheduler+0x138>)
 8003e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e32:	4b15      	ldr	r3, [pc, #84]	; (8003e88 <xPortStartScheduler+0x138>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a14      	ldr	r2, [pc, #80]	; (8003e88 <xPortStartScheduler+0x138>)
 8003e38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e3e:	f000 f8dd 	bl	8003ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <xPortStartScheduler+0x13c>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003e48:	f000 f8fc 	bl	8004044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e4c:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <xPortStartScheduler+0x140>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a0f      	ldr	r2, [pc, #60]	; (8003e90 <xPortStartScheduler+0x140>)
 8003e52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e58:	f7ff ff66 	bl	8003d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e5c:	f7ff fd3a 	bl	80038d4 <vTaskSwitchContext>
	prvTaskExitError();
 8003e60:	f7ff ff22 	bl	8003ca8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	e000ed00 	.word	0xe000ed00
 8003e74:	410fc271 	.word	0x410fc271
 8003e78:	410fc270 	.word	0x410fc270
 8003e7c:	e000e400 	.word	0xe000e400
 8003e80:	2000021c 	.word	0x2000021c
 8003e84:	20000220 	.word	0x20000220
 8003e88:	e000ed20 	.word	0xe000ed20
 8003e8c:	20000008 	.word	0x20000008
 8003e90:	e000ef34 	.word	0xe000ef34

08003e94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
	__asm volatile
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	607b      	str	r3, [r7, #4]
}
 8003eac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003eae:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <vPortEnterCritical+0x58>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	4a0d      	ldr	r2, [pc, #52]	; (8003eec <vPortEnterCritical+0x58>)
 8003eb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <vPortEnterCritical+0x58>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d10f      	bne.n	8003ee0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <vPortEnterCritical+0x5c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	603b      	str	r3, [r7, #0]
}
 8003edc:	bf00      	nop
 8003ede:	e7fe      	b.n	8003ede <vPortEnterCritical+0x4a>
	}
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	20000008 	.word	0x20000008
 8003ef0:	e000ed04 	.word	0xe000ed04

08003ef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003efa:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <vPortExitCritical+0x50>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <vPortExitCritical+0x24>
	__asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	607b      	str	r3, [r7, #4]
}
 8003f14:	bf00      	nop
 8003f16:	e7fe      	b.n	8003f16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003f18:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <vPortExitCritical+0x50>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	4a09      	ldr	r2, [pc, #36]	; (8003f44 <vPortExitCritical+0x50>)
 8003f20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f22:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <vPortExitCritical+0x50>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d105      	bne.n	8003f36 <vPortExitCritical+0x42>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000008 	.word	0x20000008
	...

08003f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f50:	f3ef 8009 	mrs	r0, PSP
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <pxCurrentTCBConst>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	f01e 0f10 	tst.w	lr, #16
 8003f60:	bf08      	it	eq
 8003f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6a:	6010      	str	r0, [r2, #0]
 8003f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f74:	f380 8811 	msr	BASEPRI, r0
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f7ff fca8 	bl	80038d4 <vTaskSwitchContext>
 8003f84:	f04f 0000 	mov.w	r0, #0
 8003f88:	f380 8811 	msr	BASEPRI, r0
 8003f8c:	bc09      	pop	{r0, r3}
 8003f8e:	6819      	ldr	r1, [r3, #0]
 8003f90:	6808      	ldr	r0, [r1, #0]
 8003f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f96:	f01e 0f10 	tst.w	lr, #16
 8003f9a:	bf08      	it	eq
 8003f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003fa0:	f380 8809 	msr	PSP, r0
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	f3af 8000 	nop.w

08003fb0 <pxCurrentTCBConst>:
 8003fb0:	200000f0 	.word	0x200000f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop

08003fb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8003fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	607b      	str	r3, [r7, #4]
}
 8003fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003fd2:	f7ff fbc7 	bl	8003764 <xTaskIncrementTick>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <xPortSysTickHandler+0x40>)
 8003fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f383 8811 	msr	BASEPRI, r3
}
 8003fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	e000ed04 	.word	0xe000ed04

08003ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004000:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <vPortSetupTimerInterrupt+0x34>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004006:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <vPortSetupTimerInterrupt+0x38>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <vPortSetupTimerInterrupt+0x3c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0a      	ldr	r2, [pc, #40]	; (800403c <vPortSetupTimerInterrupt+0x40>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	099b      	lsrs	r3, r3, #6
 8004018:	4a09      	ldr	r2, [pc, #36]	; (8004040 <vPortSetupTimerInterrupt+0x44>)
 800401a:	3b01      	subs	r3, #1
 800401c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800401e:	4b04      	ldr	r3, [pc, #16]	; (8004030 <vPortSetupTimerInterrupt+0x34>)
 8004020:	2207      	movs	r2, #7
 8004022:	601a      	str	r2, [r3, #0]
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	e000e010 	.word	0xe000e010
 8004034:	e000e018 	.word	0xe000e018
 8004038:	20000024 	.word	0x20000024
 800403c:	10624dd3 	.word	0x10624dd3
 8004040:	e000e014 	.word	0xe000e014

08004044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004044:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004054 <vPortEnableVFP+0x10>
 8004048:	6801      	ldr	r1, [r0, #0]
 800404a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800404e:	6001      	str	r1, [r0, #0]
 8004050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004052:	bf00      	nop
 8004054:	e000ed88 	.word	0xe000ed88

08004058 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08a      	sub	sp, #40	; 0x28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004060:	2300      	movs	r3, #0
 8004062:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004064:	f7ff fad4 	bl	8003610 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004068:	4b5b      	ldr	r3, [pc, #364]	; (80041d8 <pvPortMalloc+0x180>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004070:	f000 f920 	bl	80042b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004074:	4b59      	ldr	r3, [pc, #356]	; (80041dc <pvPortMalloc+0x184>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	f040 8093 	bne.w	80041a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01d      	beq.n	80040c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004088:	2208      	movs	r2, #8
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4413      	add	r3, r2
 800408e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	2b00      	cmp	r3, #0
 8004098:	d014      	beq.n	80040c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f023 0307 	bic.w	r3, r3, #7
 80040a0:	3308      	adds	r3, #8
 80040a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <pvPortMalloc+0x6c>
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	617b      	str	r3, [r7, #20]
}
 80040c0:	bf00      	nop
 80040c2:	e7fe      	b.n	80040c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d06e      	beq.n	80041a8 <pvPortMalloc+0x150>
 80040ca:	4b45      	ldr	r3, [pc, #276]	; (80041e0 <pvPortMalloc+0x188>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d869      	bhi.n	80041a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80040d4:	4b43      	ldr	r3, [pc, #268]	; (80041e4 <pvPortMalloc+0x18c>)
 80040d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80040d8:	4b42      	ldr	r3, [pc, #264]	; (80041e4 <pvPortMalloc+0x18c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040de:	e004      	b.n	80040ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d903      	bls.n	80040fc <pvPortMalloc+0xa4>
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f1      	bne.n	80040e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040fc:	4b36      	ldr	r3, [pc, #216]	; (80041d8 <pvPortMalloc+0x180>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004102:	429a      	cmp	r2, r3
 8004104:	d050      	beq.n	80041a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2208      	movs	r2, #8
 800410c:	4413      	add	r3, r2
 800410e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	1ad2      	subs	r2, r2, r3
 8004120:	2308      	movs	r3, #8
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	429a      	cmp	r2, r3
 8004126:	d91f      	bls.n	8004168 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <pvPortMalloc+0xf8>
	__asm volatile
 800413a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	613b      	str	r3, [r7, #16]
}
 800414c:	bf00      	nop
 800414e:	e7fe      	b.n	800414e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	1ad2      	subs	r2, r2, r3
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004162:	69b8      	ldr	r0, [r7, #24]
 8004164:	f000 f908 	bl	8004378 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004168:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <pvPortMalloc+0x188>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	4a1b      	ldr	r2, [pc, #108]	; (80041e0 <pvPortMalloc+0x188>)
 8004174:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004176:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <pvPortMalloc+0x188>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4b1b      	ldr	r3, [pc, #108]	; (80041e8 <pvPortMalloc+0x190>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d203      	bcs.n	800418a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004182:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <pvPortMalloc+0x188>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a18      	ldr	r2, [pc, #96]	; (80041e8 <pvPortMalloc+0x190>)
 8004188:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	4b13      	ldr	r3, [pc, #76]	; (80041dc <pvPortMalloc+0x184>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	431a      	orrs	r2, r3
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800419e:	4b13      	ldr	r3, [pc, #76]	; (80041ec <pvPortMalloc+0x194>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3301      	adds	r3, #1
 80041a4:	4a11      	ldr	r2, [pc, #68]	; (80041ec <pvPortMalloc+0x194>)
 80041a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80041a8:	f7ff fa40 	bl	800362c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <pvPortMalloc+0x174>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	60fb      	str	r3, [r7, #12]
}
 80041c8:	bf00      	nop
 80041ca:	e7fe      	b.n	80041ca <pvPortMalloc+0x172>
	return pvReturn;
 80041cc:	69fb      	ldr	r3, [r7, #28]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3728      	adds	r7, #40	; 0x28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20003e2c 	.word	0x20003e2c
 80041dc:	20003e40 	.word	0x20003e40
 80041e0:	20003e30 	.word	0x20003e30
 80041e4:	20003e24 	.word	0x20003e24
 80041e8:	20003e34 	.word	0x20003e34
 80041ec:	20003e38 	.word	0x20003e38

080041f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d04d      	beq.n	800429e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004202:	2308      	movs	r3, #8
 8004204:	425b      	negs	r3, r3
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4413      	add	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <vPortFree+0xb8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <vPortFree+0x44>
	__asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	60fb      	str	r3, [r7, #12]
}
 8004230:	bf00      	nop
 8004232:	e7fe      	b.n	8004232 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <vPortFree+0x62>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	60bb      	str	r3, [r7, #8]
}
 800424e:	bf00      	nop
 8004250:	e7fe      	b.n	8004250 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	4b14      	ldr	r3, [pc, #80]	; (80042a8 <vPortFree+0xb8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4013      	ands	r3, r2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d01e      	beq.n	800429e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d11a      	bne.n	800429e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	4b0e      	ldr	r3, [pc, #56]	; (80042a8 <vPortFree+0xb8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	43db      	mvns	r3, r3
 8004272:	401a      	ands	r2, r3
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004278:	f7ff f9ca 	bl	8003610 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <vPortFree+0xbc>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4413      	add	r3, r2
 8004286:	4a09      	ldr	r2, [pc, #36]	; (80042ac <vPortFree+0xbc>)
 8004288:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800428a:	6938      	ldr	r0, [r7, #16]
 800428c:	f000 f874 	bl	8004378 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004290:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <vPortFree+0xc0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3301      	adds	r3, #1
 8004296:	4a06      	ldr	r2, [pc, #24]	; (80042b0 <vPortFree+0xc0>)
 8004298:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800429a:	f7ff f9c7 	bl	800362c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800429e:	bf00      	nop
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20003e40 	.word	0x20003e40
 80042ac:	20003e30 	.word	0x20003e30
 80042b0:	20003e3c 	.word	0x20003e3c

080042b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80042be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80042c0:	4b27      	ldr	r3, [pc, #156]	; (8004360 <prvHeapInit+0xac>)
 80042c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00c      	beq.n	80042e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3307      	adds	r3, #7
 80042d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0307 	bic.w	r3, r3, #7
 80042da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	4a1f      	ldr	r2, [pc, #124]	; (8004360 <prvHeapInit+0xac>)
 80042e4:	4413      	add	r3, r2
 80042e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042ec:	4a1d      	ldr	r2, [pc, #116]	; (8004364 <prvHeapInit+0xb0>)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042f2:	4b1c      	ldr	r3, [pc, #112]	; (8004364 <prvHeapInit+0xb0>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	4413      	add	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004300:	2208      	movs	r2, #8
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0307 	bic.w	r3, r3, #7
 800430e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4a15      	ldr	r2, [pc, #84]	; (8004368 <prvHeapInit+0xb4>)
 8004314:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004316:	4b14      	ldr	r3, [pc, #80]	; (8004368 <prvHeapInit+0xb4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2200      	movs	r2, #0
 800431c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800431e:	4b12      	ldr	r3, [pc, #72]	; (8004368 <prvHeapInit+0xb4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	1ad2      	subs	r2, r2, r3
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <prvHeapInit+0xb4>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	4a0a      	ldr	r2, [pc, #40]	; (800436c <prvHeapInit+0xb8>)
 8004342:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	4a09      	ldr	r2, [pc, #36]	; (8004370 <prvHeapInit+0xbc>)
 800434a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800434c:	4b09      	ldr	r3, [pc, #36]	; (8004374 <prvHeapInit+0xc0>)
 800434e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004352:	601a      	str	r2, [r3, #0]
}
 8004354:	bf00      	nop
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	20000224 	.word	0x20000224
 8004364:	20003e24 	.word	0x20003e24
 8004368:	20003e2c 	.word	0x20003e2c
 800436c:	20003e34 	.word	0x20003e34
 8004370:	20003e30 	.word	0x20003e30
 8004374:	20003e40 	.word	0x20003e40

08004378 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004380:	4b28      	ldr	r3, [pc, #160]	; (8004424 <prvInsertBlockIntoFreeList+0xac>)
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	e002      	b.n	800438c <prvInsertBlockIntoFreeList+0x14>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	d8f7      	bhi.n	8004386 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	4413      	add	r3, r2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d108      	bne.n	80043ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	441a      	add	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	441a      	add	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d118      	bne.n	8004400 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	4b15      	ldr	r3, [pc, #84]	; (8004428 <prvInsertBlockIntoFreeList+0xb0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d00d      	beq.n	80043f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	441a      	add	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	e008      	b.n	8004408 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043f6:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <prvInsertBlockIntoFreeList+0xb0>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	e003      	b.n	8004408 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	429a      	cmp	r2, r3
 800440e:	d002      	beq.n	8004416 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20003e24 	.word	0x20003e24
 8004428:	20003e2c 	.word	0x20003e2c

0800442c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004432:	463b      	mov	r3, r7
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800443e:	4b21      	ldr	r3, [pc, #132]	; (80044c4 <MX_ADC1_Init+0x98>)
 8004440:	4a21      	ldr	r2, [pc, #132]	; (80044c8 <MX_ADC1_Init+0x9c>)
 8004442:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004444:	4b1f      	ldr	r3, [pc, #124]	; (80044c4 <MX_ADC1_Init+0x98>)
 8004446:	2200      	movs	r2, #0
 8004448:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800444a:	4b1e      	ldr	r3, [pc, #120]	; (80044c4 <MX_ADC1_Init+0x98>)
 800444c:	2200      	movs	r2, #0
 800444e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004450:	4b1c      	ldr	r3, [pc, #112]	; (80044c4 <MX_ADC1_Init+0x98>)
 8004452:	2200      	movs	r2, #0
 8004454:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004456:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <MX_ADC1_Init+0x98>)
 8004458:	2200      	movs	r2, #0
 800445a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800445c:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <MX_ADC1_Init+0x98>)
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004464:	4b17      	ldr	r3, [pc, #92]	; (80044c4 <MX_ADC1_Init+0x98>)
 8004466:	2200      	movs	r2, #0
 8004468:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800446a:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <MX_ADC1_Init+0x98>)
 800446c:	4a17      	ldr	r2, [pc, #92]	; (80044cc <MX_ADC1_Init+0xa0>)
 800446e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004470:	4b14      	ldr	r3, [pc, #80]	; (80044c4 <MX_ADC1_Init+0x98>)
 8004472:	2200      	movs	r2, #0
 8004474:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004476:	4b13      	ldr	r3, [pc, #76]	; (80044c4 <MX_ADC1_Init+0x98>)
 8004478:	2201      	movs	r2, #1
 800447a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800447c:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <MX_ADC1_Init+0x98>)
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004484:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <MX_ADC1_Init+0x98>)
 8004486:	2201      	movs	r2, #1
 8004488:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800448a:	480e      	ldr	r0, [pc, #56]	; (80044c4 <MX_ADC1_Init+0x98>)
 800448c:	f7fc f90c 	bl	80006a8 <HAL_ADC_Init>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8004496:	f000 f9cb 	bl	8004830 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800449a:	2300      	movs	r3, #0
 800449c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800449e:	2301      	movs	r3, #1
 80044a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044a6:	463b      	mov	r3, r7
 80044a8:	4619      	mov	r1, r3
 80044aa:	4806      	ldr	r0, [pc, #24]	; (80044c4 <MX_ADC1_Init+0x98>)
 80044ac:	f7fc fade 	bl	8000a6c <HAL_ADC_ConfigChannel>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80044b6:	f000 f9bb 	bl	8004830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20003e44 	.word	0x20003e44
 80044c8:	40012000 	.word	0x40012000
 80044cc:	0f000001 	.word	0x0f000001

080044d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08a      	sub	sp, #40	; 0x28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044d8:	f107 0314 	add.w	r3, r7, #20
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	609a      	str	r2, [r3, #8]
 80044e4:	60da      	str	r2, [r3, #12]
 80044e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a17      	ldr	r2, [pc, #92]	; (800454c <HAL_ADC_MspInit+0x7c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d127      	bne.n	8004542 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	4b16      	ldr	r3, [pc, #88]	; (8004550 <HAL_ADC_MspInit+0x80>)
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	4a15      	ldr	r2, [pc, #84]	; (8004550 <HAL_ADC_MspInit+0x80>)
 80044fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004500:	6453      	str	r3, [r2, #68]	; 0x44
 8004502:	4b13      	ldr	r3, [pc, #76]	; (8004550 <HAL_ADC_MspInit+0x80>)
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	4b0f      	ldr	r3, [pc, #60]	; (8004550 <HAL_ADC_MspInit+0x80>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	4a0e      	ldr	r2, [pc, #56]	; (8004550 <HAL_ADC_MspInit+0x80>)
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	6313      	str	r3, [r2, #48]	; 0x30
 800451e:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <HAL_ADC_MspInit+0x80>)
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800452a:	2301      	movs	r3, #1
 800452c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800452e:	2303      	movs	r3, #3
 8004530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004536:	f107 0314 	add.w	r3, r7, #20
 800453a:	4619      	mov	r1, r3
 800453c:	4805      	ldr	r0, [pc, #20]	; (8004554 <HAL_ADC_MspInit+0x84>)
 800453e:	f7fc fd99 	bl	8001074 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004542:	bf00      	nop
 8004544:	3728      	adds	r7, #40	; 0x28
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40012000 	.word	0x40012000
 8004550:	40023800 	.word	0x40023800
 8004554:	40020000 	.word	0x40020000

08004558 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4a07      	ldr	r2, [pc, #28]	; (8004584 <vApplicationGetIdleTaskMemory+0x2c>)
 8004568:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	4a06      	ldr	r2, [pc, #24]	; (8004588 <vApplicationGetIdleTaskMemory+0x30>)
 800456e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2280      	movs	r2, #128	; 0x80
 8004574:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004576:	bf00      	nop
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	20003e9c 	.word	0x20003e9c
 8004588:	20003ef0 	.word	0x20003ef0

0800458c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800458c:	b5b0      	push	{r4, r5, r7, lr}
 800458e:	b09c      	sub	sp, #112	; 0x70
 8004590:	af00      	add	r7, sp, #0
  // defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(pwmTask, StartPwmTask, osPriorityNormal, 0, 128);
 8004592:	4b27      	ldr	r3, [pc, #156]	; (8004630 <MX_FREERTOS_Init+0xa4>)
 8004594:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8004598:	461d      	mov	r5, r3
 800459a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800459c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800459e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80045a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pwmTaskHandle = osThreadCreate(osThread(pwmTask), NULL);
 80045a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80045aa:	2100      	movs	r1, #0
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe fcf4 	bl	8002f9a <osThreadCreate>
 80045b2:	4603      	mov	r3, r0
 80045b4:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <MX_FREERTOS_Init+0xa8>)
 80045b6:	6013      	str	r3, [r2, #0]

  osThreadDef(adcTask, StartAdcTask, osPriorityNormal, 0, 128);
 80045b8:	4b1f      	ldr	r3, [pc, #124]	; (8004638 <MX_FREERTOS_Init+0xac>)
 80045ba:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80045be:	461d      	mov	r5, r3
 80045c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80045c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcTaskHandle = osThreadCreate(osThread(adcTask), NULL);
 80045cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fe fce1 	bl	8002f9a <osThreadCreate>
 80045d8:	4603      	mov	r3, r0
 80045da:	4a18      	ldr	r2, [pc, #96]	; (800463c <MX_FREERTOS_Init+0xb0>)
 80045dc:	6013      	str	r3, [r2, #0]

  osThreadDef(rxW5500Task, StartRxW5500Task, osPriorityRealtime, 0, 128);
 80045de:	4b18      	ldr	r3, [pc, #96]	; (8004640 <MX_FREERTOS_Init+0xb4>)
 80045e0:	f107 041c 	add.w	r4, r7, #28
 80045e4:	461d      	mov	r5, r3
 80045e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80045ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rxW5500TaskHandle = osThreadCreate(osThread(rxW5500Task), NULL);
 80045f2:	f107 031c 	add.w	r3, r7, #28
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe fcce 	bl	8002f9a <osThreadCreate>
 80045fe:	4603      	mov	r3, r0
 8004600:	4a10      	ldr	r2, [pc, #64]	; (8004644 <MX_FREERTOS_Init+0xb8>)
 8004602:	6013      	str	r3, [r2, #0]

  osThreadDef(txW5500Task, StartTxW5500Task, osPriorityRealtime, 0, 128);
 8004604:	4b10      	ldr	r3, [pc, #64]	; (8004648 <MX_FREERTOS_Init+0xbc>)
 8004606:	463c      	mov	r4, r7
 8004608:	461d      	mov	r5, r3
 800460a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800460c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800460e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  txW5500TaskHandle = osThreadCreate(osThread(txW5500Task), NULL);
 8004616:	463b      	mov	r3, r7
 8004618:	2100      	movs	r1, #0
 800461a:	4618      	mov	r0, r3
 800461c:	f7fe fcbd 	bl	8002f9a <osThreadCreate>
 8004620:	4603      	mov	r3, r0
 8004622:	4a0a      	ldr	r2, [pc, #40]	; (800464c <MX_FREERTOS_Init+0xc0>)
 8004624:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

}
 8004626:	bf00      	nop
 8004628:	3770      	adds	r7, #112	; 0x70
 800462a:	46bd      	mov	sp, r7
 800462c:	bdb0      	pop	{r4, r5, r7, pc}
 800462e:	bf00      	nop
 8004630:	08009b5c 	.word	0x08009b5c
 8004634:	20003e90 	.word	0x20003e90
 8004638:	08009b80 	.word	0x08009b80
 800463c:	20003e8c 	.word	0x20003e8c
 8004640:	08009ba8 	.word	0x08009ba8
 8004644:	20003e94 	.word	0x20003e94
 8004648:	08009bd0 	.word	0x08009bd0
 800464c:	20003e98 	.word	0x20003e98

08004650 <StartPwmTask>:
  /* USER CODE END StartDefaultTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void StartPwmTask(void const * argument) {
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  // Inicia o canal PWM. Substitua TIM2 e TIM_CHANNEL_1 pelos seus.
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004658:	2100      	movs	r1, #0
 800465a:	4807      	ldr	r0, [pc, #28]	; (8004678 <StartPwmTask+0x28>)
 800465c:	f7fd fbf0 	bl	8001e40 <HAL_TIM_PWM_Start>

  uint32_t duty_cycle = 2100; // Começa com ~50% (metade de ARR=4199)
 8004660:	f640 0334 	movw	r3, #2100	; 0x834
 8004664:	60fb      	str	r3, [r7, #12]

  for(;;) {
    // Define o duty cycle do PWM
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 8004666:	4b04      	ldr	r3, [pc, #16]	; (8004678 <StartPwmTask+0x28>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	635a      	str	r2, [r3, #52]	; 0x34
    // Apenas para teste, mude o duty cycle ao longo do tempo
    // duty_cycle += 100;
    // if (duty_cycle > 4199) {
    //   duty_cycle = 0;
    // }
    osDelay(100); // Atraso de 100ms
 800466e:	2064      	movs	r0, #100	; 0x64
 8004670:	f7fe fcdf 	bl	8003032 <osDelay>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 8004674:	e7f7      	b.n	8004666 <StartPwmTask+0x16>
 8004676:	bf00      	nop
 8004678:	2000414c 	.word	0x2000414c

0800467c <StartAdcTask>:
  }
}

void StartAdcTask(void const * argument)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08c      	sub	sp, #48	; 0x30
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
    // Inicia a conversão ADC
    HAL_ADC_Start(&hadc1);
 8004684:	4815      	ldr	r0, [pc, #84]	; (80046dc <StartAdcTask+0x60>)
 8004686:	f7fc f853 	bl	8000730 <HAL_ADC_Start>

    // Espera a conversão ser finalizada
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 800468a:	2164      	movs	r1, #100	; 0x64
 800468c:	4813      	ldr	r0, [pc, #76]	; (80046dc <StartAdcTask+0x60>)
 800468e:	f7fc f954 	bl	800093a <HAL_ADC_PollForConversion>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d118      	bne.n	80046ca <StartAdcTask+0x4e>
    {
      // Lê o valor convertido
      adc_value = HAL_ADC_GetValue(&hadc1);
 8004698:	4810      	ldr	r0, [pc, #64]	; (80046dc <StartAdcTask+0x60>)
 800469a:	f7fc f9d9 	bl	8000a50 <HAL_ADC_GetValue>
 800469e:	62f8      	str	r0, [r7, #44]	; 0x2c

      // Formata a string com o valor do ADC
      sprintf(msg, "Valor do ADC: %lu\r\n", adc_value);
 80046a0:	f107 030c 	add.w	r3, r7, #12
 80046a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046a6:	490e      	ldr	r1, [pc, #56]	; (80046e0 <StartAdcTask+0x64>)
 80046a8:	4618      	mov	r0, r3
 80046aa:	f004 fa01 	bl	8008ab0 <siprintf>

      // Envia a mensagem pela UART2
      // O handle 'huart2' foi gerado pelo CubeMX e está em main.h
      HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80046ae:	f107 030c 	add.w	r3, r7, #12
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fb fd8c 	bl	80001d0 <strlen>
 80046b8:	4603      	mov	r3, r0
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	f107 010c 	add.w	r1, r7, #12
 80046c0:	f04f 33ff 	mov.w	r3, #4294967295
 80046c4:	4807      	ldr	r0, [pc, #28]	; (80046e4 <StartAdcTask+0x68>)
 80046c6:	f7fe f88d 	bl	80027e4 <HAL_UART_Transmit>
    }

    // Para a conversão para economizar energia
    HAL_ADC_Stop(&hadc1);
 80046ca:	4804      	ldr	r0, [pc, #16]	; (80046dc <StartAdcTask+0x60>)
 80046cc:	f7fc f902 	bl	80008d4 <HAL_ADC_Stop>

    // Aguarda 1 segundo antes da próxima leitura
    vTaskDelay(pdMS_TO_TICKS(1000));
 80046d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046d4:	f7fe ff08 	bl	80034e8 <vTaskDelay>
    HAL_ADC_Start(&hadc1);
 80046d8:	e7d4      	b.n	8004684 <StartAdcTask+0x8>
 80046da:	bf00      	nop
 80046dc:	20003e44 	.word	0x20003e44
 80046e0:	08009bec 	.word	0x08009bec
 80046e4:	20004194 	.word	0x20004194

080046e8 <StartRxW5500Task>:
  }
  /* USER CODE END vTaskADC */
}

void StartRxW5500Task(void const * argument) {
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]

  for(;;)
 80046f0:	e7fe      	b.n	80046f0 <StartRxW5500Task+0x8>

080046f2 <StartTxW5500Task>:
  {}
}

void StartTxW5500Task(void const * argument) {
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]

  for(;;)
 80046fa:	e7fe      	b.n	80046fa <StartTxW5500Task+0x8>

080046fc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	607b      	str	r3, [r7, #4]
 8004706:	4b09      	ldr	r3, [pc, #36]	; (800472c <MX_GPIO_Init+0x30>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	4a08      	ldr	r2, [pc, #32]	; (800472c <MX_GPIO_Init+0x30>)
 800470c:	f043 0301 	orr.w	r3, r3, #1
 8004710:	6313      	str	r3, [r2, #48]	; 0x30
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <MX_GPIO_Init+0x30>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	687b      	ldr	r3, [r7, #4]

}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40023800 	.word	0x40023800

08004730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004734:	f7fb ff22 	bl	800057c <HAL_Init>
  // don't buffer the output of printf
  //setbuf(stdout, NULL);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004738:	f000 f81c 	bl	8004774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800473c:	f7ff ffde 	bl	80046fc <MX_GPIO_Init>
  MX_ADC1_Init();
 8004740:	f7ff fe74 	bl	800442c <MX_ADC1_Init>
  MX_SPI1_Init();
 8004744:	f000 f87a 	bl	800483c <MX_SPI1_Init>
  MX_TIM2_Init();
 8004748:	f000 fa02 	bl	8004b50 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800474c:	f000 fab0 	bl	8004cb0 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  w5500_init();
 8004750:	f003 f99c 	bl	8007a8c <w5500_init>
  /* USER CODE END 2 */

  // dynamic host configuration
  dynamic_host_configuration(net_info.mac);
 8004754:	4806      	ldr	r0, [pc, #24]	; (8004770 <main+0x40>)
 8004756:	f002 fedf 	bl	8007518 <dynamic_host_configuration>
  check_cable_presence();
 800475a:	f002 ffad 	bl	80076b8 <check_cable_presence>
  check_phy_status();
 800475e:	f002 ffe1 	bl	8007724 <check_phy_status>
  print_current_host_configuration();
 8004762:	f003 f87f 	bl	8007864 <print_current_host_configuration>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8004766:	f7ff ff11 	bl	800458c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800476a:	f7fe fc0f 	bl	8002f8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800476e:	e7fe      	b.n	800476e <main+0x3e>
 8004770:	2000000c 	.word	0x2000000c

08004774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b094      	sub	sp, #80	; 0x50
 8004778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800477a:	f107 0320 	add.w	r3, r7, #32
 800477e:	2230      	movs	r2, #48	; 0x30
 8004780:	2100      	movs	r1, #0
 8004782:	4618      	mov	r0, r3
 8004784:	f004 fa8c 	bl	8008ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004788:	f107 030c 	add.w	r3, r7, #12
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	605a      	str	r2, [r3, #4]
 8004792:	609a      	str	r2, [r3, #8]
 8004794:	60da      	str	r2, [r3, #12]
 8004796:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004798:	2300      	movs	r3, #0
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	4b22      	ldr	r3, [pc, #136]	; (8004828 <SystemClock_Config+0xb4>)
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	4a21      	ldr	r2, [pc, #132]	; (8004828 <SystemClock_Config+0xb4>)
 80047a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a6:	6413      	str	r3, [r2, #64]	; 0x40
 80047a8:	4b1f      	ldr	r3, [pc, #124]	; (8004828 <SystemClock_Config+0xb4>)
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047b4:	2300      	movs	r3, #0
 80047b6:	607b      	str	r3, [r7, #4]
 80047b8:	4b1c      	ldr	r3, [pc, #112]	; (800482c <SystemClock_Config+0xb8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1b      	ldr	r2, [pc, #108]	; (800482c <SystemClock_Config+0xb8>)
 80047be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	4b19      	ldr	r3, [pc, #100]	; (800482c <SystemClock_Config+0xb8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047cc:	607b      	str	r3, [r7, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80047d0:	2302      	movs	r3, #2
 80047d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80047d4:	2301      	movs	r3, #1
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80047d8:	2310      	movs	r3, #16
 80047da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80047dc:	2300      	movs	r3, #0
 80047de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047e0:	f107 0320 	add.w	r3, r7, #32
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fc fdfb 	bl	80013e0 <HAL_RCC_OscConfig>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80047f0:	f000 f81e 	bl	8004830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047f4:	230f      	movs	r3, #15
 80047f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80047f8:	2300      	movs	r3, #0
 80047fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004800:	2300      	movs	r3, #0
 8004802:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004804:	2300      	movs	r3, #0
 8004806:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004808:	f107 030c 	add.w	r3, r7, #12
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f7fd f85e 	bl	80018d0 <HAL_RCC_ClockConfig>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800481a:	f000 f809 	bl	8004830 <Error_Handler>
  }
}
 800481e:	bf00      	nop
 8004820:	3750      	adds	r7, #80	; 0x50
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800
 800482c:	40007000 	.word	0x40007000

08004830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004834:	b672      	cpsid	i
}
 8004836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004838:	e7fe      	b.n	8004838 <Error_Handler+0x8>
	...

0800483c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004840:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <MX_SPI1_Init+0x74>)
 8004842:	4a1c      	ldr	r2, [pc, #112]	; (80048b4 <MX_SPI1_Init+0x78>)
 8004844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004846:	4b1a      	ldr	r3, [pc, #104]	; (80048b0 <MX_SPI1_Init+0x74>)
 8004848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800484c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800484e:	4b18      	ldr	r3, [pc, #96]	; (80048b0 <MX_SPI1_Init+0x74>)
 8004850:	2200      	movs	r2, #0
 8004852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004854:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <MX_SPI1_Init+0x74>)
 8004856:	2200      	movs	r2, #0
 8004858:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800485a:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <MX_SPI1_Init+0x74>)
 800485c:	2200      	movs	r2, #0
 800485e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004860:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <MX_SPI1_Init+0x74>)
 8004862:	2200      	movs	r2, #0
 8004864:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004866:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <MX_SPI1_Init+0x74>)
 8004868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800486c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800486e:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <MX_SPI1_Init+0x74>)
 8004870:	2200      	movs	r2, #0
 8004872:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004874:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <MX_SPI1_Init+0x74>)
 8004876:	2200      	movs	r2, #0
 8004878:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800487a:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <MX_SPI1_Init+0x74>)
 800487c:	2200      	movs	r2, #0
 800487e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <MX_SPI1_Init+0x74>)
 8004882:	2200      	movs	r2, #0
 8004884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004886:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <MX_SPI1_Init+0x74>)
 8004888:	2207      	movs	r2, #7
 800488a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800488c:	4808      	ldr	r0, [pc, #32]	; (80048b0 <MX_SPI1_Init+0x74>)
 800488e:	f7fd f9ff 	bl	8001c90 <HAL_SPI_Init>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004898:	f7ff ffca 	bl	8004830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 800489c:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <MX_SPI1_Init+0x74>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4b03      	ldr	r3, [pc, #12]	; (80048b0 <MX_SPI1_Init+0x74>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048aa:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 80048ac:	bf00      	nop
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	200040f0 	.word	0x200040f0
 80048b4:	40013000 	.word	0x40013000

080048b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08a      	sub	sp, #40	; 0x28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c0:	f107 0314 	add.w	r3, r7, #20
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	605a      	str	r2, [r3, #4]
 80048ca:	609a      	str	r2, [r3, #8]
 80048cc:	60da      	str	r2, [r3, #12]
 80048ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a19      	ldr	r2, [pc, #100]	; (800493c <HAL_SPI_MspInit+0x84>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d12b      	bne.n	8004932 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80048da:	2300      	movs	r3, #0
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	4b18      	ldr	r3, [pc, #96]	; (8004940 <HAL_SPI_MspInit+0x88>)
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	4a17      	ldr	r2, [pc, #92]	; (8004940 <HAL_SPI_MspInit+0x88>)
 80048e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048e8:	6453      	str	r3, [r2, #68]	; 0x44
 80048ea:	4b15      	ldr	r3, [pc, #84]	; (8004940 <HAL_SPI_MspInit+0x88>)
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	4b11      	ldr	r3, [pc, #68]	; (8004940 <HAL_SPI_MspInit+0x88>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	4a10      	ldr	r2, [pc, #64]	; (8004940 <HAL_SPI_MspInit+0x88>)
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	6313      	str	r3, [r2, #48]	; 0x30
 8004906:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <HAL_SPI_MspInit+0x88>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004912:	23e0      	movs	r3, #224	; 0xe0
 8004914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004916:	2302      	movs	r3, #2
 8004918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491a:	2300      	movs	r3, #0
 800491c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800491e:	2303      	movs	r3, #3
 8004920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004922:	2305      	movs	r3, #5
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004926:	f107 0314 	add.w	r3, r7, #20
 800492a:	4619      	mov	r1, r3
 800492c:	4805      	ldr	r0, [pc, #20]	; (8004944 <HAL_SPI_MspInit+0x8c>)
 800492e:	f7fc fba1 	bl	8001074 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004932:	bf00      	nop
 8004934:	3728      	adds	r7, #40	; 0x28
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40013000 	.word	0x40013000
 8004940:	40023800 	.word	0x40023800
 8004944:	40020000 	.word	0x40020000

08004948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800494e:	2300      	movs	r3, #0
 8004950:	607b      	str	r3, [r7, #4]
 8004952:	4b12      	ldr	r3, [pc, #72]	; (800499c <HAL_MspInit+0x54>)
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	4a11      	ldr	r2, [pc, #68]	; (800499c <HAL_MspInit+0x54>)
 8004958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800495c:	6453      	str	r3, [r2, #68]	; 0x44
 800495e:	4b0f      	ldr	r3, [pc, #60]	; (800499c <HAL_MspInit+0x54>)
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004966:	607b      	str	r3, [r7, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	603b      	str	r3, [r7, #0]
 800496e:	4b0b      	ldr	r3, [pc, #44]	; (800499c <HAL_MspInit+0x54>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	4a0a      	ldr	r2, [pc, #40]	; (800499c <HAL_MspInit+0x54>)
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004978:	6413      	str	r3, [r2, #64]	; 0x40
 800497a:	4b08      	ldr	r3, [pc, #32]	; (800499c <HAL_MspInit+0x54>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004986:	2200      	movs	r2, #0
 8004988:	210f      	movs	r1, #15
 800498a:	f06f 0001 	mvn.w	r0, #1
 800498e:	f7fc fb48 	bl	8001022 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40023800 	.word	0x40023800

080049a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80049a4:	e7fe      	b.n	80049a4 <NMI_Handler+0x4>

080049a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049a6:	b480      	push	{r7}
 80049a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049aa:	e7fe      	b.n	80049aa <HardFault_Handler+0x4>

080049ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049b0:	e7fe      	b.n	80049b0 <MemManage_Handler+0x4>

080049b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049b2:	b480      	push	{r7}
 80049b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049b6:	e7fe      	b.n	80049b6 <BusFault_Handler+0x4>

080049b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049bc:	e7fe      	b.n	80049bc <UsageFault_Handler+0x4>

080049be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049be:	b480      	push	{r7}
 80049c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049c2:	bf00      	nop
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049d0:	f7fb fe26 	bl	8000620 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80049d4:	f7ff f8b0 	bl	8003b38 <xTaskGetSchedulerState>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d001      	beq.n	80049e2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80049de:	f7ff faeb 	bl	8003fb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049e2:	bf00      	nop
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b086      	sub	sp, #24
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	e00a      	b.n	8004a0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80049f8:	f3af 8000 	nop.w
 80049fc:	4601      	mov	r1, r0
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	60ba      	str	r2, [r7, #8]
 8004a04:	b2ca      	uxtb	r2, r1
 8004a06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	dbf0      	blt.n	80049f8 <_read+0x12>
  }

  return len;
 8004a16:	687b      	ldr	r3, [r7, #4]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	e009      	b.n	8004a46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	60ba      	str	r2, [r7, #8]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	3301      	adds	r3, #1
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	dbf1      	blt.n	8004a32 <_write+0x12>
  }
  return len;
 8004a4e:	687b      	ldr	r3, [r7, #4]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <_close>:

int _close(int file)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a80:	605a      	str	r2, [r3, #4]
  return 0;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <_isatty>:

int _isatty(int file)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a98:	2301      	movs	r3, #1
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ac8:	4a14      	ldr	r2, [pc, #80]	; (8004b1c <_sbrk+0x5c>)
 8004aca:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <_sbrk+0x60>)
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ad4:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <_sbrk+0x64>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d102      	bne.n	8004ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004adc:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <_sbrk+0x64>)
 8004ade:	4a12      	ldr	r2, [pc, #72]	; (8004b28 <_sbrk+0x68>)
 8004ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <_sbrk+0x64>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4413      	add	r3, r2
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d207      	bcs.n	8004b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004af0:	f004 f924 	bl	8008d3c <__errno>
 8004af4:	4603      	mov	r3, r0
 8004af6:	220c      	movs	r2, #12
 8004af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004afa:	f04f 33ff 	mov.w	r3, #4294967295
 8004afe:	e009      	b.n	8004b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b00:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <_sbrk+0x64>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b06:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <_sbrk+0x64>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	4a05      	ldr	r2, [pc, #20]	; (8004b24 <_sbrk+0x64>)
 8004b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b12:	68fb      	ldr	r3, [r7, #12]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20020000 	.word	0x20020000
 8004b20:	00000400 	.word	0x00000400
 8004b24:	20004148 	.word	0x20004148
 8004b28:	20004388 	.word	0x20004388

08004b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b30:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <SystemInit+0x20>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	4a05      	ldr	r2, [pc, #20]	; (8004b4c <SystemInit+0x20>)
 8004b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b40:	bf00      	nop
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	e000ed00 	.word	0xe000ed00

08004b50 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08a      	sub	sp, #40	; 0x28
 8004b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b56:	f107 0320 	add.w	r3, r7, #32
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b60:	1d3b      	adds	r3, r7, #4
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	605a      	str	r2, [r3, #4]
 8004b68:	609a      	str	r2, [r3, #8]
 8004b6a:	60da      	str	r2, [r3, #12]
 8004b6c:	611a      	str	r2, [r3, #16]
 8004b6e:	615a      	str	r2, [r3, #20]
 8004b70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004b72:	4b22      	ldr	r3, [pc, #136]	; (8004bfc <MX_TIM2_Init+0xac>)
 8004b74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004b7a:	4b20      	ldr	r3, [pc, #128]	; (8004bfc <MX_TIM2_Init+0xac>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b80:	4b1e      	ldr	r3, [pc, #120]	; (8004bfc <MX_TIM2_Init+0xac>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4199; 
 8004b86:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <MX_TIM2_Init+0xac>)
 8004b88:	f241 0267 	movw	r2, #4199	; 0x1067
 8004b8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b8e:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <MX_TIM2_Init+0xac>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b94:	4b19      	ldr	r3, [pc, #100]	; (8004bfc <MX_TIM2_Init+0xac>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004b9a:	4818      	ldr	r0, [pc, #96]	; (8004bfc <MX_TIM2_Init+0xac>)
 8004b9c:	f7fd f901 	bl	8001da2 <HAL_TIM_PWM_Init>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8004ba6:	f7ff fe43 	bl	8004830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004baa:	2300      	movs	r3, #0
 8004bac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004bb2:	f107 0320 	add.w	r3, r7, #32
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4810      	ldr	r0, [pc, #64]	; (8004bfc <MX_TIM2_Init+0xac>)
 8004bba:	f7fd fd47 	bl	800264c <HAL_TIMEx_MasterConfigSynchronization>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8004bc4:	f7ff fe34 	bl	8004830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004bc8:	2360      	movs	r3, #96	; 0x60
 8004bca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004bd8:	1d3b      	adds	r3, r7, #4
 8004bda:	2200      	movs	r2, #0
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4807      	ldr	r0, [pc, #28]	; (8004bfc <MX_TIM2_Init+0xac>)
 8004be0:	f7fd f9f6 	bl	8001fd0 <HAL_TIM_PWM_ConfigChannel>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8004bea:	f7ff fe21 	bl	8004830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004bee:	4803      	ldr	r0, [pc, #12]	; (8004bfc <MX_TIM2_Init+0xac>)
 8004bf0:	f000 f826 	bl	8004c40 <HAL_TIM_MspPostInit>

}
 8004bf4:	bf00      	nop
 8004bf6:	3728      	adds	r7, #40	; 0x28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	2000414c 	.word	0x2000414c

08004c00 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c10:	d10d      	bne.n	8004c2e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <HAL_TIM_PWM_MspInit+0x3c>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	4a08      	ldr	r2, [pc, #32]	; (8004c3c <HAL_TIM_PWM_MspInit+0x3c>)
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	6413      	str	r3, [r2, #64]	; 0x40
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <HAL_TIM_PWM_MspInit+0x3c>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004c2e:	bf00      	nop
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800

08004c40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c48:	f107 030c 	add.w	r3, r7, #12
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	605a      	str	r2, [r3, #4]
 8004c52:	609a      	str	r2, [r3, #8]
 8004c54:	60da      	str	r2, [r3, #12]
 8004c56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c60:	d11e      	bne.n	8004ca0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c62:	2300      	movs	r3, #0
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	4b10      	ldr	r3, [pc, #64]	; (8004ca8 <HAL_TIM_MspPostInit+0x68>)
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	4a0f      	ldr	r2, [pc, #60]	; (8004ca8 <HAL_TIM_MspPostInit+0x68>)
 8004c6c:	f043 0301 	orr.w	r3, r3, #1
 8004c70:	6313      	str	r3, [r2, #48]	; 0x30
 8004c72:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <HAL_TIM_MspPostInit+0x68>)
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c84:	2302      	movs	r3, #2
 8004c86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c90:	2301      	movs	r3, #1
 8004c92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c94:	f107 030c 	add.w	r3, r7, #12
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4804      	ldr	r0, [pc, #16]	; (8004cac <HAL_TIM_MspPostInit+0x6c>)
 8004c9c:	f7fc f9ea 	bl	8001074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004ca0:	bf00      	nop
 8004ca2:	3720      	adds	r7, #32
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	40020000 	.word	0x40020000

08004cb0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cb6:	4a12      	ldr	r2, [pc, #72]	; (8004d00 <MX_USART2_UART_Init+0x50>)
 8004cb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004cba:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004cc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004cc2:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004cce:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004cd4:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cd6:	220c      	movs	r2, #12
 8004cd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cda:	4b08      	ldr	r3, [pc, #32]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ce0:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004ce6:	4805      	ldr	r0, [pc, #20]	; (8004cfc <MX_USART2_UART_Init+0x4c>)
 8004ce8:	f7fd fd2c 	bl	8002744 <HAL_UART_Init>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004cf2:	f7ff fd9d 	bl	8004830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004cf6:	bf00      	nop
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20004194 	.word	0x20004194
 8004d00:	40004400 	.word	0x40004400

08004d04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08a      	sub	sp, #40	; 0x28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d0c:	f107 0314 	add.w	r3, r7, #20
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	605a      	str	r2, [r3, #4]
 8004d16:	609a      	str	r2, [r3, #8]
 8004d18:	60da      	str	r2, [r3, #12]
 8004d1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a19      	ldr	r2, [pc, #100]	; (8004d88 <HAL_UART_MspInit+0x84>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d12b      	bne.n	8004d7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	4b18      	ldr	r3, [pc, #96]	; (8004d8c <HAL_UART_MspInit+0x88>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	4a17      	ldr	r2, [pc, #92]	; (8004d8c <HAL_UART_MspInit+0x88>)
 8004d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d34:	6413      	str	r3, [r2, #64]	; 0x40
 8004d36:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <HAL_UART_MspInit+0x88>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	4b11      	ldr	r3, [pc, #68]	; (8004d8c <HAL_UART_MspInit+0x88>)
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	4a10      	ldr	r2, [pc, #64]	; (8004d8c <HAL_UART_MspInit+0x88>)
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	6313      	str	r3, [r2, #48]	; 0x30
 8004d52:	4b0e      	ldr	r3, [pc, #56]	; (8004d8c <HAL_UART_MspInit+0x88>)
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004d5e:	230c      	movs	r3, #12
 8004d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d62:	2302      	movs	r3, #2
 8004d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d6e:	2307      	movs	r3, #7
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d72:	f107 0314 	add.w	r3, r7, #20
 8004d76:	4619      	mov	r1, r3
 8004d78:	4805      	ldr	r0, [pc, #20]	; (8004d90 <HAL_UART_MspInit+0x8c>)
 8004d7a:	f7fc f97b 	bl	8001074 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004d7e:	bf00      	nop
 8004d80:	3728      	adds	r7, #40	; 0x28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40004400 	.word	0x40004400
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	40020000 	.word	0x40020000

08004d94 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8004d98:	2204      	movs	r2, #4
 8004d9a:	4909      	ldr	r1, [pc, #36]	; (8004dc0 <default_ip_assign+0x2c>)
 8004d9c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004da0:	f002 f9c4 	bl	800712c <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8004da4:	2204      	movs	r2, #4
 8004da6:	4907      	ldr	r1, [pc, #28]	; (8004dc4 <default_ip_assign+0x30>)
 8004da8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004dac:	f002 f9be 	bl	800712c <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8004db0:	2204      	movs	r2, #4
 8004db2:	4905      	ldr	r1, [pc, #20]	; (8004dc8 <default_ip_assign+0x34>)
 8004db4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004db8:	f002 f9b8 	bl	800712c <WIZCHIP_WRITE_BUF>
}
 8004dbc:	bf00      	nop
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	200041ec 	.word	0x200041ec
 8004dc4:	200041f4 	.word	0x200041f4
 8004dc8:	200041f0 	.word	0x200041f0

08004dcc <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8004dd0:	2180      	movs	r1, #128	; 0x80
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	f002 f8fc 	bl	8006fd0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8004dd8:	2000      	movs	r0, #0
 8004dda:	f002 f8ad 	bl	8006f38 <WIZCHIP_READ>
   default_ip_assign();
 8004dde:	f7ff ffd9 	bl	8004d94 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8004de2:	2206      	movs	r2, #6
 8004de4:	4903      	ldr	r1, [pc, #12]	; (8004df4 <default_ip_update+0x28>)
 8004de6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004dea:	f002 f99f 	bl	800712c <WIZCHIP_WRITE_BUF>
}
 8004dee:	bf00      	nop
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	2000420c 	.word	0x2000420c

08004df8 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8004dfc:	2180      	movs	r1, #128	; 0x80
 8004dfe:	2000      	movs	r0, #0
 8004e00:	f002 f8e6 	bl	8006fd0 <WIZCHIP_WRITE>
	getMR(); // for delay
 8004e04:	2000      	movs	r0, #0
 8004e06:	f002 f897 	bl	8006f38 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8004e0a:	2206      	movs	r2, #6
 8004e0c:	4903      	ldr	r1, [pc, #12]	; (8004e1c <default_ip_conflict+0x24>)
 8004e0e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004e12:	f002 f98b 	bl	800712c <WIZCHIP_WRITE_BUF>
}
 8004e16:	bf00      	nop
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	2000420c 	.word	0x2000420c

08004e20 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8004e2c:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <reg_dhcp_cbfunc+0x50>)
 8004e2e:	4a11      	ldr	r2, [pc, #68]	; (8004e74 <reg_dhcp_cbfunc+0x54>)
 8004e30:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8004e32:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <reg_dhcp_cbfunc+0x58>)
 8004e34:	4a11      	ldr	r2, [pc, #68]	; (8004e7c <reg_dhcp_cbfunc+0x5c>)
 8004e36:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8004e38:	4b11      	ldr	r3, [pc, #68]	; (8004e80 <reg_dhcp_cbfunc+0x60>)
 8004e3a:	4a12      	ldr	r2, [pc, #72]	; (8004e84 <reg_dhcp_cbfunc+0x64>)
 8004e3c:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <reg_dhcp_cbfunc+0x2a>
 8004e44:	4a0a      	ldr	r2, [pc, #40]	; (8004e70 <reg_dhcp_cbfunc+0x50>)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <reg_dhcp_cbfunc+0x36>
 8004e50:	4a09      	ldr	r2, [pc, #36]	; (8004e78 <reg_dhcp_cbfunc+0x58>)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <reg_dhcp_cbfunc+0x42>
 8004e5c:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <reg_dhcp_cbfunc+0x60>)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6013      	str	r3, [r2, #0]
}
 8004e62:	bf00      	nop
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20000038 	.word	0x20000038
 8004e74:	08004d95 	.word	0x08004d95
 8004e78:	2000003c 	.word	0x2000003c
 8004e7c:	08004dcd 	.word	0x08004dcd
 8004e80:	20000040 	.word	0x20000040
 8004e84:	08004df9 	.word	0x08004df9

08004e88 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8004e8e:	463b      	mov	r3, r7
 8004e90:	2206      	movs	r2, #6
 8004e92:	4619      	mov	r1, r3
 8004e94:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004e98:	f002 f8e8 	bl	800706c <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8004e9c:	4b72      	ldr	r3, [pc, #456]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8004ea4:	4b70      	ldr	r3, [pc, #448]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8004eac:	4b6e      	ldr	r3, [pc, #440]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2206      	movs	r2, #6
 8004eb2:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8004eb4:	4b6c      	ldr	r3, [pc, #432]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8004ebc:	4b6a      	ldr	r3, [pc, #424]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8004ec4:	4b69      	ldr	r3, [pc, #420]	; (800506c <makeDHCPMSG+0x1e4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	0e1b      	lsrs	r3, r3, #24
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8004ed0:	4b66      	ldr	r3, [pc, #408]	; (800506c <makeDHCPMSG+0x1e4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	0c1a      	lsrs	r2, r3, #16
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8004ede:	4b63      	ldr	r3, [pc, #396]	; (800506c <makeDHCPMSG+0x1e4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	0a1a      	lsrs	r2, r3, #8
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	3302      	adds	r3, #2
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8004eec:	4b5f      	ldr	r3, [pc, #380]	; (800506c <makeDHCPMSG+0x1e4>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	3303      	adds	r3, #3
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8004ef8:	4b5b      	ldr	r3, [pc, #364]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2200      	movs	r2, #0
 8004efe:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8004f00:	4b59      	ldr	r3, [pc, #356]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330a      	adds	r3, #10
 8004f06:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2280      	movs	r2, #128	; 0x80
 8004f0c:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	3301      	adds	r3, #1
 8004f12:	2200      	movs	r2, #0
 8004f14:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8004f16:	4b54      	ldr	r3, [pc, #336]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8004f1e:	4b52      	ldr	r3, [pc, #328]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2200      	movs	r2, #0
 8004f24:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8004f26:	4b50      	ldr	r3, [pc, #320]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8004f2e:	4b4e      	ldr	r3, [pc, #312]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2200      	movs	r2, #0
 8004f34:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8004f36:	4b4c      	ldr	r3, [pc, #304]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8004f3e:	4b4a      	ldr	r3, [pc, #296]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2200      	movs	r2, #0
 8004f44:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8004f46:	4b48      	ldr	r3, [pc, #288]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8004f4e:	4b46      	ldr	r3, [pc, #280]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2200      	movs	r2, #0
 8004f54:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8004f56:	4b44      	ldr	r3, [pc, #272]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8004f5e:	4b42      	ldr	r3, [pc, #264]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2200      	movs	r2, #0
 8004f64:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8004f66:	4b40      	ldr	r3, [pc, #256]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8004f6e:	4b3e      	ldr	r3, [pc, #248]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2200      	movs	r2, #0
 8004f74:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8004f76:	4b3c      	ldr	r3, [pc, #240]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8004f7e:	4b3a      	ldr	r3, [pc, #232]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2200      	movs	r2, #0
 8004f84:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8004f86:	4b38      	ldr	r3, [pc, #224]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8004f8e:	4b36      	ldr	r3, [pc, #216]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2200      	movs	r2, #0
 8004f94:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8004f96:	4b34      	ldr	r3, [pc, #208]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a35      	ldr	r2, [pc, #212]	; (8005070 <makeDHCPMSG+0x1e8>)
 8004f9c:	7812      	ldrb	r2, [r2, #0]
 8004f9e:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8004fa0:	4b31      	ldr	r3, [pc, #196]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a32      	ldr	r2, [pc, #200]	; (8005070 <makeDHCPMSG+0x1e8>)
 8004fa6:	7852      	ldrb	r2, [r2, #1]
 8004fa8:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8004faa:	4b2f      	ldr	r3, [pc, #188]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a30      	ldr	r2, [pc, #192]	; (8005070 <makeDHCPMSG+0x1e8>)
 8004fb0:	7892      	ldrb	r2, [r2, #2]
 8004fb2:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8004fb4:	4b2c      	ldr	r3, [pc, #176]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a2d      	ldr	r2, [pc, #180]	; (8005070 <makeDHCPMSG+0x1e8>)
 8004fba:	78d2      	ldrb	r2, [r2, #3]
 8004fbc:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8004fbe:	4b2a      	ldr	r3, [pc, #168]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a2b      	ldr	r2, [pc, #172]	; (8005070 <makeDHCPMSG+0x1e8>)
 8004fc4:	7912      	ldrb	r2, [r2, #4]
 8004fc6:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8004fca:	4b27      	ldr	r3, [pc, #156]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a28      	ldr	r2, [pc, #160]	; (8005070 <makeDHCPMSG+0x1e8>)
 8004fd0:	7952      	ldrb	r2, [r2, #5]
 8004fd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8004fd6:	2306      	movs	r3, #6
 8004fd8:	73fb      	strb	r3, [r7, #15]
 8004fda:	e008      	b.n	8004fee <makeDHCPMSG+0x166>
 8004fdc:	4b22      	ldr	r3, [pc, #136]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	771a      	strb	r2, [r3, #28]
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	3301      	adds	r3, #1
 8004fec:	73fb      	strb	r3, [r7, #15]
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	2b0f      	cmp	r3, #15
 8004ff2:	d9f3      	bls.n	8004fdc <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	73fb      	strb	r3, [r7, #15]
 8004ff8:	e009      	b.n	800500e <makeDHCPMSG+0x186>
 8004ffa:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <makeDHCPMSG+0x1e0>)
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
 8005000:	4413      	add	r3, r2
 8005002:	2200      	movs	r2, #0
 8005004:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	3301      	adds	r3, #1
 800500c:	73fb      	strb	r3, [r7, #15]
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	2b3f      	cmp	r3, #63	; 0x3f
 8005012:	d9f2      	bls.n	8004ffa <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	73fb      	strb	r3, [r7, #15]
 8005018:	e009      	b.n	800502e <makeDHCPMSG+0x1a6>
 800501a:	4b13      	ldr	r3, [pc, #76]	; (8005068 <makeDHCPMSG+0x1e0>)
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	4413      	add	r3, r2
 8005022:	2200      	movs	r2, #0
 8005024:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	3301      	adds	r3, #1
 800502c:	73fb      	strb	r3, [r7, #15]
 800502e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005032:	2b00      	cmp	r3, #0
 8005034:	daf1      	bge.n	800501a <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8005036:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <makeDHCPMSG+0x1e0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2263      	movs	r2, #99	; 0x63
 800503c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <makeDHCPMSG+0x1e0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2282      	movs	r2, #130	; 0x82
 8005046:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 800504a:	4b07      	ldr	r3, [pc, #28]	; (8005068 <makeDHCPMSG+0x1e0>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2253      	movs	r2, #83	; 0x53
 8005050:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <makeDHCPMSG+0x1e0>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2263      	movs	r2, #99	; 0x63
 800505a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 800505e:	bf00      	nop
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20004208 	.word	0x20004208
 800506c:	20004204 	.word	0x20004204
 8005070:	2000420c 	.word	0x2000420c

08005074 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8005074:	b5b0      	push	{r4, r5, r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 800507a:	2300      	movs	r3, #0
 800507c:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 800507e:	f7ff ff03 	bl	8004e88 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8005082:	4b56      	ldr	r3, [pc, #344]	; (80051dc <send_DHCP_DISCOVER+0x168>)
 8005084:	2200      	movs	r2, #0
 8005086:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8005088:	4b54      	ldr	r3, [pc, #336]	; (80051dc <send_DHCP_DISCOVER+0x168>)
 800508a:	2200      	movs	r2, #0
 800508c:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 800508e:	4b53      	ldr	r3, [pc, #332]	; (80051dc <send_DHCP_DISCOVER+0x168>)
 8005090:	2200      	movs	r2, #0
 8005092:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8005094:	4b51      	ldr	r3, [pc, #324]	; (80051dc <send_DHCP_DISCOVER+0x168>)
 8005096:	2200      	movs	r2, #0
 8005098:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 800509a:	4b51      	ldr	r3, [pc, #324]	; (80051e0 <send_DHCP_DISCOVER+0x16c>)
 800509c:	2200      	movs	r2, #0
 800509e:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 80050a0:	4b4f      	ldr	r3, [pc, #316]	; (80051e0 <send_DHCP_DISCOVER+0x16c>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 80050a6:	4b4e      	ldr	r3, [pc, #312]	; (80051e0 <send_DHCP_DISCOVER+0x16c>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 80050ac:	4b4c      	ldr	r3, [pc, #304]	; (80051e0 <send_DHCP_DISCOVER+0x16c>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 80050b2:	2304      	movs	r3, #4
 80050b4:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80050b6:	4b4b      	ldr	r3, [pc, #300]	; (80051e4 <send_DHCP_DISCOVER+0x170>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	88bb      	ldrh	r3, [r7, #4]
 80050bc:	1c59      	adds	r1, r3, #1
 80050be:	80b9      	strh	r1, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	2235      	movs	r2, #53	; 0x35
 80050c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80050c8:	4b46      	ldr	r3, [pc, #280]	; (80051e4 <send_DHCP_DISCOVER+0x170>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	88bb      	ldrh	r3, [r7, #4]
 80050ce:	1c59      	adds	r1, r3, #1
 80050d0:	80b9      	strh	r1, [r7, #4]
 80050d2:	4413      	add	r3, r2
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 80050da:	4b42      	ldr	r3, [pc, #264]	; (80051e4 <send_DHCP_DISCOVER+0x170>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	88bb      	ldrh	r3, [r7, #4]
 80050e0:	1c59      	adds	r1, r3, #1
 80050e2:	80b9      	strh	r1, [r7, #4]
 80050e4:	4413      	add	r3, r2
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80050ec:	4b3d      	ldr	r3, [pc, #244]	; (80051e4 <send_DHCP_DISCOVER+0x170>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	88bb      	ldrh	r3, [r7, #4]
 80050f2:	1c59      	adds	r1, r3, #1
 80050f4:	80b9      	strh	r1, [r7, #4]
 80050f6:	4413      	add	r3, r2
 80050f8:	223d      	movs	r2, #61	; 0x3d
 80050fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80050fe:	4b39      	ldr	r3, [pc, #228]	; (80051e4 <send_DHCP_DISCOVER+0x170>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	88bb      	ldrh	r3, [r7, #4]
 8005104:	1c59      	adds	r1, r3, #1
 8005106:	80b9      	strh	r1, [r7, #4]
 8005108:	4413      	add	r3, r2
 800510a:	2207      	movs	r2, #7
 800510c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8005110:	4b34      	ldr	r3, [pc, #208]	; (80051e4 <send_DHCP_DISCOVER+0x170>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	88bb      	ldrh	r3, [r7, #4]
 8005116:	1c59      	adds	r1, r3, #1
 8005118:	80b9      	strh	r1, [r7, #4]
 800511a:	4413      	add	r3, r2
 800511c:	2201      	movs	r2, #1
 800511e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8005122:	4b30      	ldr	r3, [pc, #192]	; (80051e4 <send_DHCP_DISCOVER+0x170>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	88bb      	ldrh	r3, [r7, #4]
 8005128:	1c59      	adds	r1, r3, #1
 800512a:	80b9      	strh	r1, [r7, #4]
 800512c:	4618      	mov	r0, r3
 800512e:	4b2e      	ldr	r3, [pc, #184]	; (80051e8 <send_DHCP_DISCOVER+0x174>)
 8005130:	7819      	ldrb	r1, [r3, #0]
 8005132:	1813      	adds	r3, r2, r0
 8005134:	460a      	mov	r2, r1
 8005136:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800513a:	4b2a      	ldr	r3, [pc, #168]	; (80051e4 <send_DHCP_DISCOVER+0x170>)
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	88bb      	ldrh	r3, [r7, #4]
 8005140:	1c59      	adds	r1, r3, #1
 8005142:	80b9      	strh	r1, [r7, #4]
 8005144:	4618      	mov	r0, r3
 8005146:	4b28      	ldr	r3, [pc, #160]	; (80051e8 <send_DHCP_DISCOVER+0x174>)
 8005148:	7859      	ldrb	r1, [r3, #1]
 800514a:	1813      	adds	r3, r2, r0
 800514c:	460a      	mov	r2, r1
 800514e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8005152:	4b24      	ldr	r3, [pc, #144]	; (80051e4 <send_DHCP_DISCOVER+0x170>)
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	88bb      	ldrh	r3, [r7, #4]
 8005158:	1c59      	adds	r1, r3, #1
 800515a:	80b9      	strh	r1, [r7, #4]
 800515c:	4618      	mov	r0, r3
 800515e:	4b22      	ldr	r3, [pc, #136]	; (80051e8 <send_DHCP_DISCOVER+0x174>)
 8005160:	7899      	ldrb	r1, [r3, #2]
 8005162:	1813      	adds	r3, r2, r0
 8005164:	460a      	mov	r2, r1
 8005166:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800516a:	4b1e      	ldr	r3, [pc, #120]	; (80051e4 <send_DHCP_DISCOVER+0x170>)
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	88bb      	ldrh	r3, [r7, #4]
 8005170:	1c59      	adds	r1, r3, #1
 8005172:	80b9      	strh	r1, [r7, #4]
 8005174:	4618      	mov	r0, r3
 8005176:	4b1c      	ldr	r3, [pc, #112]	; (80051e8 <send_DHCP_DISCOVER+0x174>)
 8005178:	78d9      	ldrb	r1, [r3, #3]
 800517a:	1813      	adds	r3, r2, r0
 800517c:	460a      	mov	r2, r1
 800517e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8005182:	4b18      	ldr	r3, [pc, #96]	; (80051e4 <send_DHCP_DISCOVER+0x170>)
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	88bb      	ldrh	r3, [r7, #4]
 8005188:	1c59      	adds	r1, r3, #1
 800518a:	80b9      	strh	r1, [r7, #4]
 800518c:	4618      	mov	r0, r3
 800518e:	4b16      	ldr	r3, [pc, #88]	; (80051e8 <send_DHCP_DISCOVER+0x174>)
 8005190:	7919      	ldrb	r1, [r3, #4]
 8005192:	1813      	adds	r3, r2, r0
 8005194:	460a      	mov	r2, r1
 8005196:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800519a:	4b12      	ldr	r3, [pc, #72]	; (80051e4 <send_DHCP_DISCOVER+0x170>)
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	88bb      	ldrh	r3, [r7, #4]
 80051a0:	1c59      	adds	r1, r3, #1
 80051a2:	80b9      	strh	r1, [r7, #4]
 80051a4:	4618      	mov	r0, r3
 80051a6:	4b10      	ldr	r3, [pc, #64]	; (80051e8 <send_DHCP_DISCOVER+0x174>)
 80051a8:	7959      	ldrb	r1, [r3, #5]
 80051aa:	1813      	adds	r3, r2, r0
 80051ac:	460a      	mov	r2, r1
 80051ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80051b2:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <send_DHCP_DISCOVER+0x170>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	88bb      	ldrh	r3, [r7, #4]
 80051b8:	1c59      	adds	r1, r3, #1
 80051ba:	80b9      	strh	r1, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	220c      	movs	r2, #12
 80051c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 80051c4:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <send_DHCP_DISCOVER+0x170>)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	88bb      	ldrh	r3, [r7, #4]
 80051ca:	1c59      	adds	r1, r3, #1
 80051cc:	80b9      	strh	r1, [r7, #4]
 80051ce:	4413      	add	r3, r2
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80051d6:	2300      	movs	r3, #0
 80051d8:	80fb      	strh	r3, [r7, #6]
 80051da:	e017      	b.n	800520c <send_DHCP_DISCOVER+0x198>
 80051dc:	200041e0 	.word	0x200041e0
 80051e0:	200041e4 	.word	0x200041e4
 80051e4:	20004208 	.word	0x20004208
 80051e8:	2000420c 	.word	0x2000420c
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80051ec:	88f9      	ldrh	r1, [r7, #6]
 80051ee:	4b80      	ldr	r3, [pc, #512]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	88bb      	ldrh	r3, [r7, #4]
 80051f4:	1c58      	adds	r0, r3, #1
 80051f6:	80b8      	strh	r0, [r7, #4]
 80051f8:	4618      	mov	r0, r3
 80051fa:	4b7e      	ldr	r3, [pc, #504]	; (80053f4 <send_DHCP_DISCOVER+0x380>)
 80051fc:	5c59      	ldrb	r1, [r3, r1]
 80051fe:	1813      	adds	r3, r2, r0
 8005200:	460a      	mov	r2, r1
 8005202:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8005206:	88fb      	ldrh	r3, [r7, #6]
 8005208:	3301      	adds	r3, #1
 800520a:	80fb      	strh	r3, [r7, #6]
 800520c:	88fb      	ldrh	r3, [r7, #6]
 800520e:	4a79      	ldr	r2, [pc, #484]	; (80053f4 <send_DHCP_DISCOVER+0x380>)
 8005210:	5cd3      	ldrb	r3, [r2, r3]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1ea      	bne.n	80051ec <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4);
 8005216:	4b78      	ldr	r3, [pc, #480]	; (80053f8 <send_DHCP_DISCOVER+0x384>)
 8005218:	78db      	ldrb	r3, [r3, #3]
 800521a:	091b      	lsrs	r3, r3, #4
 800521c:	b2da      	uxtb	r2, r3
 800521e:	4b74      	ldr	r3, [pc, #464]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 8005220:	681c      	ldr	r4, [r3, #0]
 8005222:	88bb      	ldrh	r3, [r7, #4]
 8005224:	1c59      	adds	r1, r3, #1
 8005226:	80b9      	strh	r1, [r7, #4]
 8005228:	461d      	mov	r5, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f001 f9c4 	bl	80065b8 <NibbleToHex>
 8005230:	4603      	mov	r3, r0
 8005232:	461a      	mov	r2, r3
 8005234:	1963      	adds	r3, r4, r5
 8005236:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800523a:	4b6f      	ldr	r3, [pc, #444]	; (80053f8 <send_DHCP_DISCOVER+0x384>)
 800523c:	78da      	ldrb	r2, [r3, #3]
 800523e:	4b6c      	ldr	r3, [pc, #432]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 8005240:	681c      	ldr	r4, [r3, #0]
 8005242:	88bb      	ldrh	r3, [r7, #4]
 8005244:	1c59      	adds	r1, r3, #1
 8005246:	80b9      	strh	r1, [r7, #4]
 8005248:	461d      	mov	r5, r3
 800524a:	4610      	mov	r0, r2
 800524c:	f001 f9b4 	bl	80065b8 <NibbleToHex>
 8005250:	4603      	mov	r3, r0
 8005252:	461a      	mov	r2, r3
 8005254:	1963      	adds	r3, r4, r5
 8005256:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4);
 800525a:	4b67      	ldr	r3, [pc, #412]	; (80053f8 <send_DHCP_DISCOVER+0x384>)
 800525c:	791b      	ldrb	r3, [r3, #4]
 800525e:	091b      	lsrs	r3, r3, #4
 8005260:	b2da      	uxtb	r2, r3
 8005262:	4b63      	ldr	r3, [pc, #396]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 8005264:	681c      	ldr	r4, [r3, #0]
 8005266:	88bb      	ldrh	r3, [r7, #4]
 8005268:	1c59      	adds	r1, r3, #1
 800526a:	80b9      	strh	r1, [r7, #4]
 800526c:	461d      	mov	r5, r3
 800526e:	4610      	mov	r0, r2
 8005270:	f001 f9a2 	bl	80065b8 <NibbleToHex>
 8005274:	4603      	mov	r3, r0
 8005276:	461a      	mov	r2, r3
 8005278:	1963      	adds	r3, r4, r5
 800527a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800527e:	4b5e      	ldr	r3, [pc, #376]	; (80053f8 <send_DHCP_DISCOVER+0x384>)
 8005280:	791a      	ldrb	r2, [r3, #4]
 8005282:	4b5b      	ldr	r3, [pc, #364]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 8005284:	681c      	ldr	r4, [r3, #0]
 8005286:	88bb      	ldrh	r3, [r7, #4]
 8005288:	1c59      	adds	r1, r3, #1
 800528a:	80b9      	strh	r1, [r7, #4]
 800528c:	461d      	mov	r5, r3
 800528e:	4610      	mov	r0, r2
 8005290:	f001 f992 	bl	80065b8 <NibbleToHex>
 8005294:	4603      	mov	r3, r0
 8005296:	461a      	mov	r2, r3
 8005298:	1963      	adds	r3, r4, r5
 800529a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4);
 800529e:	4b56      	ldr	r3, [pc, #344]	; (80053f8 <send_DHCP_DISCOVER+0x384>)
 80052a0:	795b      	ldrb	r3, [r3, #5]
 80052a2:	091b      	lsrs	r3, r3, #4
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	4b52      	ldr	r3, [pc, #328]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 80052a8:	681c      	ldr	r4, [r3, #0]
 80052aa:	88bb      	ldrh	r3, [r7, #4]
 80052ac:	1c59      	adds	r1, r3, #1
 80052ae:	80b9      	strh	r1, [r7, #4]
 80052b0:	461d      	mov	r5, r3
 80052b2:	4610      	mov	r0, r2
 80052b4:	f001 f980 	bl	80065b8 <NibbleToHex>
 80052b8:	4603      	mov	r3, r0
 80052ba:	461a      	mov	r2, r3
 80052bc:	1963      	adds	r3, r4, r5
 80052be:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80052c2:	4b4d      	ldr	r3, [pc, #308]	; (80053f8 <send_DHCP_DISCOVER+0x384>)
 80052c4:	795a      	ldrb	r2, [r3, #5]
 80052c6:	4b4a      	ldr	r3, [pc, #296]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 80052c8:	681c      	ldr	r4, [r3, #0]
 80052ca:	88bb      	ldrh	r3, [r7, #4]
 80052cc:	1c59      	adds	r1, r3, #1
 80052ce:	80b9      	strh	r1, [r7, #4]
 80052d0:	461d      	mov	r5, r3
 80052d2:	4610      	mov	r0, r2
 80052d4:	f001 f970 	bl	80065b8 <NibbleToHex>
 80052d8:	4603      	mov	r3, r0
 80052da:	461a      	mov	r2, r3
 80052dc:	1963      	adds	r3, r4, r5
 80052de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	b2d9      	uxtb	r1, r3
 80052e6:	4b42      	ldr	r3, [pc, #264]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	88b8      	ldrh	r0, [r7, #4]
 80052ec:	88fb      	ldrh	r3, [r7, #6]
 80052ee:	3307      	adds	r3, #7
 80052f0:	1ac3      	subs	r3, r0, r3
 80052f2:	3106      	adds	r1, #6
 80052f4:	b2c9      	uxtb	r1, r1
 80052f6:	4413      	add	r3, r2
 80052f8:	460a      	mov	r2, r1
 80052fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80052fe:	4b3c      	ldr	r3, [pc, #240]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	88bb      	ldrh	r3, [r7, #4]
 8005304:	1c59      	adds	r1, r3, #1
 8005306:	80b9      	strh	r1, [r7, #4]
 8005308:	4413      	add	r3, r2
 800530a:	2237      	movs	r2, #55	; 0x37
 800530c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8005310:	4b37      	ldr	r3, [pc, #220]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	88bb      	ldrh	r3, [r7, #4]
 8005316:	1c59      	adds	r1, r3, #1
 8005318:	80b9      	strh	r1, [r7, #4]
 800531a:	4413      	add	r3, r2
 800531c:	2206      	movs	r2, #6
 800531e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8005322:	4b33      	ldr	r3, [pc, #204]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	88bb      	ldrh	r3, [r7, #4]
 8005328:	1c59      	adds	r1, r3, #1
 800532a:	80b9      	strh	r1, [r7, #4]
 800532c:	4413      	add	r3, r2
 800532e:	2201      	movs	r2, #1
 8005330:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8005334:	4b2e      	ldr	r3, [pc, #184]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	88bb      	ldrh	r3, [r7, #4]
 800533a:	1c59      	adds	r1, r3, #1
 800533c:	80b9      	strh	r1, [r7, #4]
 800533e:	4413      	add	r3, r2
 8005340:	2203      	movs	r2, #3
 8005342:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8005346:	4b2a      	ldr	r3, [pc, #168]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	88bb      	ldrh	r3, [r7, #4]
 800534c:	1c59      	adds	r1, r3, #1
 800534e:	80b9      	strh	r1, [r7, #4]
 8005350:	4413      	add	r3, r2
 8005352:	2206      	movs	r2, #6
 8005354:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8005358:	4b25      	ldr	r3, [pc, #148]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	88bb      	ldrh	r3, [r7, #4]
 800535e:	1c59      	adds	r1, r3, #1
 8005360:	80b9      	strh	r1, [r7, #4]
 8005362:	4413      	add	r3, r2
 8005364:	220f      	movs	r2, #15
 8005366:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800536a:	4b21      	ldr	r3, [pc, #132]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	88bb      	ldrh	r3, [r7, #4]
 8005370:	1c59      	adds	r1, r3, #1
 8005372:	80b9      	strh	r1, [r7, #4]
 8005374:	4413      	add	r3, r2
 8005376:	223a      	movs	r2, #58	; 0x3a
 8005378:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 800537c:	4b1c      	ldr	r3, [pc, #112]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	88bb      	ldrh	r3, [r7, #4]
 8005382:	1c59      	adds	r1, r3, #1
 8005384:	80b9      	strh	r1, [r7, #4]
 8005386:	4413      	add	r3, r2
 8005388:	223b      	movs	r2, #59	; 0x3b
 800538a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800538e:	4b18      	ldr	r3, [pc, #96]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	88bb      	ldrh	r3, [r7, #4]
 8005394:	1c59      	adds	r1, r3, #1
 8005396:	80b9      	strh	r1, [r7, #4]
 8005398:	4413      	add	r3, r2
 800539a:	22ff      	movs	r2, #255	; 0xff
 800539c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80053a0:	88bb      	ldrh	r3, [r7, #4]
 80053a2:	80fb      	strh	r3, [r7, #6]
 80053a4:	e009      	b.n	80053ba <send_DHCP_DISCOVER+0x346>
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	4413      	add	r3, r2
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80053b4:	88fb      	ldrh	r3, [r7, #6]
 80053b6:	3301      	adds	r3, #1
 80053b8:	80fb      	strh	r3, [r7, #6]
 80053ba:	88fb      	ldrh	r3, [r7, #6]
 80053bc:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80053c0:	d3f1      	bcc.n	80053a6 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 80053c2:	23ff      	movs	r3, #255	; 0xff
 80053c4:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 80053c6:	23ff      	movs	r3, #255	; 0xff
 80053c8:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 80053ca:	23ff      	movs	r3, #255	; 0xff
 80053cc:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 80053ce:	23ff      	movs	r3, #255	; 0xff
 80053d0:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80053d2:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <send_DHCP_DISCOVER+0x388>)
 80053d4:	7818      	ldrb	r0, [r3, #0]
 80053d6:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <send_DHCP_DISCOVER+0x37c>)
 80053d8:	6819      	ldr	r1, [r3, #0]
 80053da:	463b      	mov	r3, r7
 80053dc:	2243      	movs	r2, #67	; 0x43
 80053de:	9200      	str	r2, [sp, #0]
 80053e0:	f44f 7209 	mov.w	r2, #548	; 0x224
 80053e4:	f001 fa84 	bl	80068f0 <sendto>
}
 80053e8:	bf00      	nop
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bdb0      	pop	{r4, r5, r7, pc}
 80053f0:	20004208 	.word	0x20004208
 80053f4:	20000030 	.word	0x20000030
 80053f8:	2000420c 	.word	0x2000420c
 80053fc:	200041dc 	.word	0x200041dc

08005400 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8005400:	b5b0      	push	{r4, r5, r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8005406:	2300      	movs	r3, #0
 8005408:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 800540a:	f7ff fd3d 	bl	8004e88 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 800540e:	4b1b      	ldr	r3, [pc, #108]	; (800547c <send_DHCP_REQUEST+0x7c>)
 8005410:	f993 3000 	ldrsb.w	r3, [r3]
 8005414:	2b03      	cmp	r3, #3
 8005416:	d004      	beq.n	8005422 <send_DHCP_REQUEST+0x22>
 8005418:	4b18      	ldr	r3, [pc, #96]	; (800547c <send_DHCP_REQUEST+0x7c>)
 800541a:	f993 3000 	ldrsb.w	r3, [r3]
 800541e:	2b04      	cmp	r3, #4
 8005420:	d134      	bne.n	800548c <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8005422:	4b17      	ldr	r3, [pc, #92]	; (8005480 <send_DHCP_REQUEST+0x80>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	330a      	adds	r3, #10
 8005428:	2200      	movs	r2, #0
 800542a:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 800542c:	4b14      	ldr	r3, [pc, #80]	; (8005480 <send_DHCP_REQUEST+0x80>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	330a      	adds	r3, #10
 8005432:	3301      	adds	r3, #1
 8005434:	2200      	movs	r2, #0
 8005436:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8005438:	4b11      	ldr	r3, [pc, #68]	; (8005480 <send_DHCP_REQUEST+0x80>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a11      	ldr	r2, [pc, #68]	; (8005484 <send_DHCP_REQUEST+0x84>)
 800543e:	7812      	ldrb	r2, [r2, #0]
 8005440:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8005442:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <send_DHCP_REQUEST+0x80>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a0f      	ldr	r2, [pc, #60]	; (8005484 <send_DHCP_REQUEST+0x84>)
 8005448:	7852      	ldrb	r2, [r2, #1]
 800544a:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 800544c:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <send_DHCP_REQUEST+0x80>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a0c      	ldr	r2, [pc, #48]	; (8005484 <send_DHCP_REQUEST+0x84>)
 8005452:	7892      	ldrb	r2, [r2, #2]
 8005454:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <send_DHCP_REQUEST+0x80>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a0a      	ldr	r2, [pc, #40]	; (8005484 <send_DHCP_REQUEST+0x84>)
 800545c:	78d2      	ldrb	r2, [r2, #3]
 800545e:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8005460:	4b09      	ldr	r3, [pc, #36]	; (8005488 <send_DHCP_REQUEST+0x88>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8005466:	4b08      	ldr	r3, [pc, #32]	; (8005488 <send_DHCP_REQUEST+0x88>)
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 800546c:	4b06      	ldr	r3, [pc, #24]	; (8005488 <send_DHCP_REQUEST+0x88>)
 800546e:	789b      	ldrb	r3, [r3, #2]
 8005470:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <send_DHCP_REQUEST+0x88>)
 8005474:	78db      	ldrb	r3, [r3, #3]
 8005476:	71fb      	strb	r3, [r7, #7]
 8005478:	e010      	b.n	800549c <send_DHCP_REQUEST+0x9c>
 800547a:	bf00      	nop
 800547c:	200041fc 	.word	0x200041fc
 8005480:	20004208 	.word	0x20004208
 8005484:	200041ec 	.word	0x200041ec
 8005488:	200041e0 	.word	0x200041e0
   }
   else
   {
   	ip[0] = 255;
 800548c:	23ff      	movs	r3, #255	; 0xff
 800548e:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8005490:	23ff      	movs	r3, #255	; 0xff
 8005492:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8005494:	23ff      	movs	r3, #255	; 0xff
 8005496:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8005498:	23ff      	movs	r3, #255	; 0xff
 800549a:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800549c:	2304      	movs	r3, #4
 800549e:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80054a0:	4b8d      	ldr	r3, [pc, #564]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	897b      	ldrh	r3, [r7, #10]
 80054a6:	1c59      	adds	r1, r3, #1
 80054a8:	8179      	strh	r1, [r7, #10]
 80054aa:	4413      	add	r3, r2
 80054ac:	2235      	movs	r2, #53	; 0x35
 80054ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80054b2:	4b89      	ldr	r3, [pc, #548]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	897b      	ldrh	r3, [r7, #10]
 80054b8:	1c59      	adds	r1, r3, #1
 80054ba:	8179      	strh	r1, [r7, #10]
 80054bc:	4413      	add	r3, r2
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 80054c4:	4b84      	ldr	r3, [pc, #528]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	897b      	ldrh	r3, [r7, #10]
 80054ca:	1c59      	adds	r1, r3, #1
 80054cc:	8179      	strh	r1, [r7, #10]
 80054ce:	4413      	add	r3, r2
 80054d0:	2203      	movs	r2, #3
 80054d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80054d6:	4b80      	ldr	r3, [pc, #512]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	897b      	ldrh	r3, [r7, #10]
 80054dc:	1c59      	adds	r1, r3, #1
 80054de:	8179      	strh	r1, [r7, #10]
 80054e0:	4413      	add	r3, r2
 80054e2:	223d      	movs	r2, #61	; 0x3d
 80054e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80054e8:	4b7b      	ldr	r3, [pc, #492]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	897b      	ldrh	r3, [r7, #10]
 80054ee:	1c59      	adds	r1, r3, #1
 80054f0:	8179      	strh	r1, [r7, #10]
 80054f2:	4413      	add	r3, r2
 80054f4:	2207      	movs	r2, #7
 80054f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80054fa:	4b77      	ldr	r3, [pc, #476]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	897b      	ldrh	r3, [r7, #10]
 8005500:	1c59      	adds	r1, r3, #1
 8005502:	8179      	strh	r1, [r7, #10]
 8005504:	4413      	add	r3, r2
 8005506:	2201      	movs	r2, #1
 8005508:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800550c:	4b72      	ldr	r3, [pc, #456]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	897b      	ldrh	r3, [r7, #10]
 8005512:	1c59      	adds	r1, r3, #1
 8005514:	8179      	strh	r1, [r7, #10]
 8005516:	4618      	mov	r0, r3
 8005518:	4b70      	ldr	r3, [pc, #448]	; (80056dc <send_DHCP_REQUEST+0x2dc>)
 800551a:	7819      	ldrb	r1, [r3, #0]
 800551c:	1813      	adds	r3, r2, r0
 800551e:	460a      	mov	r2, r1
 8005520:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8005524:	4b6c      	ldr	r3, [pc, #432]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	897b      	ldrh	r3, [r7, #10]
 800552a:	1c59      	adds	r1, r3, #1
 800552c:	8179      	strh	r1, [r7, #10]
 800552e:	4618      	mov	r0, r3
 8005530:	4b6a      	ldr	r3, [pc, #424]	; (80056dc <send_DHCP_REQUEST+0x2dc>)
 8005532:	7859      	ldrb	r1, [r3, #1]
 8005534:	1813      	adds	r3, r2, r0
 8005536:	460a      	mov	r2, r1
 8005538:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800553c:	4b66      	ldr	r3, [pc, #408]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	897b      	ldrh	r3, [r7, #10]
 8005542:	1c59      	adds	r1, r3, #1
 8005544:	8179      	strh	r1, [r7, #10]
 8005546:	4618      	mov	r0, r3
 8005548:	4b64      	ldr	r3, [pc, #400]	; (80056dc <send_DHCP_REQUEST+0x2dc>)
 800554a:	7899      	ldrb	r1, [r3, #2]
 800554c:	1813      	adds	r3, r2, r0
 800554e:	460a      	mov	r2, r1
 8005550:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8005554:	4b60      	ldr	r3, [pc, #384]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	897b      	ldrh	r3, [r7, #10]
 800555a:	1c59      	adds	r1, r3, #1
 800555c:	8179      	strh	r1, [r7, #10]
 800555e:	4618      	mov	r0, r3
 8005560:	4b5e      	ldr	r3, [pc, #376]	; (80056dc <send_DHCP_REQUEST+0x2dc>)
 8005562:	78d9      	ldrb	r1, [r3, #3]
 8005564:	1813      	adds	r3, r2, r0
 8005566:	460a      	mov	r2, r1
 8005568:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800556c:	4b5a      	ldr	r3, [pc, #360]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	897b      	ldrh	r3, [r7, #10]
 8005572:	1c59      	adds	r1, r3, #1
 8005574:	8179      	strh	r1, [r7, #10]
 8005576:	4618      	mov	r0, r3
 8005578:	4b58      	ldr	r3, [pc, #352]	; (80056dc <send_DHCP_REQUEST+0x2dc>)
 800557a:	7919      	ldrb	r1, [r3, #4]
 800557c:	1813      	adds	r3, r2, r0
 800557e:	460a      	mov	r2, r1
 8005580:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8005584:	4b54      	ldr	r3, [pc, #336]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	897b      	ldrh	r3, [r7, #10]
 800558a:	1c59      	adds	r1, r3, #1
 800558c:	8179      	strh	r1, [r7, #10]
 800558e:	4618      	mov	r0, r3
 8005590:	4b52      	ldr	r3, [pc, #328]	; (80056dc <send_DHCP_REQUEST+0x2dc>)
 8005592:	7959      	ldrb	r1, [r3, #5]
 8005594:	1813      	adds	r3, r2, r0
 8005596:	460a      	mov	r2, r1
 8005598:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 800559c:	79fb      	ldrb	r3, [r7, #7]
 800559e:	2bff      	cmp	r3, #255	; 0xff
 80055a0:	f040 8084 	bne.w	80056ac <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80055a4:	4b4c      	ldr	r3, [pc, #304]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	897b      	ldrh	r3, [r7, #10]
 80055aa:	1c59      	adds	r1, r3, #1
 80055ac:	8179      	strh	r1, [r7, #10]
 80055ae:	4413      	add	r3, r2
 80055b0:	2232      	movs	r2, #50	; 0x32
 80055b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80055b6:	4b48      	ldr	r3, [pc, #288]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	897b      	ldrh	r3, [r7, #10]
 80055bc:	1c59      	adds	r1, r3, #1
 80055be:	8179      	strh	r1, [r7, #10]
 80055c0:	4413      	add	r3, r2
 80055c2:	2204      	movs	r2, #4
 80055c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80055c8:	4b43      	ldr	r3, [pc, #268]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	897b      	ldrh	r3, [r7, #10]
 80055ce:	1c59      	adds	r1, r3, #1
 80055d0:	8179      	strh	r1, [r7, #10]
 80055d2:	4618      	mov	r0, r3
 80055d4:	4b42      	ldr	r3, [pc, #264]	; (80056e0 <send_DHCP_REQUEST+0x2e0>)
 80055d6:	7819      	ldrb	r1, [r3, #0]
 80055d8:	1813      	adds	r3, r2, r0
 80055da:	460a      	mov	r2, r1
 80055dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80055e0:	4b3d      	ldr	r3, [pc, #244]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	897b      	ldrh	r3, [r7, #10]
 80055e6:	1c59      	adds	r1, r3, #1
 80055e8:	8179      	strh	r1, [r7, #10]
 80055ea:	4618      	mov	r0, r3
 80055ec:	4b3c      	ldr	r3, [pc, #240]	; (80056e0 <send_DHCP_REQUEST+0x2e0>)
 80055ee:	7859      	ldrb	r1, [r3, #1]
 80055f0:	1813      	adds	r3, r2, r0
 80055f2:	460a      	mov	r2, r1
 80055f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80055f8:	4b37      	ldr	r3, [pc, #220]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	897b      	ldrh	r3, [r7, #10]
 80055fe:	1c59      	adds	r1, r3, #1
 8005600:	8179      	strh	r1, [r7, #10]
 8005602:	4618      	mov	r0, r3
 8005604:	4b36      	ldr	r3, [pc, #216]	; (80056e0 <send_DHCP_REQUEST+0x2e0>)
 8005606:	7899      	ldrb	r1, [r3, #2]
 8005608:	1813      	adds	r3, r2, r0
 800560a:	460a      	mov	r2, r1
 800560c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8005610:	4b31      	ldr	r3, [pc, #196]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	897b      	ldrh	r3, [r7, #10]
 8005616:	1c59      	adds	r1, r3, #1
 8005618:	8179      	strh	r1, [r7, #10]
 800561a:	4618      	mov	r0, r3
 800561c:	4b30      	ldr	r3, [pc, #192]	; (80056e0 <send_DHCP_REQUEST+0x2e0>)
 800561e:	78d9      	ldrb	r1, [r3, #3]
 8005620:	1813      	adds	r3, r2, r0
 8005622:	460a      	mov	r2, r1
 8005624:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8005628:	4b2b      	ldr	r3, [pc, #172]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	897b      	ldrh	r3, [r7, #10]
 800562e:	1c59      	adds	r1, r3, #1
 8005630:	8179      	strh	r1, [r7, #10]
 8005632:	4413      	add	r3, r2
 8005634:	2236      	movs	r2, #54	; 0x36
 8005636:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800563a:	4b27      	ldr	r3, [pc, #156]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	897b      	ldrh	r3, [r7, #10]
 8005640:	1c59      	adds	r1, r3, #1
 8005642:	8179      	strh	r1, [r7, #10]
 8005644:	4413      	add	r3, r2
 8005646:	2204      	movs	r2, #4
 8005648:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800564c:	4b22      	ldr	r3, [pc, #136]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	897b      	ldrh	r3, [r7, #10]
 8005652:	1c59      	adds	r1, r3, #1
 8005654:	8179      	strh	r1, [r7, #10]
 8005656:	4618      	mov	r0, r3
 8005658:	4b22      	ldr	r3, [pc, #136]	; (80056e4 <send_DHCP_REQUEST+0x2e4>)
 800565a:	7819      	ldrb	r1, [r3, #0]
 800565c:	1813      	adds	r3, r2, r0
 800565e:	460a      	mov	r2, r1
 8005660:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8005664:	4b1c      	ldr	r3, [pc, #112]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	897b      	ldrh	r3, [r7, #10]
 800566a:	1c59      	adds	r1, r3, #1
 800566c:	8179      	strh	r1, [r7, #10]
 800566e:	4618      	mov	r0, r3
 8005670:	4b1c      	ldr	r3, [pc, #112]	; (80056e4 <send_DHCP_REQUEST+0x2e4>)
 8005672:	7859      	ldrb	r1, [r3, #1]
 8005674:	1813      	adds	r3, r2, r0
 8005676:	460a      	mov	r2, r1
 8005678:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 800567c:	4b16      	ldr	r3, [pc, #88]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	897b      	ldrh	r3, [r7, #10]
 8005682:	1c59      	adds	r1, r3, #1
 8005684:	8179      	strh	r1, [r7, #10]
 8005686:	4618      	mov	r0, r3
 8005688:	4b16      	ldr	r3, [pc, #88]	; (80056e4 <send_DHCP_REQUEST+0x2e4>)
 800568a:	7899      	ldrb	r1, [r3, #2]
 800568c:	1813      	adds	r3, r2, r0
 800568e:	460a      	mov	r2, r1
 8005690:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8005694:	4b10      	ldr	r3, [pc, #64]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	897b      	ldrh	r3, [r7, #10]
 800569a:	1c59      	adds	r1, r3, #1
 800569c:	8179      	strh	r1, [r7, #10]
 800569e:	4618      	mov	r0, r3
 80056a0:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <send_DHCP_REQUEST+0x2e4>)
 80056a2:	78d9      	ldrb	r1, [r3, #3]
 80056a4:	1813      	adds	r3, r2, r0
 80056a6:	460a      	mov	r2, r1
 80056a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80056ac:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	897b      	ldrh	r3, [r7, #10]
 80056b2:	1c59      	adds	r1, r3, #1
 80056b4:	8179      	strh	r1, [r7, #10]
 80056b6:	4413      	add	r3, r2
 80056b8:	220c      	movs	r2, #12
 80056ba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 80056be:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <send_DHCP_REQUEST+0x2d8>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	897b      	ldrh	r3, [r7, #10]
 80056c4:	1c59      	adds	r1, r3, #1
 80056c6:	8179      	strh	r1, [r7, #10]
 80056c8:	4413      	add	r3, r2
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	e019      	b.n	800570a <send_DHCP_REQUEST+0x30a>
 80056d6:	bf00      	nop
 80056d8:	20004208 	.word	0x20004208
 80056dc:	2000420c 	.word	0x2000420c
 80056e0:	200041ec 	.word	0x200041ec
 80056e4:	200041e0 	.word	0x200041e0
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80056e8:	4b86      	ldr	r3, [pc, #536]	; (8005904 <send_DHCP_REQUEST+0x504>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	897b      	ldrh	r3, [r7, #10]
 80056ee:	1c59      	adds	r1, r3, #1
 80056f0:	8179      	strh	r1, [r7, #10]
 80056f2:	4618      	mov	r0, r3
 80056f4:	4984      	ldr	r1, [pc, #528]	; (8005908 <send_DHCP_REQUEST+0x508>)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	440b      	add	r3, r1
 80056fa:	7819      	ldrb	r1, [r3, #0]
 80056fc:	1813      	adds	r3, r2, r0
 80056fe:	460a      	mov	r2, r1
 8005700:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3301      	adds	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	4a7f      	ldr	r2, [pc, #508]	; (8005908 <send_DHCP_REQUEST+0x508>)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e8      	bne.n	80056e8 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8005716:	4b7d      	ldr	r3, [pc, #500]	; (800590c <send_DHCP_REQUEST+0x50c>)
 8005718:	78db      	ldrb	r3, [r3, #3]
 800571a:	091b      	lsrs	r3, r3, #4
 800571c:	b2da      	uxtb	r2, r3
 800571e:	4b79      	ldr	r3, [pc, #484]	; (8005904 <send_DHCP_REQUEST+0x504>)
 8005720:	681c      	ldr	r4, [r3, #0]
 8005722:	897b      	ldrh	r3, [r7, #10]
 8005724:	1c59      	adds	r1, r3, #1
 8005726:	8179      	strh	r1, [r7, #10]
 8005728:	461d      	mov	r5, r3
 800572a:	4610      	mov	r0, r2
 800572c:	f000 ff44 	bl	80065b8 <NibbleToHex>
 8005730:	4603      	mov	r3, r0
 8005732:	461a      	mov	r2, r3
 8005734:	1963      	adds	r3, r4, r5
 8005736:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800573a:	4b74      	ldr	r3, [pc, #464]	; (800590c <send_DHCP_REQUEST+0x50c>)
 800573c:	78da      	ldrb	r2, [r3, #3]
 800573e:	4b71      	ldr	r3, [pc, #452]	; (8005904 <send_DHCP_REQUEST+0x504>)
 8005740:	681c      	ldr	r4, [r3, #0]
 8005742:	897b      	ldrh	r3, [r7, #10]
 8005744:	1c59      	adds	r1, r3, #1
 8005746:	8179      	strh	r1, [r7, #10]
 8005748:	461d      	mov	r5, r3
 800574a:	4610      	mov	r0, r2
 800574c:	f000 ff34 	bl	80065b8 <NibbleToHex>
 8005750:	4603      	mov	r3, r0
 8005752:	461a      	mov	r2, r3
 8005754:	1963      	adds	r3, r4, r5
 8005756:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800575a:	4b6c      	ldr	r3, [pc, #432]	; (800590c <send_DHCP_REQUEST+0x50c>)
 800575c:	791b      	ldrb	r3, [r3, #4]
 800575e:	091b      	lsrs	r3, r3, #4
 8005760:	b2da      	uxtb	r2, r3
 8005762:	4b68      	ldr	r3, [pc, #416]	; (8005904 <send_DHCP_REQUEST+0x504>)
 8005764:	681c      	ldr	r4, [r3, #0]
 8005766:	897b      	ldrh	r3, [r7, #10]
 8005768:	1c59      	adds	r1, r3, #1
 800576a:	8179      	strh	r1, [r7, #10]
 800576c:	461d      	mov	r5, r3
 800576e:	4610      	mov	r0, r2
 8005770:	f000 ff22 	bl	80065b8 <NibbleToHex>
 8005774:	4603      	mov	r3, r0
 8005776:	461a      	mov	r2, r3
 8005778:	1963      	adds	r3, r4, r5
 800577a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800577e:	4b63      	ldr	r3, [pc, #396]	; (800590c <send_DHCP_REQUEST+0x50c>)
 8005780:	791a      	ldrb	r2, [r3, #4]
 8005782:	4b60      	ldr	r3, [pc, #384]	; (8005904 <send_DHCP_REQUEST+0x504>)
 8005784:	681c      	ldr	r4, [r3, #0]
 8005786:	897b      	ldrh	r3, [r7, #10]
 8005788:	1c59      	adds	r1, r3, #1
 800578a:	8179      	strh	r1, [r7, #10]
 800578c:	461d      	mov	r5, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f000 ff12 	bl	80065b8 <NibbleToHex>
 8005794:	4603      	mov	r3, r0
 8005796:	461a      	mov	r2, r3
 8005798:	1963      	adds	r3, r4, r5
 800579a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800579e:	4b5b      	ldr	r3, [pc, #364]	; (800590c <send_DHCP_REQUEST+0x50c>)
 80057a0:	795b      	ldrb	r3, [r3, #5]
 80057a2:	091b      	lsrs	r3, r3, #4
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	4b57      	ldr	r3, [pc, #348]	; (8005904 <send_DHCP_REQUEST+0x504>)
 80057a8:	681c      	ldr	r4, [r3, #0]
 80057aa:	897b      	ldrh	r3, [r7, #10]
 80057ac:	1c59      	adds	r1, r3, #1
 80057ae:	8179      	strh	r1, [r7, #10]
 80057b0:	461d      	mov	r5, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f000 ff00 	bl	80065b8 <NibbleToHex>
 80057b8:	4603      	mov	r3, r0
 80057ba:	461a      	mov	r2, r3
 80057bc:	1963      	adds	r3, r4, r5
 80057be:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80057c2:	4b52      	ldr	r3, [pc, #328]	; (800590c <send_DHCP_REQUEST+0x50c>)
 80057c4:	795a      	ldrb	r2, [r3, #5]
 80057c6:	4b4f      	ldr	r3, [pc, #316]	; (8005904 <send_DHCP_REQUEST+0x504>)
 80057c8:	681c      	ldr	r4, [r3, #0]
 80057ca:	897b      	ldrh	r3, [r7, #10]
 80057cc:	1c59      	adds	r1, r3, #1
 80057ce:	8179      	strh	r1, [r7, #10]
 80057d0:	461d      	mov	r5, r3
 80057d2:	4610      	mov	r0, r2
 80057d4:	f000 fef0 	bl	80065b8 <NibbleToHex>
 80057d8:	4603      	mov	r3, r0
 80057da:	461a      	mov	r2, r3
 80057dc:	1963      	adds	r3, r4, r5
 80057de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	b2d9      	uxtb	r1, r3
 80057e6:	4b47      	ldr	r3, [pc, #284]	; (8005904 <send_DHCP_REQUEST+0x504>)
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	8978      	ldrh	r0, [r7, #10]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3307      	adds	r3, #7
 80057f0:	1ac3      	subs	r3, r0, r3
 80057f2:	3106      	adds	r1, #6
 80057f4:	b2c9      	uxtb	r1, r1
 80057f6:	4413      	add	r3, r2
 80057f8:	460a      	mov	r2, r1
 80057fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80057fe:	4b41      	ldr	r3, [pc, #260]	; (8005904 <send_DHCP_REQUEST+0x504>)
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	897b      	ldrh	r3, [r7, #10]
 8005804:	1c59      	adds	r1, r3, #1
 8005806:	8179      	strh	r1, [r7, #10]
 8005808:	4413      	add	r3, r2
 800580a:	2237      	movs	r2, #55	; 0x37
 800580c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8005810:	4b3c      	ldr	r3, [pc, #240]	; (8005904 <send_DHCP_REQUEST+0x504>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	897b      	ldrh	r3, [r7, #10]
 8005816:	1c59      	adds	r1, r3, #1
 8005818:	8179      	strh	r1, [r7, #10]
 800581a:	4413      	add	r3, r2
 800581c:	2208      	movs	r2, #8
 800581e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8005822:	4b38      	ldr	r3, [pc, #224]	; (8005904 <send_DHCP_REQUEST+0x504>)
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	897b      	ldrh	r3, [r7, #10]
 8005828:	1c59      	adds	r1, r3, #1
 800582a:	8179      	strh	r1, [r7, #10]
 800582c:	4413      	add	r3, r2
 800582e:	2201      	movs	r2, #1
 8005830:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8005834:	4b33      	ldr	r3, [pc, #204]	; (8005904 <send_DHCP_REQUEST+0x504>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	897b      	ldrh	r3, [r7, #10]
 800583a:	1c59      	adds	r1, r3, #1
 800583c:	8179      	strh	r1, [r7, #10]
 800583e:	4413      	add	r3, r2
 8005840:	2203      	movs	r2, #3
 8005842:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8005846:	4b2f      	ldr	r3, [pc, #188]	; (8005904 <send_DHCP_REQUEST+0x504>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	897b      	ldrh	r3, [r7, #10]
 800584c:	1c59      	adds	r1, r3, #1
 800584e:	8179      	strh	r1, [r7, #10]
 8005850:	4413      	add	r3, r2
 8005852:	2206      	movs	r2, #6
 8005854:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8005858:	4b2a      	ldr	r3, [pc, #168]	; (8005904 <send_DHCP_REQUEST+0x504>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	897b      	ldrh	r3, [r7, #10]
 800585e:	1c59      	adds	r1, r3, #1
 8005860:	8179      	strh	r1, [r7, #10]
 8005862:	4413      	add	r3, r2
 8005864:	220f      	movs	r2, #15
 8005866:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800586a:	4b26      	ldr	r3, [pc, #152]	; (8005904 <send_DHCP_REQUEST+0x504>)
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	897b      	ldrh	r3, [r7, #10]
 8005870:	1c59      	adds	r1, r3, #1
 8005872:	8179      	strh	r1, [r7, #10]
 8005874:	4413      	add	r3, r2
 8005876:	223a      	movs	r2, #58	; 0x3a
 8005878:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 800587c:	4b21      	ldr	r3, [pc, #132]	; (8005904 <send_DHCP_REQUEST+0x504>)
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	897b      	ldrh	r3, [r7, #10]
 8005882:	1c59      	adds	r1, r3, #1
 8005884:	8179      	strh	r1, [r7, #10]
 8005886:	4413      	add	r3, r2
 8005888:	223b      	movs	r2, #59	; 0x3b
 800588a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 800588e:	4b1d      	ldr	r3, [pc, #116]	; (8005904 <send_DHCP_REQUEST+0x504>)
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	897b      	ldrh	r3, [r7, #10]
 8005894:	1c59      	adds	r1, r3, #1
 8005896:	8179      	strh	r1, [r7, #10]
 8005898:	4413      	add	r3, r2
 800589a:	221f      	movs	r2, #31
 800589c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 80058a0:	4b18      	ldr	r3, [pc, #96]	; (8005904 <send_DHCP_REQUEST+0x504>)
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	897b      	ldrh	r3, [r7, #10]
 80058a6:	1c59      	adds	r1, r3, #1
 80058a8:	8179      	strh	r1, [r7, #10]
 80058aa:	4413      	add	r3, r2
 80058ac:	2221      	movs	r2, #33	; 0x21
 80058ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80058b2:	4b14      	ldr	r3, [pc, #80]	; (8005904 <send_DHCP_REQUEST+0x504>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	897b      	ldrh	r3, [r7, #10]
 80058b8:	1c59      	adds	r1, r3, #1
 80058ba:	8179      	strh	r1, [r7, #10]
 80058bc:	4413      	add	r3, r2
 80058be:	22ff      	movs	r2, #255	; 0xff
 80058c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80058c4:	897b      	ldrh	r3, [r7, #10]
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	e009      	b.n	80058de <send_DHCP_REQUEST+0x4de>
 80058ca:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <send_DHCP_REQUEST+0x504>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	33ec      	adds	r3, #236	; 0xec
 80058d4:	2200      	movs	r2, #0
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3301      	adds	r3, #1
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80058e4:	dbf1      	blt.n	80058ca <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80058e6:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <send_DHCP_REQUEST+0x510>)
 80058e8:	7818      	ldrb	r0, [r3, #0]
 80058ea:	4b06      	ldr	r3, [pc, #24]	; (8005904 <send_DHCP_REQUEST+0x504>)
 80058ec:	6819      	ldr	r1, [r3, #0]
 80058ee:	1d3b      	adds	r3, r7, #4
 80058f0:	2243      	movs	r2, #67	; 0x43
 80058f2:	9200      	str	r2, [sp, #0]
 80058f4:	f44f 7209 	mov.w	r2, #548	; 0x224
 80058f8:	f000 fffa 	bl	80068f0 <sendto>

}
 80058fc:	bf00      	nop
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bdb0      	pop	{r4, r5, r7, pc}
 8005904:	20004208 	.word	0x20004208
 8005908:	20000030 	.word	0x20000030
 800590c:	2000420c 	.word	0x2000420c
 8005910:	200041dc 	.word	0x200041dc

08005914 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800591a:	2300      	movs	r3, #0
 800591c:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 800591e:	f7ff fab3 	bl	8004e88 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8005922:	2304      	movs	r3, #4
 8005924:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8005926:	4b9f      	ldr	r3, [pc, #636]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	330a      	adds	r3, #10
 800592c:	2200      	movs	r2, #0
 800592e:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8005930:	4b9c      	ldr	r3, [pc, #624]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330a      	adds	r3, #10
 8005936:	3301      	adds	r3, #1
 8005938:	2200      	movs	r2, #0
 800593a:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800593c:	4b99      	ldr	r3, [pc, #612]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	897b      	ldrh	r3, [r7, #10]
 8005942:	1c59      	adds	r1, r3, #1
 8005944:	8179      	strh	r1, [r7, #10]
 8005946:	4413      	add	r3, r2
 8005948:	2235      	movs	r2, #53	; 0x35
 800594a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800594e:	4b95      	ldr	r3, [pc, #596]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	897b      	ldrh	r3, [r7, #10]
 8005954:	1c59      	adds	r1, r3, #1
 8005956:	8179      	strh	r1, [r7, #10]
 8005958:	4413      	add	r3, r2
 800595a:	2201      	movs	r2, #1
 800595c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8005960:	4b90      	ldr	r3, [pc, #576]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	897b      	ldrh	r3, [r7, #10]
 8005966:	1c59      	adds	r1, r3, #1
 8005968:	8179      	strh	r1, [r7, #10]
 800596a:	4413      	add	r3, r2
 800596c:	2204      	movs	r2, #4
 800596e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8005972:	4b8c      	ldr	r3, [pc, #560]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	897b      	ldrh	r3, [r7, #10]
 8005978:	1c59      	adds	r1, r3, #1
 800597a:	8179      	strh	r1, [r7, #10]
 800597c:	4413      	add	r3, r2
 800597e:	223d      	movs	r2, #61	; 0x3d
 8005980:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8005984:	4b87      	ldr	r3, [pc, #540]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	897b      	ldrh	r3, [r7, #10]
 800598a:	1c59      	adds	r1, r3, #1
 800598c:	8179      	strh	r1, [r7, #10]
 800598e:	4413      	add	r3, r2
 8005990:	2207      	movs	r2, #7
 8005992:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8005996:	4b83      	ldr	r3, [pc, #524]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	897b      	ldrh	r3, [r7, #10]
 800599c:	1c59      	adds	r1, r3, #1
 800599e:	8179      	strh	r1, [r7, #10]
 80059a0:	4413      	add	r3, r2
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80059a8:	4b7e      	ldr	r3, [pc, #504]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	897b      	ldrh	r3, [r7, #10]
 80059ae:	1c59      	adds	r1, r3, #1
 80059b0:	8179      	strh	r1, [r7, #10]
 80059b2:	4618      	mov	r0, r3
 80059b4:	4b7c      	ldr	r3, [pc, #496]	; (8005ba8 <send_DHCP_DECLINE+0x294>)
 80059b6:	7819      	ldrb	r1, [r3, #0]
 80059b8:	1813      	adds	r3, r2, r0
 80059ba:	460a      	mov	r2, r1
 80059bc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80059c0:	4b78      	ldr	r3, [pc, #480]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	897b      	ldrh	r3, [r7, #10]
 80059c6:	1c59      	adds	r1, r3, #1
 80059c8:	8179      	strh	r1, [r7, #10]
 80059ca:	4618      	mov	r0, r3
 80059cc:	4b76      	ldr	r3, [pc, #472]	; (8005ba8 <send_DHCP_DECLINE+0x294>)
 80059ce:	7859      	ldrb	r1, [r3, #1]
 80059d0:	1813      	adds	r3, r2, r0
 80059d2:	460a      	mov	r2, r1
 80059d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80059d8:	4b72      	ldr	r3, [pc, #456]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	897b      	ldrh	r3, [r7, #10]
 80059de:	1c59      	adds	r1, r3, #1
 80059e0:	8179      	strh	r1, [r7, #10]
 80059e2:	4618      	mov	r0, r3
 80059e4:	4b70      	ldr	r3, [pc, #448]	; (8005ba8 <send_DHCP_DECLINE+0x294>)
 80059e6:	7899      	ldrb	r1, [r3, #2]
 80059e8:	1813      	adds	r3, r2, r0
 80059ea:	460a      	mov	r2, r1
 80059ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80059f0:	4b6c      	ldr	r3, [pc, #432]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	897b      	ldrh	r3, [r7, #10]
 80059f6:	1c59      	adds	r1, r3, #1
 80059f8:	8179      	strh	r1, [r7, #10]
 80059fa:	4618      	mov	r0, r3
 80059fc:	4b6a      	ldr	r3, [pc, #424]	; (8005ba8 <send_DHCP_DECLINE+0x294>)
 80059fe:	78d9      	ldrb	r1, [r3, #3]
 8005a00:	1813      	adds	r3, r2, r0
 8005a02:	460a      	mov	r2, r1
 8005a04:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8005a08:	4b66      	ldr	r3, [pc, #408]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	897b      	ldrh	r3, [r7, #10]
 8005a0e:	1c59      	adds	r1, r3, #1
 8005a10:	8179      	strh	r1, [r7, #10]
 8005a12:	4618      	mov	r0, r3
 8005a14:	4b64      	ldr	r3, [pc, #400]	; (8005ba8 <send_DHCP_DECLINE+0x294>)
 8005a16:	7919      	ldrb	r1, [r3, #4]
 8005a18:	1813      	adds	r3, r2, r0
 8005a1a:	460a      	mov	r2, r1
 8005a1c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8005a20:	4b60      	ldr	r3, [pc, #384]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	897b      	ldrh	r3, [r7, #10]
 8005a26:	1c59      	adds	r1, r3, #1
 8005a28:	8179      	strh	r1, [r7, #10]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	4b5e      	ldr	r3, [pc, #376]	; (8005ba8 <send_DHCP_DECLINE+0x294>)
 8005a2e:	7959      	ldrb	r1, [r3, #5]
 8005a30:	1813      	adds	r3, r2, r0
 8005a32:	460a      	mov	r2, r1
 8005a34:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8005a38:	4b5a      	ldr	r3, [pc, #360]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	897b      	ldrh	r3, [r7, #10]
 8005a3e:	1c59      	adds	r1, r3, #1
 8005a40:	8179      	strh	r1, [r7, #10]
 8005a42:	4413      	add	r3, r2
 8005a44:	2232      	movs	r2, #50	; 0x32
 8005a46:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8005a4a:	4b56      	ldr	r3, [pc, #344]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	897b      	ldrh	r3, [r7, #10]
 8005a50:	1c59      	adds	r1, r3, #1
 8005a52:	8179      	strh	r1, [r7, #10]
 8005a54:	4413      	add	r3, r2
 8005a56:	2204      	movs	r2, #4
 8005a58:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8005a5c:	4b51      	ldr	r3, [pc, #324]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	897b      	ldrh	r3, [r7, #10]
 8005a62:	1c59      	adds	r1, r3, #1
 8005a64:	8179      	strh	r1, [r7, #10]
 8005a66:	4618      	mov	r0, r3
 8005a68:	4b50      	ldr	r3, [pc, #320]	; (8005bac <send_DHCP_DECLINE+0x298>)
 8005a6a:	7819      	ldrb	r1, [r3, #0]
 8005a6c:	1813      	adds	r3, r2, r0
 8005a6e:	460a      	mov	r2, r1
 8005a70:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8005a74:	4b4b      	ldr	r3, [pc, #300]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	897b      	ldrh	r3, [r7, #10]
 8005a7a:	1c59      	adds	r1, r3, #1
 8005a7c:	8179      	strh	r1, [r7, #10]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	4b4a      	ldr	r3, [pc, #296]	; (8005bac <send_DHCP_DECLINE+0x298>)
 8005a82:	7859      	ldrb	r1, [r3, #1]
 8005a84:	1813      	adds	r3, r2, r0
 8005a86:	460a      	mov	r2, r1
 8005a88:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8005a8c:	4b45      	ldr	r3, [pc, #276]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	897b      	ldrh	r3, [r7, #10]
 8005a92:	1c59      	adds	r1, r3, #1
 8005a94:	8179      	strh	r1, [r7, #10]
 8005a96:	4618      	mov	r0, r3
 8005a98:	4b44      	ldr	r3, [pc, #272]	; (8005bac <send_DHCP_DECLINE+0x298>)
 8005a9a:	7899      	ldrb	r1, [r3, #2]
 8005a9c:	1813      	adds	r3, r2, r0
 8005a9e:	460a      	mov	r2, r1
 8005aa0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8005aa4:	4b3f      	ldr	r3, [pc, #252]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	897b      	ldrh	r3, [r7, #10]
 8005aaa:	1c59      	adds	r1, r3, #1
 8005aac:	8179      	strh	r1, [r7, #10]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	4b3e      	ldr	r3, [pc, #248]	; (8005bac <send_DHCP_DECLINE+0x298>)
 8005ab2:	78d9      	ldrb	r1, [r3, #3]
 8005ab4:	1813      	adds	r3, r2, r0
 8005ab6:	460a      	mov	r2, r1
 8005ab8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8005abc:	4b39      	ldr	r3, [pc, #228]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	897b      	ldrh	r3, [r7, #10]
 8005ac2:	1c59      	adds	r1, r3, #1
 8005ac4:	8179      	strh	r1, [r7, #10]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	2236      	movs	r2, #54	; 0x36
 8005aca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8005ace:	4b35      	ldr	r3, [pc, #212]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	897b      	ldrh	r3, [r7, #10]
 8005ad4:	1c59      	adds	r1, r3, #1
 8005ad6:	8179      	strh	r1, [r7, #10]
 8005ad8:	4413      	add	r3, r2
 8005ada:	2204      	movs	r2, #4
 8005adc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8005ae0:	4b30      	ldr	r3, [pc, #192]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	897b      	ldrh	r3, [r7, #10]
 8005ae6:	1c59      	adds	r1, r3, #1
 8005ae8:	8179      	strh	r1, [r7, #10]
 8005aea:	4618      	mov	r0, r3
 8005aec:	4b30      	ldr	r3, [pc, #192]	; (8005bb0 <send_DHCP_DECLINE+0x29c>)
 8005aee:	7819      	ldrb	r1, [r3, #0]
 8005af0:	1813      	adds	r3, r2, r0
 8005af2:	460a      	mov	r2, r1
 8005af4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8005af8:	4b2a      	ldr	r3, [pc, #168]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	897b      	ldrh	r3, [r7, #10]
 8005afe:	1c59      	adds	r1, r3, #1
 8005b00:	8179      	strh	r1, [r7, #10]
 8005b02:	4618      	mov	r0, r3
 8005b04:	4b2a      	ldr	r3, [pc, #168]	; (8005bb0 <send_DHCP_DECLINE+0x29c>)
 8005b06:	7859      	ldrb	r1, [r3, #1]
 8005b08:	1813      	adds	r3, r2, r0
 8005b0a:	460a      	mov	r2, r1
 8005b0c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8005b10:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	897b      	ldrh	r3, [r7, #10]
 8005b16:	1c59      	adds	r1, r3, #1
 8005b18:	8179      	strh	r1, [r7, #10]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <send_DHCP_DECLINE+0x29c>)
 8005b1e:	7899      	ldrb	r1, [r3, #2]
 8005b20:	1813      	adds	r3, r2, r0
 8005b22:	460a      	mov	r2, r1
 8005b24:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8005b28:	4b1e      	ldr	r3, [pc, #120]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	897b      	ldrh	r3, [r7, #10]
 8005b2e:	1c59      	adds	r1, r3, #1
 8005b30:	8179      	strh	r1, [r7, #10]
 8005b32:	4618      	mov	r0, r3
 8005b34:	4b1e      	ldr	r3, [pc, #120]	; (8005bb0 <send_DHCP_DECLINE+0x29c>)
 8005b36:	78d9      	ldrb	r1, [r3, #3]
 8005b38:	1813      	adds	r3, r2, r0
 8005b3a:	460a      	mov	r2, r1
 8005b3c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8005b40:	4b18      	ldr	r3, [pc, #96]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	897b      	ldrh	r3, [r7, #10]
 8005b46:	1c59      	adds	r1, r3, #1
 8005b48:	8179      	strh	r1, [r7, #10]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	22ff      	movs	r2, #255	; 0xff
 8005b4e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8005b52:	897b      	ldrh	r3, [r7, #10]
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	e009      	b.n	8005b6c <send_DHCP_DECLINE+0x258>
 8005b58:	4b12      	ldr	r3, [pc, #72]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	33ec      	adds	r3, #236	; 0xec
 8005b62:	2200      	movs	r2, #0
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8005b72:	dbf1      	blt.n	8005b58 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8005b74:	23ff      	movs	r3, #255	; 0xff
 8005b76:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8005b78:	23ff      	movs	r3, #255	; 0xff
 8005b7a:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8005b7c:	23ff      	movs	r3, #255	; 0xff
 8005b7e:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8005b80:	23ff      	movs	r3, #255	; 0xff
 8005b82:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8005b84:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <send_DHCP_DECLINE+0x2a0>)
 8005b86:	7818      	ldrb	r0, [r3, #0]
 8005b88:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <send_DHCP_DECLINE+0x290>)
 8005b8a:	6819      	ldr	r1, [r3, #0]
 8005b8c:	1d3b      	adds	r3, r7, #4
 8005b8e:	2243      	movs	r2, #67	; 0x43
 8005b90:	9200      	str	r2, [sp, #0]
 8005b92:	f44f 7209 	mov.w	r2, #548	; 0x224
 8005b96:	f000 feab 	bl	80068f0 <sendto>
}
 8005b9a:	bf00      	nop
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20004208 	.word	0x20004208
 8005ba8:	2000420c 	.word	0x2000420c
 8005bac:	200041ec 	.word	0x200041ec
 8005bb0:	200041e0 	.word	0x200041e0
 8005bb4:	200041dc 	.word	0x200041dc

08005bb8 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8005bb8:	b590      	push	{r4, r7, lr}
 8005bba:	b089      	sub	sp, #36	; 0x24
 8005bbc:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8005bc2:	4ba1      	ldr	r3, [pc, #644]	; (8005e48 <parseDHCPMSG+0x290>)
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 fb5b 	bl	8007282 <getSn_RX_RSR>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	823b      	strh	r3, [r7, #16]
 8005bd0:	8a3b      	ldrh	r3, [r7, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d011      	beq.n	8005bfa <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8005bd6:	4b9c      	ldr	r3, [pc, #624]	; (8005e48 <parseDHCPMSG+0x290>)
 8005bd8:	7818      	ldrb	r0, [r3, #0]
 8005bda:	4b9c      	ldr	r3, [pc, #624]	; (8005e4c <parseDHCPMSG+0x294>)
 8005bdc:	6819      	ldr	r1, [r3, #0]
 8005bde:	1d3c      	adds	r4, r7, #4
 8005be0:	8a3a      	ldrh	r2, [r7, #16]
 8005be2:	1cbb      	adds	r3, r7, #2
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	4623      	mov	r3, r4
 8005be8:	f000 ffb8 	bl	8006b5c <recvfrom>
 8005bec:	4603      	mov	r3, r0
 8005bee:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8005bf0:	887b      	ldrh	r3, [r7, #2]
 8005bf2:	2b43      	cmp	r3, #67	; 0x43
 8005bf4:	f040 81ed 	bne.w	8005fd2 <parseDHCPMSG+0x41a>
 8005bf8:	e001      	b.n	8005bfe <parseDHCPMSG+0x46>
   else return 0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	e1eb      	b.n	8005fd6 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8005bfe:	4b93      	ldr	r3, [pc, #588]	; (8005e4c <parseDHCPMSG+0x294>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	7f1a      	ldrb	r2, [r3, #28]
 8005c04:	4b92      	ldr	r3, [pc, #584]	; (8005e50 <parseDHCPMSG+0x298>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d124      	bne.n	8005c56 <parseDHCPMSG+0x9e>
 8005c0c:	4b8f      	ldr	r3, [pc, #572]	; (8005e4c <parseDHCPMSG+0x294>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	7f5a      	ldrb	r2, [r3, #29]
 8005c12:	4b8f      	ldr	r3, [pc, #572]	; (8005e50 <parseDHCPMSG+0x298>)
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d11d      	bne.n	8005c56 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8005c1a:	4b8c      	ldr	r3, [pc, #560]	; (8005e4c <parseDHCPMSG+0x294>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	7f9a      	ldrb	r2, [r3, #30]
 8005c20:	4b8b      	ldr	r3, [pc, #556]	; (8005e50 <parseDHCPMSG+0x298>)
 8005c22:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d116      	bne.n	8005c56 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8005c28:	4b88      	ldr	r3, [pc, #544]	; (8005e4c <parseDHCPMSG+0x294>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	7fda      	ldrb	r2, [r3, #31]
 8005c2e:	4b88      	ldr	r3, [pc, #544]	; (8005e50 <parseDHCPMSG+0x298>)
 8005c30:	78db      	ldrb	r3, [r3, #3]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d10f      	bne.n	8005c56 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8005c36:	4b85      	ldr	r3, [pc, #532]	; (8005e4c <parseDHCPMSG+0x294>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005c3e:	4b84      	ldr	r3, [pc, #528]	; (8005e50 <parseDHCPMSG+0x298>)
 8005c40:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d107      	bne.n	8005c56 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8005c46:	4b81      	ldr	r3, [pc, #516]	; (8005e4c <parseDHCPMSG+0x294>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005c4e:	4b80      	ldr	r3, [pc, #512]	; (8005e50 <parseDHCPMSG+0x298>)
 8005c50:	795b      	ldrb	r3, [r3, #5]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d001      	beq.n	8005c5a <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	e1bd      	b.n	8005fd6 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8005c5a:	4b7e      	ldr	r3, [pc, #504]	; (8005e54 <parseDHCPMSG+0x29c>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10b      	bne.n	8005c7a <parseDHCPMSG+0xc2>
 8005c62:	4b7c      	ldr	r3, [pc, #496]	; (8005e54 <parseDHCPMSG+0x29c>)
 8005c64:	785b      	ldrb	r3, [r3, #1]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d107      	bne.n	8005c7a <parseDHCPMSG+0xc2>
 8005c6a:	4b7a      	ldr	r3, [pc, #488]	; (8005e54 <parseDHCPMSG+0x29c>)
 8005c6c:	789b      	ldrb	r3, [r3, #2]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <parseDHCPMSG+0xc2>
 8005c72:	4b78      	ldr	r3, [pc, #480]	; (8005e54 <parseDHCPMSG+0x29c>)
 8005c74:	78db      	ldrb	r3, [r3, #3]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d029      	beq.n	8005cce <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8005c7a:	793a      	ldrb	r2, [r7, #4]
 8005c7c:	4b75      	ldr	r3, [pc, #468]	; (8005e54 <parseDHCPMSG+0x29c>)
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d10e      	bne.n	8005ca2 <parseDHCPMSG+0xea>
 8005c84:	797a      	ldrb	r2, [r7, #5]
 8005c86:	4b73      	ldr	r3, [pc, #460]	; (8005e54 <parseDHCPMSG+0x29c>)
 8005c88:	785b      	ldrb	r3, [r3, #1]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d109      	bne.n	8005ca2 <parseDHCPMSG+0xea>
 8005c8e:	79ba      	ldrb	r2, [r7, #6]
 8005c90:	4b70      	ldr	r3, [pc, #448]	; (8005e54 <parseDHCPMSG+0x29c>)
 8005c92:	789b      	ldrb	r3, [r3, #2]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d104      	bne.n	8005ca2 <parseDHCPMSG+0xea>
 8005c98:	79fa      	ldrb	r2, [r7, #7]
 8005c9a:	4b6e      	ldr	r3, [pc, #440]	; (8005e54 <parseDHCPMSG+0x29c>)
 8005c9c:	78db      	ldrb	r3, [r3, #3]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d015      	beq.n	8005cce <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8005ca2:	793a      	ldrb	r2, [r7, #4]
 8005ca4:	4b6c      	ldr	r3, [pc, #432]	; (8005e58 <parseDHCPMSG+0x2a0>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d10e      	bne.n	8005cca <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8005cac:	797a      	ldrb	r2, [r7, #5]
 8005cae:	4b6a      	ldr	r3, [pc, #424]	; (8005e58 <parseDHCPMSG+0x2a0>)
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d109      	bne.n	8005cca <parseDHCPMSG+0x112>
 8005cb6:	79ba      	ldrb	r2, [r7, #6]
 8005cb8:	4b67      	ldr	r3, [pc, #412]	; (8005e58 <parseDHCPMSG+0x2a0>)
 8005cba:	789b      	ldrb	r3, [r3, #2]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d104      	bne.n	8005cca <parseDHCPMSG+0x112>
 8005cc0:	79fa      	ldrb	r2, [r7, #7]
 8005cc2:	4b65      	ldr	r3, [pc, #404]	; (8005e58 <parseDHCPMSG+0x2a0>)
 8005cc4:	78db      	ldrb	r3, [r3, #3]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d001      	beq.n	8005cce <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e183      	b.n	8005fd6 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8005cce:	4b5f      	ldr	r3, [pc, #380]	; (8005e4c <parseDHCPMSG+0x294>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	33f0      	adds	r3, #240	; 0xf0
 8005cd8:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8005cda:	8a3b      	ldrh	r3, [r7, #16]
 8005cdc:	3bf0      	subs	r3, #240	; 0xf0
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8005ce4:	e170      	b.n	8005fc8 <parseDHCPMSG+0x410>

			switch ( *p ) {
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b36      	cmp	r3, #54	; 0x36
 8005cec:	dc76      	bgt.n	8005ddc <parseDHCPMSG+0x224>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f2c0 815d 	blt.w	8005fae <parseDHCPMSG+0x3f6>
 8005cf4:	2b36      	cmp	r3, #54	; 0x36
 8005cf6:	f200 815a 	bhi.w	8005fae <parseDHCPMSG+0x3f6>
 8005cfa:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <parseDHCPMSG+0x148>)
 8005cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d00:	08005de9 	.word	0x08005de9
 8005d04:	08005e09 	.word	0x08005e09
 8005d08:	08005faf 	.word	0x08005faf
 8005d0c:	08005e61 	.word	0x08005e61
 8005d10:	08005faf 	.word	0x08005faf
 8005d14:	08005faf 	.word	0x08005faf
 8005d18:	08005ead 	.word	0x08005ead
 8005d1c:	08005faf 	.word	0x08005faf
 8005d20:	08005faf 	.word	0x08005faf
 8005d24:	08005faf 	.word	0x08005faf
 8005d28:	08005faf 	.word	0x08005faf
 8005d2c:	08005faf 	.word	0x08005faf
 8005d30:	08005faf 	.word	0x08005faf
 8005d34:	08005faf 	.word	0x08005faf
 8005d38:	08005faf 	.word	0x08005faf
 8005d3c:	08005faf 	.word	0x08005faf
 8005d40:	08005faf 	.word	0x08005faf
 8005d44:	08005faf 	.word	0x08005faf
 8005d48:	08005faf 	.word	0x08005faf
 8005d4c:	08005faf 	.word	0x08005faf
 8005d50:	08005faf 	.word	0x08005faf
 8005d54:	08005faf 	.word	0x08005faf
 8005d58:	08005faf 	.word	0x08005faf
 8005d5c:	08005faf 	.word	0x08005faf
 8005d60:	08005faf 	.word	0x08005faf
 8005d64:	08005faf 	.word	0x08005faf
 8005d68:	08005faf 	.word	0x08005faf
 8005d6c:	08005faf 	.word	0x08005faf
 8005d70:	08005faf 	.word	0x08005faf
 8005d74:	08005faf 	.word	0x08005faf
 8005d78:	08005faf 	.word	0x08005faf
 8005d7c:	08005faf 	.word	0x08005faf
 8005d80:	08005faf 	.word	0x08005faf
 8005d84:	08005faf 	.word	0x08005faf
 8005d88:	08005faf 	.word	0x08005faf
 8005d8c:	08005faf 	.word	0x08005faf
 8005d90:	08005faf 	.word	0x08005faf
 8005d94:	08005faf 	.word	0x08005faf
 8005d98:	08005faf 	.word	0x08005faf
 8005d9c:	08005faf 	.word	0x08005faf
 8005da0:	08005faf 	.word	0x08005faf
 8005da4:	08005faf 	.word	0x08005faf
 8005da8:	08005faf 	.word	0x08005faf
 8005dac:	08005faf 	.word	0x08005faf
 8005db0:	08005faf 	.word	0x08005faf
 8005db4:	08005faf 	.word	0x08005faf
 8005db8:	08005faf 	.word	0x08005faf
 8005dbc:	08005faf 	.word	0x08005faf
 8005dc0:	08005faf 	.word	0x08005faf
 8005dc4:	08005faf 	.word	0x08005faf
 8005dc8:	08005faf 	.word	0x08005faf
 8005dcc:	08005ef9 	.word	0x08005ef9
 8005dd0:	08005faf 	.word	0x08005faf
 8005dd4:	08005df1 	.word	0x08005df1
 8005dd8:	08005f55 	.word	0x08005f55
 8005ddc:	2bff      	cmp	r3, #255	; 0xff
 8005dde:	f040 80e6 	bne.w	8005fae <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	617b      	str	r3, [r7, #20]
   				break;
 8005de6:	e0ef      	b.n	8005fc8 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	3301      	adds	r3, #1
 8005dec:	617b      	str	r3, [r7, #20]
   				break;
 8005dee:	e0eb      	b.n	8005fc8 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	3301      	adds	r3, #1
 8005df4:	617b      	str	r3, [r7, #20]
   				p++;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	617a      	str	r2, [r7, #20]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	74fb      	strb	r3, [r7, #19]
   				break;
 8005e06:	e0df      	b.n	8005fc8 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	617b      	str	r3, [r7, #20]
   				p++;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	3301      	adds	r3, #1
 8005e12:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	617a      	str	r2, [r7, #20]
 8005e1a:	781a      	ldrb	r2, [r3, #0]
 8005e1c:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <parseDHCPMSG+0x2a4>)
 8005e1e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	617a      	str	r2, [r7, #20]
 8005e26:	781a      	ldrb	r2, [r3, #0]
 8005e28:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <parseDHCPMSG+0x2a4>)
 8005e2a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	617a      	str	r2, [r7, #20]
 8005e32:	781a      	ldrb	r2, [r3, #0]
 8005e34:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <parseDHCPMSG+0x2a4>)
 8005e36:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	617a      	str	r2, [r7, #20]
 8005e3e:	781a      	ldrb	r2, [r3, #0]
 8005e40:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <parseDHCPMSG+0x2a4>)
 8005e42:	70da      	strb	r2, [r3, #3]
   				break;
 8005e44:	e0c0      	b.n	8005fc8 <parseDHCPMSG+0x410>
 8005e46:	bf00      	nop
 8005e48:	200041dc 	.word	0x200041dc
 8005e4c:	20004208 	.word	0x20004208
 8005e50:	2000420c 	.word	0x2000420c
 8005e54:	200041e0 	.word	0x200041e0
 8005e58:	200041e4 	.word	0x200041e4
 8005e5c:	200041f4 	.word	0x200041f4
   			case routersOnSubnet :
   				p++;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	3301      	adds	r3, #1
 8005e64:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	617a      	str	r2, [r7, #20]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	617a      	str	r2, [r7, #20]
 8005e76:	781a      	ldrb	r2, [r3, #0]
 8005e78:	4b59      	ldr	r3, [pc, #356]	; (8005fe0 <parseDHCPMSG+0x428>)
 8005e7a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	617a      	str	r2, [r7, #20]
 8005e82:	781a      	ldrb	r2, [r3, #0]
 8005e84:	4b56      	ldr	r3, [pc, #344]	; (8005fe0 <parseDHCPMSG+0x428>)
 8005e86:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	617a      	str	r2, [r7, #20]
 8005e8e:	781a      	ldrb	r2, [r3, #0]
 8005e90:	4b53      	ldr	r3, [pc, #332]	; (8005fe0 <parseDHCPMSG+0x428>)
 8005e92:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	617a      	str	r2, [r7, #20]
 8005e9a:	781a      	ldrb	r2, [r3, #0]
 8005e9c:	4b50      	ldr	r3, [pc, #320]	; (8005fe0 <parseDHCPMSG+0x428>)
 8005e9e:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8005ea0:	7afb      	ldrb	r3, [r7, #11]
 8005ea2:	3b04      	subs	r3, #4
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]
   				break;
 8005eaa:	e08d      	b.n	8005fc8 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	617a      	str	r2, [r7, #20]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	617a      	str	r2, [r7, #20]
 8005ec2:	781a      	ldrb	r2, [r3, #0]
 8005ec4:	4b47      	ldr	r3, [pc, #284]	; (8005fe4 <parseDHCPMSG+0x42c>)
 8005ec6:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	617a      	str	r2, [r7, #20]
 8005ece:	781a      	ldrb	r2, [r3, #0]
 8005ed0:	4b44      	ldr	r3, [pc, #272]	; (8005fe4 <parseDHCPMSG+0x42c>)
 8005ed2:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	617a      	str	r2, [r7, #20]
 8005eda:	781a      	ldrb	r2, [r3, #0]
 8005edc:	4b41      	ldr	r3, [pc, #260]	; (8005fe4 <parseDHCPMSG+0x42c>)
 8005ede:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	617a      	str	r2, [r7, #20]
 8005ee6:	781a      	ldrb	r2, [r3, #0]
 8005ee8:	4b3e      	ldr	r3, [pc, #248]	; (8005fe4 <parseDHCPMSG+0x42c>)
 8005eea:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8005eec:	7afb      	ldrb	r3, [r7, #11]
 8005eee:	3b04      	subs	r3, #4
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]
   				break;
 8005ef6:	e067      	b.n	8005fc8 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	3301      	adds	r3, #1
 8005efc:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	617a      	str	r2, [r7, #20]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	617a      	str	r2, [r7, #20]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	461a      	mov	r2, r3
 8005f12:	4b35      	ldr	r3, [pc, #212]	; (8005fe8 <parseDHCPMSG+0x430>)
 8005f14:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8005f16:	4b34      	ldr	r3, [pc, #208]	; (8005fe8 <parseDHCPMSG+0x430>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	021a      	lsls	r2, r3, #8
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	1c59      	adds	r1, r3, #1
 8005f20:	6179      	str	r1, [r7, #20]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	4413      	add	r3, r2
 8005f26:	4a30      	ldr	r2, [pc, #192]	; (8005fe8 <parseDHCPMSG+0x430>)
 8005f28:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8005f2a:	4b2f      	ldr	r3, [pc, #188]	; (8005fe8 <parseDHCPMSG+0x430>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	021a      	lsls	r2, r3, #8
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	1c59      	adds	r1, r3, #1
 8005f34:	6179      	str	r1, [r7, #20]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	4413      	add	r3, r2
 8005f3a:	4a2b      	ldr	r2, [pc, #172]	; (8005fe8 <parseDHCPMSG+0x430>)
 8005f3c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8005f3e:	4b2a      	ldr	r3, [pc, #168]	; (8005fe8 <parseDHCPMSG+0x430>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	021a      	lsls	r2, r3, #8
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	1c59      	adds	r1, r3, #1
 8005f48:	6179      	str	r1, [r7, #20]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	4a26      	ldr	r2, [pc, #152]	; (8005fe8 <parseDHCPMSG+0x430>)
 8005f50:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8005f52:	e039      	b.n	8005fc8 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	3301      	adds	r3, #1
 8005f58:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	617a      	str	r2, [r7, #20]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	617a      	str	r2, [r7, #20]
 8005f6a:	781a      	ldrb	r2, [r3, #0]
 8005f6c:	4b1f      	ldr	r3, [pc, #124]	; (8005fec <parseDHCPMSG+0x434>)
 8005f6e:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	617a      	str	r2, [r7, #20]
 8005f76:	781a      	ldrb	r2, [r3, #0]
 8005f78:	4b1c      	ldr	r3, [pc, #112]	; (8005fec <parseDHCPMSG+0x434>)
 8005f7a:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	617a      	str	r2, [r7, #20]
 8005f82:	781a      	ldrb	r2, [r3, #0]
 8005f84:	4b19      	ldr	r3, [pc, #100]	; (8005fec <parseDHCPMSG+0x434>)
 8005f86:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	617a      	str	r2, [r7, #20]
 8005f8e:	781a      	ldrb	r2, [r3, #0]
 8005f90:	4b16      	ldr	r3, [pc, #88]	; (8005fec <parseDHCPMSG+0x434>)
 8005f92:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8005f94:	793a      	ldrb	r2, [r7, #4]
 8005f96:	4b16      	ldr	r3, [pc, #88]	; (8005ff0 <parseDHCPMSG+0x438>)
 8005f98:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8005f9a:	797a      	ldrb	r2, [r7, #5]
 8005f9c:	4b14      	ldr	r3, [pc, #80]	; (8005ff0 <parseDHCPMSG+0x438>)
 8005f9e:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8005fa0:	79ba      	ldrb	r2, [r7, #6]
 8005fa2:	4b13      	ldr	r3, [pc, #76]	; (8005ff0 <parseDHCPMSG+0x438>)
 8005fa4:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8005fa6:	79fa      	ldrb	r2, [r7, #7]
 8005fa8:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <parseDHCPMSG+0x438>)
 8005faa:	70da      	strb	r2, [r3, #3]
   				break;
 8005fac:	e00c      	b.n	8005fc8 <parseDHCPMSG+0x410>
   			default :
   				p++;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	617a      	str	r2, [r7, #20]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8005fbe:	7afb      	ldrb	r3, [r7, #11]
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]
   				break;
 8005fc6:	bf00      	nop
		while ( p < e ) {
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	f4ff ae8a 	bcc.w	8005ce6 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8005fd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	371c      	adds	r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd90      	pop	{r4, r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	200041f0 	.word	0x200041f0
 8005fe4:	200041f8 	.word	0x200041f8
 8005fe8:	20000028 	.word	0x20000028
 8005fec:	200041e0 	.word	0x200041e0
 8005ff0:	200041e4 	.word	0x200041e4

08005ff4 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8005ffa:	4b7f      	ldr	r3, [pc, #508]	; (80061f8 <DHCP_run+0x204>)
 8005ffc:	f993 3000 	ldrsb.w	r3, [r3]
 8006000:	2b06      	cmp	r3, #6
 8006002:	d101      	bne.n	8006008 <DHCP_run+0x14>
 8006004:	2305      	movs	r3, #5
 8006006:	e0f3      	b.n	80061f0 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8006008:	4b7c      	ldr	r3, [pc, #496]	; (80061fc <DHCP_run+0x208>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	3301      	adds	r3, #1
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006016:	4618      	mov	r0, r3
 8006018:	f000 ff8e 	bl	8006f38 <WIZCHIP_READ>
 800601c:	4603      	mov	r3, r0
 800601e:	2b22      	cmp	r3, #34	; 0x22
 8006020:	d006      	beq.n	8006030 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8006022:	4b76      	ldr	r3, [pc, #472]	; (80061fc <DHCP_run+0x208>)
 8006024:	7818      	ldrb	r0, [r3, #0]
 8006026:	2300      	movs	r3, #0
 8006028:	2244      	movs	r2, #68	; 0x44
 800602a:	2102      	movs	r1, #2
 800602c:	f000 fade 	bl	80065ec <socket>

	ret = DHCP_RUNNING;
 8006030:	2301      	movs	r3, #1
 8006032:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8006034:	f7ff fdc0 	bl	8005bb8 <parseDHCPMSG>
 8006038:	4603      	mov	r3, r0
 800603a:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 800603c:	4b6e      	ldr	r3, [pc, #440]	; (80061f8 <DHCP_run+0x204>)
 800603e:	f993 3000 	ldrsb.w	r3, [r3]
 8006042:	2b04      	cmp	r3, #4
 8006044:	f200 80d0 	bhi.w	80061e8 <DHCP_run+0x1f4>
 8006048:	a201      	add	r2, pc, #4	; (adr r2, 8006050 <DHCP_run+0x5c>)
 800604a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604e:	bf00      	nop
 8006050:	08006065 	.word	0x08006065
 8006054:	08006089 	.word	0x08006089
 8006058:	080060cd 	.word	0x080060cd
 800605c:	0800611d 	.word	0x0800611d
 8006060:	08006177 	.word	0x08006177
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8006064:	4b66      	ldr	r3, [pc, #408]	; (8006200 <DHCP_run+0x20c>)
 8006066:	2200      	movs	r2, #0
 8006068:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 800606a:	4b65      	ldr	r3, [pc, #404]	; (8006200 <DHCP_run+0x20c>)
 800606c:	2200      	movs	r2, #0
 800606e:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8006070:	4b63      	ldr	r3, [pc, #396]	; (8006200 <DHCP_run+0x20c>)
 8006072:	2200      	movs	r2, #0
 8006074:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8006076:	4b62      	ldr	r3, [pc, #392]	; (8006200 <DHCP_run+0x20c>)
 8006078:	2200      	movs	r2, #0
 800607a:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 800607c:	f7fe fffa 	bl	8005074 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8006080:	4b5d      	ldr	r3, [pc, #372]	; (80061f8 <DHCP_run+0x204>)
 8006082:	2201      	movs	r2, #1
 8006084:	701a      	strb	r2, [r3, #0]
   		break;
 8006086:	e0b2      	b.n	80061ee <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8006088:	79bb      	ldrb	r3, [r7, #6]
 800608a:	2b02      	cmp	r3, #2
 800608c:	d119      	bne.n	80060c2 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800608e:	4b5d      	ldr	r3, [pc, #372]	; (8006204 <DHCP_run+0x210>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	7c1a      	ldrb	r2, [r3, #16]
 8006094:	4b5a      	ldr	r3, [pc, #360]	; (8006200 <DHCP_run+0x20c>)
 8006096:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8006098:	4b5a      	ldr	r3, [pc, #360]	; (8006204 <DHCP_run+0x210>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	7c5a      	ldrb	r2, [r3, #17]
 800609e:	4b58      	ldr	r3, [pc, #352]	; (8006200 <DHCP_run+0x20c>)
 80060a0:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 80060a2:	4b58      	ldr	r3, [pc, #352]	; (8006204 <DHCP_run+0x210>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	7c9a      	ldrb	r2, [r3, #18]
 80060a8:	4b55      	ldr	r3, [pc, #340]	; (8006200 <DHCP_run+0x20c>)
 80060aa:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 80060ac:	4b55      	ldr	r3, [pc, #340]	; (8006204 <DHCP_run+0x210>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	7cda      	ldrb	r2, [r3, #19]
 80060b2:	4b53      	ldr	r3, [pc, #332]	; (8006200 <DHCP_run+0x20c>)
 80060b4:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 80060b6:	f7ff f9a3 	bl	8005400 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 80060ba:	4b4f      	ldr	r3, [pc, #316]	; (80061f8 <DHCP_run+0x204>)
 80060bc:	2202      	movs	r2, #2
 80060be:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 80060c0:	e095      	b.n	80061ee <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80060c2:	f000 f8b1 	bl	8006228 <check_DHCP_timeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	71fb      	strb	r3, [r7, #7]
         break;
 80060ca:	e090      	b.n	80061ee <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 80060cc:	79bb      	ldrb	r3, [r7, #6]
 80060ce:	2b05      	cmp	r3, #5
 80060d0:	d116      	bne.n	8006100 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 80060d2:	f000 f909 	bl	80062e8 <check_DHCP_leasedIP>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d008      	beq.n	80060ee <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 80060dc:	4b4a      	ldr	r3, [pc, #296]	; (8006208 <DHCP_run+0x214>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4798      	blx	r3
					reset_DHCP_timeout();
 80060e2:	f000 f9d3 	bl	800648c <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 80060e6:	4b44      	ldr	r3, [pc, #272]	; (80061f8 <DHCP_run+0x204>)
 80060e8:	2203      	movs	r2, #3
 80060ea:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 80060ec:	e07f      	b.n	80061ee <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 80060ee:	f000 f9cd 	bl	800648c <reset_DHCP_timeout>
					dhcp_ip_conflict();
 80060f2:	4b46      	ldr	r3, [pc, #280]	; (800620c <DHCP_run+0x218>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 80060f8:	4b3f      	ldr	r3, [pc, #252]	; (80061f8 <DHCP_run+0x204>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	701a      	strb	r2, [r3, #0]
		break;
 80060fe:	e076      	b.n	80061ee <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8006100:	79bb      	ldrb	r3, [r7, #6]
 8006102:	2b06      	cmp	r3, #6
 8006104:	d105      	bne.n	8006112 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 8006106:	f000 f9c1 	bl	800648c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 800610a:	4b3b      	ldr	r3, [pc, #236]	; (80061f8 <DHCP_run+0x204>)
 800610c:	2201      	movs	r2, #1
 800610e:	701a      	strb	r2, [r3, #0]
		break;
 8006110:	e06d      	b.n	80061ee <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8006112:	f000 f889 	bl	8006228 <check_DHCP_timeout>
 8006116:	4603      	mov	r3, r0
 8006118:	71fb      	strb	r3, [r7, #7]
		break;
 800611a:	e068      	b.n	80061ee <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 800611c:	2304      	movs	r3, #4
 800611e:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8006120:	4b3b      	ldr	r3, [pc, #236]	; (8006210 <DHCP_run+0x21c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006128:	d060      	beq.n	80061ec <DHCP_run+0x1f8>
 800612a:	4b39      	ldr	r3, [pc, #228]	; (8006210 <DHCP_run+0x21c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	085a      	lsrs	r2, r3, #1
 8006130:	4b38      	ldr	r3, [pc, #224]	; (8006214 <DHCP_run+0x220>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d259      	bcs.n	80061ec <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8006138:	2300      	movs	r3, #0
 800613a:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 800613c:	4b30      	ldr	r3, [pc, #192]	; (8006200 <DHCP_run+0x20c>)
 800613e:	781a      	ldrb	r2, [r3, #0]
 8006140:	4b35      	ldr	r3, [pc, #212]	; (8006218 <DHCP_run+0x224>)
 8006142:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8006144:	4b2e      	ldr	r3, [pc, #184]	; (8006200 <DHCP_run+0x20c>)
 8006146:	785a      	ldrb	r2, [r3, #1]
 8006148:	4b33      	ldr	r3, [pc, #204]	; (8006218 <DHCP_run+0x224>)
 800614a:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 800614c:	4b2c      	ldr	r3, [pc, #176]	; (8006200 <DHCP_run+0x20c>)
 800614e:	789a      	ldrb	r2, [r3, #2]
 8006150:	4b31      	ldr	r3, [pc, #196]	; (8006218 <DHCP_run+0x224>)
 8006152:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8006154:	4b2a      	ldr	r3, [pc, #168]	; (8006200 <DHCP_run+0x20c>)
 8006156:	78da      	ldrb	r2, [r3, #3]
 8006158:	4b2f      	ldr	r3, [pc, #188]	; (8006218 <DHCP_run+0x224>)
 800615a:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 800615c:	4b2f      	ldr	r3, [pc, #188]	; (800621c <DHCP_run+0x228>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3301      	adds	r3, #1
 8006162:	4a2e      	ldr	r2, [pc, #184]	; (800621c <DHCP_run+0x228>)
 8006164:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8006166:	f7ff f94b 	bl	8005400 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 800616a:	f000 f98f 	bl	800648c <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800616e:	4b22      	ldr	r3, [pc, #136]	; (80061f8 <DHCP_run+0x204>)
 8006170:	2204      	movs	r2, #4
 8006172:	701a      	strb	r2, [r3, #0]
			}
		break;
 8006174:	e03a      	b.n	80061ec <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8006176:	2304      	movs	r3, #4
 8006178:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 800617a:	79bb      	ldrb	r3, [r7, #6]
 800617c:	2b05      	cmp	r3, #5
 800617e:	d125      	bne.n	80061cc <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8006180:	4b27      	ldr	r3, [pc, #156]	; (8006220 <DHCP_run+0x22c>)
 8006182:	2200      	movs	r2, #0
 8006184:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8006186:	4b24      	ldr	r3, [pc, #144]	; (8006218 <DHCP_run+0x224>)
 8006188:	781a      	ldrb	r2, [r3, #0]
 800618a:	4b1d      	ldr	r3, [pc, #116]	; (8006200 <DHCP_run+0x20c>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d111      	bne.n	80061b6 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8006192:	4b21      	ldr	r3, [pc, #132]	; (8006218 <DHCP_run+0x224>)
 8006194:	785a      	ldrb	r2, [r3, #1]
 8006196:	4b1a      	ldr	r3, [pc, #104]	; (8006200 <DHCP_run+0x20c>)
 8006198:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800619a:	429a      	cmp	r2, r3
 800619c:	d10b      	bne.n	80061b6 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800619e:	4b1e      	ldr	r3, [pc, #120]	; (8006218 <DHCP_run+0x224>)
 80061a0:	789a      	ldrb	r2, [r3, #2]
 80061a2:	4b17      	ldr	r3, [pc, #92]	; (8006200 <DHCP_run+0x20c>)
 80061a4:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d105      	bne.n	80061b6 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 80061aa:	4b1b      	ldr	r3, [pc, #108]	; (8006218 <DHCP_run+0x224>)
 80061ac:	78da      	ldrb	r2, [r3, #3]
 80061ae:	4b14      	ldr	r3, [pc, #80]	; (8006200 <DHCP_run+0x20c>)
 80061b0:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d004      	beq.n	80061c0 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 80061b6:	2303      	movs	r3, #3
 80061b8:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 80061ba:	4b1a      	ldr	r3, [pc, #104]	; (8006224 <DHCP_run+0x230>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 80061c0:	f000 f964 	bl	800648c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 80061c4:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <DHCP_run+0x204>)
 80061c6:	2203      	movs	r2, #3
 80061c8:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 80061ca:	e010      	b.n	80061ee <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80061cc:	79bb      	ldrb	r3, [r7, #6]
 80061ce:	2b06      	cmp	r3, #6
 80061d0:	d105      	bne.n	80061de <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 80061d2:	f000 f95b 	bl	800648c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80061d6:	4b08      	ldr	r3, [pc, #32]	; (80061f8 <DHCP_run+0x204>)
 80061d8:	2201      	movs	r2, #1
 80061da:	701a      	strb	r2, [r3, #0]
	   	break;
 80061dc:	e007      	b.n	80061ee <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80061de:	f000 f823 	bl	8006228 <check_DHCP_timeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	71fb      	strb	r3, [r7, #7]
	   	break;
 80061e6:	e002      	b.n	80061ee <DHCP_run+0x1fa>
		default :
   		break;
 80061e8:	bf00      	nop
 80061ea:	e000      	b.n	80061ee <DHCP_run+0x1fa>
		break;
 80061ec:	bf00      	nop
	}

	return ret;
 80061ee:	79fb      	ldrb	r3, [r7, #7]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	200041fc 	.word	0x200041fc
 80061fc:	200041dc 	.word	0x200041dc
 8006200:	200041ec 	.word	0x200041ec
 8006204:	20004208 	.word	0x20004208
 8006208:	20000038 	.word	0x20000038
 800620c:	20000040 	.word	0x20000040
 8006210:	20000028 	.word	0x20000028
 8006214:	20004200 	.word	0x20004200
 8006218:	200041e8 	.word	0x200041e8
 800621c:	20004204 	.word	0x20004204
 8006220:	200041fd 	.word	0x200041fd
 8006224:	2000003c 	.word	0x2000003c

08006228 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 800622e:	2301      	movs	r3, #1
 8006230:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8006232:	4b29      	ldr	r3, [pc, #164]	; (80062d8 <check_DHCP_timeout+0xb0>)
 8006234:	f993 3000 	ldrsb.w	r3, [r3]
 8006238:	2b01      	cmp	r3, #1
 800623a:	dc2d      	bgt.n	8006298 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 800623c:	4b27      	ldr	r3, [pc, #156]	; (80062dc <check_DHCP_timeout+0xb4>)
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	4b27      	ldr	r3, [pc, #156]	; (80062e0 <check_DHCP_timeout+0xb8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	429a      	cmp	r2, r3
 8006246:	d242      	bcs.n	80062ce <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8006248:	4b26      	ldr	r3, [pc, #152]	; (80062e4 <check_DHCP_timeout+0xbc>)
 800624a:	f993 3000 	ldrsb.w	r3, [r3]
 800624e:	2b04      	cmp	r3, #4
 8006250:	d00c      	beq.n	800626c <check_DHCP_timeout+0x44>
 8006252:	2b04      	cmp	r3, #4
 8006254:	dc0d      	bgt.n	8006272 <check_DHCP_timeout+0x4a>
 8006256:	2b01      	cmp	r3, #1
 8006258:	d002      	beq.n	8006260 <check_DHCP_timeout+0x38>
 800625a:	2b02      	cmp	r3, #2
 800625c:	d003      	beq.n	8006266 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 800625e:	e008      	b.n	8006272 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8006260:	f7fe ff08 	bl	8005074 <send_DHCP_DISCOVER>
				break;
 8006264:	e006      	b.n	8006274 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8006266:	f7ff f8cb 	bl	8005400 <send_DHCP_REQUEST>
				break;
 800626a:	e003      	b.n	8006274 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 800626c:	f7ff f8c8 	bl	8005400 <send_DHCP_REQUEST>
				break;
 8006270:	e000      	b.n	8006274 <check_DHCP_timeout+0x4c>
				break;
 8006272:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8006274:	4b1a      	ldr	r3, [pc, #104]	; (80062e0 <check_DHCP_timeout+0xb8>)
 8006276:	2200      	movs	r2, #0
 8006278:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 800627a:	4b19      	ldr	r3, [pc, #100]	; (80062e0 <check_DHCP_timeout+0xb8>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	330a      	adds	r3, #10
 8006280:	4a16      	ldr	r2, [pc, #88]	; (80062dc <check_DHCP_timeout+0xb4>)
 8006282:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8006284:	4b14      	ldr	r3, [pc, #80]	; (80062d8 <check_DHCP_timeout+0xb0>)
 8006286:	f993 3000 	ldrsb.w	r3, [r3]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	3301      	adds	r3, #1
 800628e:	b2db      	uxtb	r3, r3
 8006290:	b25a      	sxtb	r2, r3
 8006292:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <check_DHCP_timeout+0xb0>)
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	e01a      	b.n	80062ce <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8006298:	4b12      	ldr	r3, [pc, #72]	; (80062e4 <check_DHCP_timeout+0xbc>)
 800629a:	f993 3000 	ldrsb.w	r3, [r3]
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d00c      	beq.n	80062bc <check_DHCP_timeout+0x94>
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	dc10      	bgt.n	80062c8 <check_DHCP_timeout+0xa0>
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d002      	beq.n	80062b0 <check_DHCP_timeout+0x88>
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d006      	beq.n	80062bc <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 80062ae:	e00b      	b.n	80062c8 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 80062b0:	4b0c      	ldr	r3, [pc, #48]	; (80062e4 <check_DHCP_timeout+0xbc>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 80062b6:	2300      	movs	r3, #0
 80062b8:	71fb      	strb	r3, [r7, #7]
				break;
 80062ba:	e006      	b.n	80062ca <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 80062bc:	f7fe feda 	bl	8005074 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 80062c0:	4b08      	ldr	r3, [pc, #32]	; (80062e4 <check_DHCP_timeout+0xbc>)
 80062c2:	2201      	movs	r2, #1
 80062c4:	701a      	strb	r2, [r3, #0]
				break;
 80062c6:	e000      	b.n	80062ca <check_DHCP_timeout+0xa2>
				break;
 80062c8:	bf00      	nop
		}
		reset_DHCP_timeout();
 80062ca:	f000 f8df 	bl	800648c <reset_DHCP_timeout>
	}
	return ret;
 80062ce:	79fb      	ldrb	r3, [r7, #7]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	200041fd 	.word	0x200041fd
 80062dc:	2000002c 	.word	0x2000002c
 80062e0:	20004200 	.word	0x20004200
 80062e4:	200041fc 	.word	0x200041fc

080062e8 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 80062ee:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80062f2:	f000 fe21 	bl	8006f38 <WIZCHIP_READ>
 80062f6:	4603      	mov	r3, r0
 80062f8:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 80062fa:	2103      	movs	r1, #3
 80062fc:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8006300:	f000 fe66 	bl	8006fd0 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8006304:	4b13      	ldr	r3, [pc, #76]	; (8006354 <check_DHCP_leasedIP+0x6c>)
 8006306:	7818      	ldrb	r0, [r3, #0]
 8006308:	f241 3388 	movw	r3, #5000	; 0x1388
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	4b12      	ldr	r3, [pc, #72]	; (8006358 <check_DHCP_leasedIP+0x70>)
 8006310:	2211      	movs	r2, #17
 8006312:	4912      	ldr	r1, [pc, #72]	; (800635c <check_DHCP_leasedIP+0x74>)
 8006314:	f000 faec 	bl	80068f0 <sendto>
 8006318:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	4619      	mov	r1, r3
 800631e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8006322:	f000 fe55 	bl	8006fd0 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	f113 0f0d 	cmn.w	r3, #13
 800632c:	d101      	bne.n	8006332 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 800632e:	2301      	movs	r3, #1
 8006330:	e00c      	b.n	800634c <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8006332:	f7ff faef 	bl	8005914 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8006336:	4b0a      	ldr	r3, [pc, #40]	; (8006360 <check_DHCP_leasedIP+0x78>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 800633c:	bf00      	nop
 800633e:	4b08      	ldr	r3, [pc, #32]	; (8006360 <check_DHCP_leasedIP+0x78>)
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b01      	cmp	r3, #1
 8006348:	d9f9      	bls.n	800633e <check_DHCP_leasedIP+0x56>

		return 0;
 800634a:	2300      	movs	r3, #0
	}
}	
 800634c:	4618      	mov	r0, r3
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	200041dc 	.word	0x200041dc
 8006358:	200041ec 	.word	0x200041ec
 800635c:	08009c00 	.word	0x08009c00
 8006360:	20004200 	.word	0x20004200

08006364 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	6039      	str	r1, [r7, #0]
 800636e:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8006370:	2300      	movs	r3, #0
 8006372:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8006374:	2206      	movs	r2, #6
 8006376:	493f      	ldr	r1, [pc, #252]	; (8006474 <DHCP_init+0x110>)
 8006378:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800637c:	f000 fe76 	bl	800706c <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8006380:	4b3c      	ldr	r3, [pc, #240]	; (8006474 <DHCP_init+0x110>)
 8006382:	781a      	ldrb	r2, [r3, #0]
 8006384:	4b3b      	ldr	r3, [pc, #236]	; (8006474 <DHCP_init+0x110>)
 8006386:	785b      	ldrb	r3, [r3, #1]
 8006388:	4313      	orrs	r3, r2
 800638a:	b2da      	uxtb	r2, r3
 800638c:	4b39      	ldr	r3, [pc, #228]	; (8006474 <DHCP_init+0x110>)
 800638e:	789b      	ldrb	r3, [r3, #2]
 8006390:	4313      	orrs	r3, r2
 8006392:	b2da      	uxtb	r2, r3
 8006394:	4b37      	ldr	r3, [pc, #220]	; (8006474 <DHCP_init+0x110>)
 8006396:	78db      	ldrb	r3, [r3, #3]
 8006398:	4313      	orrs	r3, r2
 800639a:	b2da      	uxtb	r2, r3
 800639c:	4b35      	ldr	r3, [pc, #212]	; (8006474 <DHCP_init+0x110>)
 800639e:	791b      	ldrb	r3, [r3, #4]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	4b33      	ldr	r3, [pc, #204]	; (8006474 <DHCP_init+0x110>)
 80063a6:	795b      	ldrb	r3, [r3, #5]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d117      	bne.n	80063e0 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 80063b0:	4b30      	ldr	r3, [pc, #192]	; (8006474 <DHCP_init+0x110>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 80063b6:	4b2f      	ldr	r3, [pc, #188]	; (8006474 <DHCP_init+0x110>)
 80063b8:	2208      	movs	r2, #8
 80063ba:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 80063bc:	4b2d      	ldr	r3, [pc, #180]	; (8006474 <DHCP_init+0x110>)
 80063be:	22dc      	movs	r2, #220	; 0xdc
 80063c0:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 80063c2:	4b2c      	ldr	r3, [pc, #176]	; (8006474 <DHCP_init+0x110>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 80063c8:	4b2a      	ldr	r3, [pc, #168]	; (8006474 <DHCP_init+0x110>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 80063ce:	4b29      	ldr	r3, [pc, #164]	; (8006474 <DHCP_init+0x110>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 80063d4:	2206      	movs	r2, #6
 80063d6:	4927      	ldr	r1, [pc, #156]	; (8006474 <DHCP_init+0x110>)
 80063d8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80063dc:	f000 fea6 	bl	800712c <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 80063e0:	4a25      	ldr	r2, [pc, #148]	; (8006478 <DHCP_init+0x114>)
 80063e2:	79fb      	ldrb	r3, [r7, #7]
 80063e4:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 80063e6:	4a25      	ldr	r2, [pc, #148]	; (800647c <DHCP_init+0x118>)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 80063ec:	4b24      	ldr	r3, [pc, #144]	; (8006480 <DHCP_init+0x11c>)
 80063ee:	4a25      	ldr	r2, [pc, #148]	; (8006484 <DHCP_init+0x120>)
 80063f0:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 80063f2:	4b20      	ldr	r3, [pc, #128]	; (8006474 <DHCP_init+0x110>)
 80063f4:	78db      	ldrb	r3, [r3, #3]
 80063f6:	461a      	mov	r2, r3
 80063f8:	4b21      	ldr	r3, [pc, #132]	; (8006480 <DHCP_init+0x11c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4413      	add	r3, r2
 80063fe:	4a20      	ldr	r2, [pc, #128]	; (8006480 <DHCP_init+0x11c>)
 8006400:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8006402:	4b1c      	ldr	r3, [pc, #112]	; (8006474 <DHCP_init+0x110>)
 8006404:	791b      	ldrb	r3, [r3, #4]
 8006406:	461a      	mov	r2, r3
 8006408:	4b1d      	ldr	r3, [pc, #116]	; (8006480 <DHCP_init+0x11c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4413      	add	r3, r2
 800640e:	4a1c      	ldr	r2, [pc, #112]	; (8006480 <DHCP_init+0x11c>)
 8006410:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8006412:	4b18      	ldr	r3, [pc, #96]	; (8006474 <DHCP_init+0x110>)
 8006414:	795b      	ldrb	r3, [r3, #5]
 8006416:	461a      	mov	r2, r3
 8006418:	4b19      	ldr	r3, [pc, #100]	; (8006480 <DHCP_init+0x11c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4413      	add	r3, r2
 800641e:	4a18      	ldr	r2, [pc, #96]	; (8006480 <DHCP_init+0x11c>)
 8006420:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8006422:	4b14      	ldr	r3, [pc, #80]	; (8006474 <DHCP_init+0x110>)
 8006424:	78da      	ldrb	r2, [r3, #3]
 8006426:	4b13      	ldr	r3, [pc, #76]	; (8006474 <DHCP_init+0x110>)
 8006428:	791b      	ldrb	r3, [r3, #4]
 800642a:	4053      	eors	r3, r2
 800642c:	b2da      	uxtb	r2, r3
 800642e:	4b11      	ldr	r3, [pc, #68]	; (8006474 <DHCP_init+0x110>)
 8006430:	795b      	ldrb	r3, [r3, #5]
 8006432:	4053      	eors	r3, r2
 8006434:	b2db      	uxtb	r3, r3
 8006436:	461a      	mov	r2, r3
 8006438:	4b11      	ldr	r3, [pc, #68]	; (8006480 <DHCP_init+0x11c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4413      	add	r3, r2
 800643e:	4a10      	ldr	r2, [pc, #64]	; (8006480 <DHCP_init+0x11c>)
 8006440:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8006442:	f107 030c 	add.w	r3, r7, #12
 8006446:	2204      	movs	r2, #4
 8006448:	4619      	mov	r1, r3
 800644a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800644e:	f000 fe6d 	bl	800712c <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8006452:	f107 030c 	add.w	r3, r7, #12
 8006456:	2204      	movs	r2, #4
 8006458:	4619      	mov	r1, r3
 800645a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800645e:	f000 fe65 	bl	800712c <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8006462:	f000 f813 	bl	800648c <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8006466:	4b08      	ldr	r3, [pc, #32]	; (8006488 <DHCP_init+0x124>)
 8006468:	2200      	movs	r2, #0
 800646a:	701a      	strb	r2, [r3, #0]
}
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	2000420c 	.word	0x2000420c
 8006478:	200041dc 	.word	0x200041dc
 800647c:	20004208 	.word	0x20004208
 8006480:	20004204 	.word	0x20004204
 8006484:	12345678 	.word	0x12345678
 8006488:	200041fc 	.word	0x200041fc

0800648c <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8006490:	4b06      	ldr	r3, [pc, #24]	; (80064ac <reset_DHCP_timeout+0x20>)
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8006496:	4b06      	ldr	r3, [pc, #24]	; (80064b0 <reset_DHCP_timeout+0x24>)
 8006498:	220a      	movs	r2, #10
 800649a:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 800649c:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <reset_DHCP_timeout+0x28>)
 800649e:	2200      	movs	r2, #0
 80064a0:	701a      	strb	r2, [r3, #0]
}
 80064a2:	bf00      	nop
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	20004200 	.word	0x20004200
 80064b0:	2000002c 	.word	0x2000002c
 80064b4:	200041fd 	.word	0x200041fd

080064b8 <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 80064c0:	4b0c      	ldr	r3, [pc, #48]	; (80064f4 <getIPfromDHCP+0x3c>)
 80064c2:	781a      	ldrb	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3301      	adds	r3, #1
 80064cc:	4a09      	ldr	r2, [pc, #36]	; (80064f4 <getIPfromDHCP+0x3c>)
 80064ce:	7852      	ldrb	r2, [r2, #1]
 80064d0:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3302      	adds	r3, #2
 80064d6:	4a07      	ldr	r2, [pc, #28]	; (80064f4 <getIPfromDHCP+0x3c>)
 80064d8:	7892      	ldrb	r2, [r2, #2]
 80064da:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3303      	adds	r3, #3
 80064e0:	4a04      	ldr	r2, [pc, #16]	; (80064f4 <getIPfromDHCP+0x3c>)
 80064e2:	78d2      	ldrb	r2, [r2, #3]
 80064e4:	701a      	strb	r2, [r3, #0]
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	200041ec 	.word	0x200041ec

080064f8 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8006500:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <getGWfromDHCP+0x3c>)
 8006502:	781a      	ldrb	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3301      	adds	r3, #1
 800650c:	4a09      	ldr	r2, [pc, #36]	; (8006534 <getGWfromDHCP+0x3c>)
 800650e:	7852      	ldrb	r2, [r2, #1]
 8006510:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	3302      	adds	r3, #2
 8006516:	4a07      	ldr	r2, [pc, #28]	; (8006534 <getGWfromDHCP+0x3c>)
 8006518:	7892      	ldrb	r2, [r2, #2]
 800651a:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3303      	adds	r3, #3
 8006520:	4a04      	ldr	r2, [pc, #16]	; (8006534 <getGWfromDHCP+0x3c>)
 8006522:	78d2      	ldrb	r2, [r2, #3]
 8006524:	701a      	strb	r2, [r3, #0]
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	200041f0 	.word	0x200041f0

08006538 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8006540:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <getSNfromDHCP+0x3c>)
 8006542:	781a      	ldrb	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3301      	adds	r3, #1
 800654c:	4a09      	ldr	r2, [pc, #36]	; (8006574 <getSNfromDHCP+0x3c>)
 800654e:	7852      	ldrb	r2, [r2, #1]
 8006550:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	3302      	adds	r3, #2
 8006556:	4a07      	ldr	r2, [pc, #28]	; (8006574 <getSNfromDHCP+0x3c>)
 8006558:	7892      	ldrb	r2, [r2, #2]
 800655a:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3303      	adds	r3, #3
 8006560:	4a04      	ldr	r2, [pc, #16]	; (8006574 <getSNfromDHCP+0x3c>)
 8006562:	78d2      	ldrb	r2, [r2, #3]
 8006564:	701a      	strb	r2, [r3, #0]
}
 8006566:	bf00      	nop
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	200041f4 	.word	0x200041f4

08006578 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 8006580:	4b0c      	ldr	r3, [pc, #48]	; (80065b4 <getDNSfromDHCP+0x3c>)
 8006582:	781a      	ldrb	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3301      	adds	r3, #1
 800658c:	4a09      	ldr	r2, [pc, #36]	; (80065b4 <getDNSfromDHCP+0x3c>)
 800658e:	7852      	ldrb	r2, [r2, #1]
 8006590:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	3302      	adds	r3, #2
 8006596:	4a07      	ldr	r2, [pc, #28]	; (80065b4 <getDNSfromDHCP+0x3c>)
 8006598:	7892      	ldrb	r2, [r2, #2]
 800659a:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3303      	adds	r3, #3
 80065a0:	4a04      	ldr	r2, [pc, #16]	; (80065b4 <getDNSfromDHCP+0x3c>)
 80065a2:	78d2      	ldrb	r2, [r2, #3]
 80065a4:	701a      	strb	r2, [r3, #0]
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	200041f8 	.word	0x200041f8

080065b8 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	4603      	mov	r3, r0
 80065c0:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 80065ca:	79fb      	ldrb	r3, [r7, #7]
 80065cc:	2b09      	cmp	r3, #9
 80065ce:	d803      	bhi.n	80065d8 <NibbleToHex+0x20>
    return nibble + '0';
 80065d0:	79fb      	ldrb	r3, [r7, #7]
 80065d2:	3330      	adds	r3, #48	; 0x30
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	e002      	b.n	80065de <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 80065d8:	79fb      	ldrb	r3, [r7, #7]
 80065da:	3337      	adds	r3, #55	; 0x37
 80065dc:	b2db      	uxtb	r3, r3
}
 80065de:	4618      	mov	r0, r3
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
	...

080065ec <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80065ec:	b590      	push	{r4, r7, lr}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4604      	mov	r4, r0
 80065f4:	4608      	mov	r0, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	461a      	mov	r2, r3
 80065fa:	4623      	mov	r3, r4
 80065fc:	71fb      	strb	r3, [r7, #7]
 80065fe:	4603      	mov	r3, r0
 8006600:	71bb      	strb	r3, [r7, #6]
 8006602:	460b      	mov	r3, r1
 8006604:	80bb      	strh	r3, [r7, #4]
 8006606:	4613      	mov	r3, r2
 8006608:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	2b08      	cmp	r3, #8
 800660e:	d902      	bls.n	8006616 <socket+0x2a>
 8006610:	f04f 33ff 	mov.w	r3, #4294967295
 8006614:	e0f0      	b.n	80067f8 <socket+0x20c>
	switch(protocol)
 8006616:	79bb      	ldrb	r3, [r7, #6]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d005      	beq.n	8006628 <socket+0x3c>
 800661c:	2b00      	cmp	r3, #0
 800661e:	dd11      	ble.n	8006644 <socket+0x58>
 8006620:	3b02      	subs	r3, #2
 8006622:	2b02      	cmp	r3, #2
 8006624:	d80e      	bhi.n	8006644 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8006626:	e011      	b.n	800664c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8006628:	f107 030c 	add.w	r3, r7, #12
 800662c:	2204      	movs	r2, #4
 800662e:	4619      	mov	r1, r3
 8006630:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8006634:	f000 fd1a 	bl	800706c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d105      	bne.n	800664a <socket+0x5e>
 800663e:	f06f 0302 	mvn.w	r3, #2
 8006642:	e0d9      	b.n	80067f8 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8006644:	f06f 0304 	mvn.w	r3, #4
 8006648:	e0d6      	b.n	80067f8 <socket+0x20c>
	    break;
 800664a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800664c:	78fb      	ldrb	r3, [r7, #3]
 800664e:	f003 0304 	and.w	r3, r3, #4
 8006652:	2b00      	cmp	r3, #0
 8006654:	d002      	beq.n	800665c <socket+0x70>
 8006656:	f06f 0305 	mvn.w	r3, #5
 800665a:	e0cd      	b.n	80067f8 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d028      	beq.n	80066b4 <socket+0xc8>
	{
   	switch(protocol)
 8006662:	79bb      	ldrb	r3, [r7, #6]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d002      	beq.n	800666e <socket+0x82>
 8006668:	2b02      	cmp	r3, #2
 800666a:	d008      	beq.n	800667e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800666c:	e022      	b.n	80066b4 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800666e:	78fb      	ldrb	r3, [r7, #3]
 8006670:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006674:	2b00      	cmp	r3, #0
 8006676:	d11a      	bne.n	80066ae <socket+0xc2>
 8006678:	f06f 0305 	mvn.w	r3, #5
 800667c:	e0bc      	b.n	80067f8 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 800667e:	78fb      	ldrb	r3, [r7, #3]
 8006680:	f003 0320 	and.w	r3, r3, #32
 8006684:	2b00      	cmp	r3, #0
 8006686:	d006      	beq.n	8006696 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8006688:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800668c:	2b00      	cmp	r3, #0
 800668e:	db02      	blt.n	8006696 <socket+0xaa>
 8006690:	f06f 0305 	mvn.w	r3, #5
 8006694:	e0b0      	b.n	80067f8 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8006696:	78fb      	ldrb	r3, [r7, #3]
 8006698:	f003 0310 	and.w	r3, r3, #16
 800669c:	2b00      	cmp	r3, #0
 800669e:	d008      	beq.n	80066b2 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80066a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	db04      	blt.n	80066b2 <socket+0xc6>
 80066a8:	f06f 0305 	mvn.w	r3, #5
 80066ac:	e0a4      	b.n	80067f8 <socket+0x20c>
   	      break;
 80066ae:	bf00      	nop
 80066b0:	e000      	b.n	80066b4 <socket+0xc8>
   	      break;
 80066b2:	bf00      	nop
   	}
   }
	close(sn);
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 f8ac 	bl	8006814 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	3301      	adds	r3, #1
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	4618      	mov	r0, r3
 80066c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066ca:	f023 030f 	bic.w	r3, r3, #15
 80066ce:	b25a      	sxtb	r2, r3
 80066d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	b25b      	sxtb	r3, r3
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	4619      	mov	r1, r3
 80066dc:	f000 fc78 	bl	8006fd0 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80066e0:	88bb      	ldrh	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d110      	bne.n	8006708 <socket+0x11c>
	{
	   port = sock_any_port++;
 80066e6:	4b46      	ldr	r3, [pc, #280]	; (8006800 <socket+0x214>)
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	b291      	uxth	r1, r2
 80066ee:	4a44      	ldr	r2, [pc, #272]	; (8006800 <socket+0x214>)
 80066f0:	8011      	strh	r1, [r2, #0]
 80066f2:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80066f4:	4b42      	ldr	r3, [pc, #264]	; (8006800 <socket+0x214>)
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d103      	bne.n	8006708 <socket+0x11c>
 8006700:	4b3f      	ldr	r3, [pc, #252]	; (8006800 <socket+0x214>)
 8006702:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006706:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8006708:	79fb      	ldrb	r3, [r7, #7]
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	3301      	adds	r3, #1
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006714:	461a      	mov	r2, r3
 8006716:	88bb      	ldrh	r3, [r7, #4]
 8006718:	0a1b      	lsrs	r3, r3, #8
 800671a:	b29b      	uxth	r3, r3
 800671c:	b2db      	uxtb	r3, r3
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f000 fc55 	bl	8006fd0 <WIZCHIP_WRITE>
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	3301      	adds	r3, #1
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006732:	461a      	mov	r2, r3
 8006734:	88bb      	ldrh	r3, [r7, #4]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	4619      	mov	r1, r3
 800673a:	4610      	mov	r0, r2
 800673c:	f000 fc48 	bl	8006fd0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8006740:	79fb      	ldrb	r3, [r7, #7]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	3301      	adds	r3, #1
 8006746:	00db      	lsls	r3, r3, #3
 8006748:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800674c:	2101      	movs	r1, #1
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fc3e 	bl	8006fd0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8006754:	bf00      	nop
 8006756:	79fb      	ldrb	r3, [r7, #7]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	3301      	adds	r3, #1
 800675c:	00db      	lsls	r3, r3, #3
 800675e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006762:	4618      	mov	r0, r3
 8006764:	f000 fbe8 	bl	8006f38 <WIZCHIP_READ>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1f3      	bne.n	8006756 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	2201      	movs	r2, #1
 8006772:	fa02 f303 	lsl.w	r3, r2, r3
 8006776:	b21b      	sxth	r3, r3
 8006778:	43db      	mvns	r3, r3
 800677a:	b21a      	sxth	r2, r3
 800677c:	4b21      	ldr	r3, [pc, #132]	; (8006804 <socket+0x218>)
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	b21b      	sxth	r3, r3
 8006782:	4013      	ands	r3, r2
 8006784:	b21b      	sxth	r3, r3
 8006786:	b29a      	uxth	r2, r3
 8006788:	4b1e      	ldr	r3, [pc, #120]	; (8006804 <socket+0x218>)
 800678a:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	f003 0201 	and.w	r2, r3, #1
 8006792:	79fb      	ldrb	r3, [r7, #7]
 8006794:	fa02 f303 	lsl.w	r3, r2, r3
 8006798:	b21a      	sxth	r2, r3
 800679a:	4b1a      	ldr	r3, [pc, #104]	; (8006804 <socket+0x218>)
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	b21b      	sxth	r3, r3
 80067a0:	4313      	orrs	r3, r2
 80067a2:	b21b      	sxth	r3, r3
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	4b17      	ldr	r3, [pc, #92]	; (8006804 <socket+0x218>)
 80067a8:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80067aa:	79fb      	ldrb	r3, [r7, #7]
 80067ac:	2201      	movs	r2, #1
 80067ae:	fa02 f303 	lsl.w	r3, r2, r3
 80067b2:	b21b      	sxth	r3, r3
 80067b4:	43db      	mvns	r3, r3
 80067b6:	b21a      	sxth	r2, r3
 80067b8:	4b13      	ldr	r3, [pc, #76]	; (8006808 <socket+0x21c>)
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b21b      	sxth	r3, r3
 80067be:	4013      	ands	r3, r2
 80067c0:	b21b      	sxth	r3, r3
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	4b10      	ldr	r3, [pc, #64]	; (8006808 <socket+0x21c>)
 80067c6:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	4a10      	ldr	r2, [pc, #64]	; (800680c <socket+0x220>)
 80067cc:	2100      	movs	r1, #0
 80067ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	4a0e      	ldr	r2, [pc, #56]	; (8006810 <socket+0x224>)
 80067d6:	2100      	movs	r1, #0
 80067d8:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80067da:	bf00      	nop
 80067dc:	79fb      	ldrb	r3, [r7, #7]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	3301      	adds	r3, #1
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fba5 	bl	8006f38 <WIZCHIP_READ>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0f3      	beq.n	80067dc <socket+0x1f0>
   return (int8_t)sn;
 80067f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd90      	pop	{r4, r7, pc}
 8006800:	20000044 	.word	0x20000044
 8006804:	20004212 	.word	0x20004212
 8006808:	20004214 	.word	0x20004214
 800680c:	20004218 	.word	0x20004218
 8006810:	20004228 	.word	0x20004228

08006814 <close>:

int8_t close(uint8_t sn)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800681e:	79fb      	ldrb	r3, [r7, #7]
 8006820:	2b08      	cmp	r3, #8
 8006822:	d902      	bls.n	800682a <close+0x16>
 8006824:	f04f 33ff 	mov.w	r3, #4294967295
 8006828:	e055      	b.n	80068d6 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	3301      	adds	r3, #1
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006836:	2110      	movs	r1, #16
 8006838:	4618      	mov	r0, r3
 800683a:	f000 fbc9 	bl	8006fd0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800683e:	bf00      	nop
 8006840:	79fb      	ldrb	r3, [r7, #7]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	3301      	adds	r3, #1
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800684c:	4618      	mov	r0, r3
 800684e:	f000 fb73 	bl	8006f38 <WIZCHIP_READ>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1f3      	bne.n	8006840 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	3301      	adds	r3, #1
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006864:	211f      	movs	r1, #31
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fbb2 	bl	8006fd0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	2201      	movs	r2, #1
 8006870:	fa02 f303 	lsl.w	r3, r2, r3
 8006874:	b21b      	sxth	r3, r3
 8006876:	43db      	mvns	r3, r3
 8006878:	b21a      	sxth	r2, r3
 800687a:	4b19      	ldr	r3, [pc, #100]	; (80068e0 <close+0xcc>)
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	b21b      	sxth	r3, r3
 8006880:	4013      	ands	r3, r2
 8006882:	b21b      	sxth	r3, r3
 8006884:	b29a      	uxth	r2, r3
 8006886:	4b16      	ldr	r3, [pc, #88]	; (80068e0 <close+0xcc>)
 8006888:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	2201      	movs	r2, #1
 800688e:	fa02 f303 	lsl.w	r3, r2, r3
 8006892:	b21b      	sxth	r3, r3
 8006894:	43db      	mvns	r3, r3
 8006896:	b21a      	sxth	r2, r3
 8006898:	4b12      	ldr	r3, [pc, #72]	; (80068e4 <close+0xd0>)
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	b21b      	sxth	r3, r3
 800689e:	4013      	ands	r3, r2
 80068a0:	b21b      	sxth	r3, r3
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	4b0f      	ldr	r3, [pc, #60]	; (80068e4 <close+0xd0>)
 80068a6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80068a8:	79fb      	ldrb	r3, [r7, #7]
 80068aa:	4a0f      	ldr	r2, [pc, #60]	; (80068e8 <close+0xd4>)
 80068ac:	2100      	movs	r1, #0
 80068ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80068b2:	79fb      	ldrb	r3, [r7, #7]
 80068b4:	4a0d      	ldr	r2, [pc, #52]	; (80068ec <close+0xd8>)
 80068b6:	2100      	movs	r1, #0
 80068b8:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80068ba:	bf00      	nop
 80068bc:	79fb      	ldrb	r3, [r7, #7]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	3301      	adds	r3, #1
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 fb35 	bl	8006f38 <WIZCHIP_READ>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1f3      	bne.n	80068bc <close+0xa8>
	return SOCK_OK;
 80068d4:	2301      	movs	r3, #1
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20004212 	.word	0x20004212
 80068e4:	20004214 	.word	0x20004214
 80068e8:	20004218 	.word	0x20004218
 80068ec:	20004228 	.word	0x20004228

080068f0 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60b9      	str	r1, [r7, #8]
 80068f8:	607b      	str	r3, [r7, #4]
 80068fa:	4603      	mov	r3, r0
 80068fc:	73fb      	strb	r3, [r7, #15]
 80068fe:	4613      	mov	r3, r2
 8006900:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800690a:	7bfb      	ldrb	r3, [r7, #15]
 800690c:	2b08      	cmp	r3, #8
 800690e:	d902      	bls.n	8006916 <sendto+0x26>
 8006910:	f04f 33ff 	mov.w	r3, #4294967295
 8006914:	e11b      	b.n	8006b4e <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	3301      	adds	r3, #1
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fb0a 	bl	8006f38 <WIZCHIP_READ>
 8006924:	4603      	mov	r3, r0
 8006926:	f003 030f 	and.w	r3, r3, #15
 800692a:	3b02      	subs	r3, #2
 800692c:	2b02      	cmp	r3, #2
 800692e:	d902      	bls.n	8006936 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8006930:	f06f 0304 	mvn.w	r3, #4
 8006934:	e10b      	b.n	8006b4e <sendto+0x25e>
         break;
 8006936:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8006938:	89bb      	ldrh	r3, [r7, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d102      	bne.n	8006944 <sendto+0x54>
 800693e:	f06f 030d 	mvn.w	r3, #13
 8006942:	e104      	b.n	8006b4e <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	3201      	adds	r2, #1
 8006952:	7812      	ldrb	r2, [r2, #0]
 8006954:	4413      	add	r3, r2
 8006956:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	021b      	lsls	r3, r3, #8
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	3202      	adds	r2, #2
 8006960:	7812      	ldrb	r2, [r2, #0]
 8006962:	4413      	add	r3, r2
 8006964:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	3203      	adds	r2, #3
 800696e:	7812      	ldrb	r2, [r2, #0]
 8006970:	4413      	add	r3, r2
 8006972:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10e      	bne.n	8006998 <sendto+0xa8>
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	3301      	adds	r3, #1
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fad8 	bl	8006f38 <WIZCHIP_READ>
 8006988:	4603      	mov	r3, r0
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b04      	cmp	r3, #4
 8006990:	d002      	beq.n	8006998 <sendto+0xa8>
 8006992:	f06f 030b 	mvn.w	r3, #11
 8006996:	e0da      	b.n	8006b4e <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8006998:	8c3b      	ldrh	r3, [r7, #32]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10e      	bne.n	80069bc <sendto+0xcc>
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	3301      	adds	r3, #1
 80069a4:	00db      	lsls	r3, r3, #3
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fac6 	bl	8006f38 <WIZCHIP_READ>
 80069ac:	4603      	mov	r3, r0
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d002      	beq.n	80069bc <sendto+0xcc>
 80069b6:	f06f 030a 	mvn.w	r3, #10
 80069ba:	e0c8      	b.n	8006b4e <sendto+0x25e>
   tmp = getSn_SR(sn);
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	3301      	adds	r3, #1
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 fab5 	bl	8006f38 <WIZCHIP_READ>
 80069ce:	4603      	mov	r3, r0
 80069d0:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
 80069d4:	2b42      	cmp	r3, #66	; 0x42
 80069d6:	d008      	beq.n	80069ea <sendto+0xfa>
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
 80069da:	2b22      	cmp	r3, #34	; 0x22
 80069dc:	d005      	beq.n	80069ea <sendto+0xfa>
 80069de:	7dfb      	ldrb	r3, [r7, #23]
 80069e0:	2b32      	cmp	r3, #50	; 0x32
 80069e2:	d002      	beq.n	80069ea <sendto+0xfa>
 80069e4:	f06f 0306 	mvn.w	r3, #6
 80069e8:	e0b1      	b.n	8006b4e <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	3301      	adds	r3, #1
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80069f6:	2204      	movs	r2, #4
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fb96 	bl	800712c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	3301      	adds	r3, #1
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	8c3b      	ldrh	r3, [r7, #32]
 8006a10:	0a1b      	lsrs	r3, r3, #8
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	4619      	mov	r1, r3
 8006a18:	4610      	mov	r0, r2
 8006a1a:	f000 fad9 	bl	8006fd0 <WIZCHIP_WRITE>
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	3301      	adds	r3, #1
 8006a24:	00db      	lsls	r3, r3, #3
 8006a26:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	8c3b      	ldrh	r3, [r7, #32]
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	4619      	mov	r1, r3
 8006a32:	4610      	mov	r0, r2
 8006a34:	f000 facc 	bl	8006fd0 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	00db      	lsls	r3, r3, #3
 8006a40:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 fa77 	bl	8006f38 <WIZCHIP_READ>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	029b      	lsls	r3, r3, #10
 8006a50:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8006a52:	89ba      	ldrh	r2, [r7, #12]
 8006a54:	8abb      	ldrh	r3, [r7, #20]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d901      	bls.n	8006a5e <sendto+0x16e>
 8006a5a:	8abb      	ldrh	r3, [r7, #20]
 8006a5c:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fbc3 	bl	80071ec <getSn_TX_FSR>
 8006a66:	4603      	mov	r3, r0
 8006a68:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	3301      	adds	r3, #1
 8006a70:	00db      	lsls	r3, r3, #3
 8006a72:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fa5e 	bl	8006f38 <WIZCHIP_READ>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d102      	bne.n	8006a88 <sendto+0x198>
 8006a82:	f06f 0303 	mvn.w	r3, #3
 8006a86:	e062      	b.n	8006b4e <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8006a88:	4b33      	ldr	r3, [pc, #204]	; (8006b58 <sendto+0x268>)
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	fa42 f303 	asr.w	r3, r2, r3
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <sendto+0x1b8>
 8006a9c:	89ba      	ldrh	r2, [r7, #12]
 8006a9e:	8abb      	ldrh	r3, [r7, #20]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d901      	bls.n	8006aa8 <sendto+0x1b8>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	e052      	b.n	8006b4e <sendto+0x25e>
      if(len <= freesize) break;
 8006aa8:	89ba      	ldrh	r2, [r7, #12]
 8006aaa:	8abb      	ldrh	r3, [r7, #20]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d900      	bls.n	8006ab2 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8006ab0:	e7d5      	b.n	8006a5e <sendto+0x16e>
      if(len <= freesize) break;
 8006ab2:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8006ab4:	89ba      	ldrh	r2, [r7, #12]
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 fc2c 	bl	8007318 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006acc:	2120      	movs	r1, #32
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 fa7e 	bl	8006fd0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8006ad4:	bf00      	nop
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	3301      	adds	r3, #1
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fa28 	bl	8006f38 <WIZCHIP_READ>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1f3      	bne.n	8006ad6 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	3301      	adds	r3, #1
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 fa1c 	bl	8006f38 <WIZCHIP_READ>
 8006b00:	4603      	mov	r3, r0
 8006b02:	f003 031f 	and.w	r3, r3, #31
 8006b06:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8006b08:	7dfb      	ldrb	r3, [r7, #23]
 8006b0a:	f003 0310 	and.w	r3, r3, #16
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00c      	beq.n	8006b2c <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	3301      	adds	r3, #1
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006b1e:	2110      	movs	r1, #16
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fa55 	bl	8006fd0 <WIZCHIP_WRITE>
         break;
 8006b26:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8006b28:	89bb      	ldrh	r3, [r7, #12]
 8006b2a:	e010      	b.n	8006b4e <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
 8006b2e:	f003 0308 	and.w	r3, r3, #8
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0db      	beq.n	8006aee <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	00db      	lsls	r3, r3, #3
 8006b3e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006b42:	2108      	movs	r1, #8
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fa43 	bl	8006fd0 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8006b4a:	f06f 030c 	mvn.w	r3, #12
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20004212 	.word	0x20004212

08006b5c <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b088      	sub	sp, #32
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	607b      	str	r3, [r7, #4]
 8006b66:	4603      	mov	r3, r0
 8006b68:	73fb      	strb	r3, [r7, #15]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d902      	bls.n	8006b7e <recvfrom+0x22>
 8006b78:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7c:	e1d4      	b.n	8006f28 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	3301      	adds	r3, #1
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 f9d6 	bl	8006f38 <WIZCHIP_READ>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	777b      	strb	r3, [r7, #29]
 8006b90:	7f7b      	ldrb	r3, [r7, #29]
 8006b92:	f003 030f 	and.w	r3, r3, #15
 8006b96:	3b02      	subs	r3, #2
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d902      	bls.n	8006ba2 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8006b9c:	f06f 0304 	mvn.w	r3, #4
 8006ba0:	e1c2      	b.n	8006f28 <recvfrom+0x3cc>
         break;
 8006ba2:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8006ba4:	89bb      	ldrh	r3, [r7, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d102      	bne.n	8006bb0 <recvfrom+0x54>
 8006baa:	f06f 030d 	mvn.w	r3, #13
 8006bae:	e1bb      	b.n	8006f28 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	4a88      	ldr	r2, [pc, #544]	; (8006dd4 <recvfrom+0x278>)
 8006bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d128      	bne.n	8006c0e <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fb5f 	bl	8007282 <getSn_RX_RSR>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	3301      	adds	r3, #1
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 f9af 	bl	8006f38 <WIZCHIP_READ>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d102      	bne.n	8006be6 <recvfrom+0x8a>
 8006be0:	f06f 0303 	mvn.w	r3, #3
 8006be4:	e1a0      	b.n	8006f28 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8006be6:	4b7c      	ldr	r3, [pc, #496]	; (8006dd8 <recvfrom+0x27c>)
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	fa42 f303 	asr.w	r3, r2, r3
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d004      	beq.n	8006c04 <recvfrom+0xa8>
 8006bfa:	8bfb      	ldrh	r3, [r7, #30]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <recvfrom+0xa8>
 8006c00:	2300      	movs	r3, #0
 8006c02:	e191      	b.n	8006f28 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8006c04:	8bfb      	ldrh	r3, [r7, #30]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d100      	bne.n	8006c0c <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8006c0a:	e7d7      	b.n	8006bbc <recvfrom+0x60>
         if(pack_len != 0) break;
 8006c0c:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8006c0e:	7f7b      	ldrb	r3, [r7, #29]
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d079      	beq.n	8006d0c <recvfrom+0x1b0>
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	f300 8142 	bgt.w	8006ea2 <recvfrom+0x346>
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d003      	beq.n	8006c2a <recvfrom+0xce>
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	f000 80dc 	beq.w	8006de0 <recvfrom+0x284>
 8006c28:	e13b      	b.n	8006ea2 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	4a69      	ldr	r2, [pc, #420]	; (8006dd4 <recvfrom+0x278>)
 8006c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d152      	bne.n	8006cdc <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8006c36:	f107 0114 	add.w	r1, r7, #20
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 fbc6 	bl	80073d0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	3301      	adds	r3, #1
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006c50:	2140      	movs	r1, #64	; 0x40
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 f9bc 	bl	8006fd0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8006c58:	bf00      	nop
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	3301      	adds	r3, #1
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 f966 	bl	8006f38 <WIZCHIP_READ>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f3      	bne.n	8006c5a <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8006c72:	7d3a      	ldrb	r2, [r7, #20]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	7d7a      	ldrb	r2, [r7, #21]
 8006c7e:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3302      	adds	r3, #2
 8006c84:	7dba      	ldrb	r2, [r7, #22]
 8006c86:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	3303      	adds	r3, #3
 8006c8c:	7dfa      	ldrb	r2, [r7, #23]
 8006c8e:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8006c90:	7e3b      	ldrb	r3, [r7, #24]
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8006c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	021b      	lsls	r3, r3, #8
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	7e7b      	ldrb	r3, [r7, #25]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	4413      	add	r3, r2
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8006cac:	7eba      	ldrb	r2, [r7, #26]
 8006cae:	7bfb      	ldrb	r3, [r7, #15]
 8006cb0:	b291      	uxth	r1, r2
 8006cb2:	4a48      	ldr	r2, [pc, #288]	; (8006dd4 <recvfrom+0x278>)
 8006cb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	4a46      	ldr	r2, [pc, #280]	; (8006dd4 <recvfrom+0x278>)
 8006cbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cc0:	021b      	lsls	r3, r3, #8
 8006cc2:	b299      	uxth	r1, r3
 8006cc4:	7efb      	ldrb	r3, [r7, #27]
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	440a      	add	r2, r1
 8006ccc:	b291      	uxth	r1, r2
 8006cce:	4a41      	ldr	r2, [pc, #260]	; (8006dd4 <recvfrom+0x278>)
 8006cd0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
 8006cd6:	4a41      	ldr	r2, [pc, #260]	; (8006ddc <recvfrom+0x280>)
 8006cd8:	2180      	movs	r1, #128	; 0x80
 8006cda:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	4a3d      	ldr	r2, [pc, #244]	; (8006dd4 <recvfrom+0x278>)
 8006ce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ce4:	89ba      	ldrh	r2, [r7, #12]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d202      	bcs.n	8006cf0 <recvfrom+0x194>
 8006cea:	89bb      	ldrh	r3, [r7, #12]
 8006cec:	83fb      	strh	r3, [r7, #30]
 8006cee:	e004      	b.n	8006cfa <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	4a38      	ldr	r2, [pc, #224]	; (8006dd4 <recvfrom+0x278>)
 8006cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf8:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8006cfa:	8bfb      	ldrh	r3, [r7, #30]
 8006cfc:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8006cfe:	8bfa      	ldrh	r2, [r7, #30]
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	68b9      	ldr	r1, [r7, #8]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 fb63 	bl	80073d0 <wiz_recv_data>
			break;
 8006d0a:	e0d6      	b.n	8006eba <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	4a31      	ldr	r2, [pc, #196]	; (8006dd4 <recvfrom+0x278>)
 8006d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d146      	bne.n	8006da6 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8006d18:	f107 0114 	add.w	r1, r7, #20
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fb55 	bl	80073d0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	00db      	lsls	r3, r3, #3
 8006d2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006d32:	2140      	movs	r1, #64	; 0x40
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 f94b 	bl	8006fd0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8006d3a:	bf00      	nop
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	3301      	adds	r3, #1
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 f8f5 	bl	8006f38 <WIZCHIP_READ>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1f3      	bne.n	8006d3c <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8006d54:	7d3a      	ldrb	r2, [r7, #20]
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	b291      	uxth	r1, r2
 8006d5a:	4a1e      	ldr	r2, [pc, #120]	; (8006dd4 <recvfrom+0x278>)
 8006d5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	4a1c      	ldr	r2, [pc, #112]	; (8006dd4 <recvfrom+0x278>)
 8006d64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d68:	021b      	lsls	r3, r3, #8
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	7d7b      	ldrb	r3, [r7, #21]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	4413      	add	r3, r2
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	3a02      	subs	r2, #2
 8006d78:	b291      	uxth	r1, r2
 8006d7a:	4a16      	ldr	r2, [pc, #88]	; (8006dd4 <recvfrom+0x278>)
 8006d7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	4a14      	ldr	r2, [pc, #80]	; (8006dd4 <recvfrom+0x278>)
 8006d84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d88:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d906      	bls.n	8006d9e <recvfrom+0x242>
   			{
   			   close(sn);
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fd3e 	bl	8006814 <close>
   			   return SOCKFATAL_PACKLEN;
 8006d98:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8006d9c:	e0c4      	b.n	8006f28 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	4a0e      	ldr	r2, [pc, #56]	; (8006ddc <recvfrom+0x280>)
 8006da2:	2180      	movs	r1, #128	; 0x80
 8006da4:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
 8006da8:	4a0a      	ldr	r2, [pc, #40]	; (8006dd4 <recvfrom+0x278>)
 8006daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dae:	89ba      	ldrh	r2, [r7, #12]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d202      	bcs.n	8006dba <recvfrom+0x25e>
 8006db4:	89bb      	ldrh	r3, [r7, #12]
 8006db6:	83fb      	strh	r3, [r7, #30]
 8006db8:	e004      	b.n	8006dc4 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
 8006dbc:	4a05      	ldr	r2, [pc, #20]	; (8006dd4 <recvfrom+0x278>)
 8006dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dc2:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8006dc4:	8bfa      	ldrh	r2, [r7, #30]
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fb00 	bl	80073d0 <wiz_recv_data>
		   break;
 8006dd0:	e073      	b.n	8006eba <recvfrom+0x35e>
 8006dd2:	bf00      	nop
 8006dd4:	20004218 	.word	0x20004218
 8006dd8:	20004212 	.word	0x20004212
 8006ddc:	20004228 	.word	0x20004228
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	4a53      	ldr	r2, [pc, #332]	; (8006f30 <recvfrom+0x3d4>)
 8006de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d144      	bne.n	8006e76 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8006dec:	f107 0114 	add.w	r1, r7, #20
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
 8006df2:	2206      	movs	r2, #6
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 faeb 	bl	80073d0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	3301      	adds	r3, #1
 8006e00:	00db      	lsls	r3, r3, #3
 8006e02:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006e06:	2140      	movs	r1, #64	; 0x40
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 f8e1 	bl	8006fd0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8006e0e:	bf00      	nop
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	3301      	adds	r3, #1
 8006e16:	00db      	lsls	r3, r3, #3
 8006e18:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 f88b 	bl	8006f38 <WIZCHIP_READ>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1f3      	bne.n	8006e10 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8006e28:	7d3a      	ldrb	r2, [r7, #20]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3301      	adds	r3, #1
 8006e32:	7d7a      	ldrb	r2, [r7, #21]
 8006e34:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	3302      	adds	r3, #2
 8006e3a:	7dba      	ldrb	r2, [r7, #22]
 8006e3c:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3303      	adds	r3, #3
 8006e42:	7dfa      	ldrb	r2, [r7, #23]
 8006e44:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8006e46:	7e3a      	ldrb	r2, [r7, #24]
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	b291      	uxth	r1, r2
 8006e4c:	4a38      	ldr	r2, [pc, #224]	; (8006f30 <recvfrom+0x3d4>)
 8006e4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	4a36      	ldr	r2, [pc, #216]	; (8006f30 <recvfrom+0x3d4>)
 8006e56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	b299      	uxth	r1, r3
 8006e5e:	7e7b      	ldrb	r3, [r7, #25]
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
 8006e64:	440a      	add	r2, r1
 8006e66:	b291      	uxth	r1, r2
 8006e68:	4a31      	ldr	r2, [pc, #196]	; (8006f30 <recvfrom+0x3d4>)
 8006e6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	4a30      	ldr	r2, [pc, #192]	; (8006f34 <recvfrom+0x3d8>)
 8006e72:	2180      	movs	r1, #128	; 0x80
 8006e74:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	4a2d      	ldr	r2, [pc, #180]	; (8006f30 <recvfrom+0x3d4>)
 8006e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e7e:	89ba      	ldrh	r2, [r7, #12]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d202      	bcs.n	8006e8a <recvfrom+0x32e>
 8006e84:	89bb      	ldrh	r3, [r7, #12]
 8006e86:	83fb      	strh	r3, [r7, #30]
 8006e88:	e004      	b.n	8006e94 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8006e8a:	7bfb      	ldrb	r3, [r7, #15]
 8006e8c:	4a28      	ldr	r2, [pc, #160]	; (8006f30 <recvfrom+0x3d4>)
 8006e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e92:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8006e94:	8bfa      	ldrh	r2, [r7, #30]
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	68b9      	ldr	r1, [r7, #8]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fa98 	bl	80073d0 <wiz_recv_data>
			break;
 8006ea0:	e00b      	b.n	8006eba <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8006ea2:	8bfa      	ldrh	r2, [r7, #30]
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 faed 	bl	8007488 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
 8006eb0:	491f      	ldr	r1, [pc, #124]	; (8006f30 <recvfrom+0x3d4>)
 8006eb2:	8bfa      	ldrh	r2, [r7, #30]
 8006eb4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8006eb8:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006ec6:	2140      	movs	r1, #64	; 0x40
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 f881 	bl	8006fd0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8006ece:	bf00      	nop
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 f82b 	bl	8006f38 <WIZCHIP_READ>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1f3      	bne.n	8006ed0 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	4a11      	ldr	r2, [pc, #68]	; (8006f30 <recvfrom+0x3d4>)
 8006eec:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	8bfa      	ldrh	r2, [r7, #30]
 8006ef4:	1a8a      	subs	r2, r1, r2
 8006ef6:	b291      	uxth	r1, r2
 8006ef8:	4a0d      	ldr	r2, [pc, #52]	; (8006f30 <recvfrom+0x3d4>)
 8006efa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	4a0b      	ldr	r2, [pc, #44]	; (8006f30 <recvfrom+0x3d4>)
 8006f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d009      	beq.n	8006f1e <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	4a09      	ldr	r2, [pc, #36]	; (8006f34 <recvfrom+0x3d8>)
 8006f0e:	5cd2      	ldrb	r2, [r2, r3]
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	f042 0201 	orr.w	r2, r2, #1
 8006f16:	b2d1      	uxtb	r1, r2
 8006f18:	4a06      	ldr	r2, [pc, #24]	; (8006f34 <recvfrom+0x3d8>)
 8006f1a:	54d1      	strb	r1, [r2, r3]
 8006f1c:	e003      	b.n	8006f26 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
 8006f20:	4a04      	ldr	r2, [pc, #16]	; (8006f34 <recvfrom+0x3d8>)
 8006f22:	2100      	movs	r1, #0
 8006f24:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8006f26:	8bfb      	ldrh	r3, [r7, #30]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3720      	adds	r7, #32
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	20004218 	.word	0x20004218
 8006f34:	20004228 	.word	0x20004228

08006f38 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8006f40:	4b22      	ldr	r3, [pc, #136]	; (8006fcc <WIZCHIP_READ+0x94>)
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006f46:	4b21      	ldr	r3, [pc, #132]	; (8006fcc <WIZCHIP_READ+0x94>)
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006f4c:	4b1f      	ldr	r3, [pc, #124]	; (8006fcc <WIZCHIP_READ+0x94>)
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <WIZCHIP_READ+0x24>
 8006f54:	4b1d      	ldr	r3, [pc, #116]	; (8006fcc <WIZCHIP_READ+0x94>)
 8006f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d114      	bne.n	8006f86 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8006f5c:	4b1b      	ldr	r3, [pc, #108]	; (8006fcc <WIZCHIP_READ+0x94>)
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	0c12      	lsrs	r2, r2, #16
 8006f64:	b2d2      	uxtb	r2, r2
 8006f66:	4610      	mov	r0, r2
 8006f68:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8006f6a:	4b18      	ldr	r3, [pc, #96]	; (8006fcc <WIZCHIP_READ+0x94>)
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	0a12      	lsrs	r2, r2, #8
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	4610      	mov	r0, r2
 8006f76:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006f78:	4b14      	ldr	r3, [pc, #80]	; (8006fcc <WIZCHIP_READ+0x94>)
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	4610      	mov	r0, r2
 8006f82:	4798      	blx	r3
 8006f84:	e011      	b.n	8006faa <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	0c1b      	lsrs	r3, r3, #16
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	0a1b      	lsrs	r3, r3, #8
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8006f9c:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <WIZCHIP_READ+0x94>)
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa0:	f107 020c 	add.w	r2, r7, #12
 8006fa4:	2103      	movs	r1, #3
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8006faa:	4b08      	ldr	r3, [pc, #32]	; (8006fcc <WIZCHIP_READ+0x94>)
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	4798      	blx	r3
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8006fb4:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <WIZCHIP_READ+0x94>)
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006fba:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <WIZCHIP_READ+0x94>)
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	4798      	blx	r3
   return ret;
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000048 	.word	0x20000048

08006fd0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8006fdc:	4b22      	ldr	r3, [pc, #136]	; (8007068 <WIZCHIP_WRITE+0x98>)
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006fe2:	4b21      	ldr	r3, [pc, #132]	; (8007068 <WIZCHIP_WRITE+0x98>)
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f043 0304 	orr.w	r3, r3, #4
 8006fee:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006ff0:	4b1d      	ldr	r3, [pc, #116]	; (8007068 <WIZCHIP_WRITE+0x98>)
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d119      	bne.n	800702c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8006ff8:	4b1b      	ldr	r3, [pc, #108]	; (8007068 <WIZCHIP_WRITE+0x98>)
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	0c12      	lsrs	r2, r2, #16
 8007000:	b2d2      	uxtb	r2, r2
 8007002:	4610      	mov	r0, r2
 8007004:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007006:	4b18      	ldr	r3, [pc, #96]	; (8007068 <WIZCHIP_WRITE+0x98>)
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	0a12      	lsrs	r2, r2, #8
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	4610      	mov	r0, r2
 8007012:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007014:	4b14      	ldr	r3, [pc, #80]	; (8007068 <WIZCHIP_WRITE+0x98>)
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	b2d2      	uxtb	r2, r2
 800701c:	4610      	mov	r0, r2
 800701e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8007020:	4b11      	ldr	r3, [pc, #68]	; (8007068 <WIZCHIP_WRITE+0x98>)
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	78fa      	ldrb	r2, [r7, #3]
 8007026:	4610      	mov	r0, r2
 8007028:	4798      	blx	r3
 800702a:	e013      	b.n	8007054 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	0c1b      	lsrs	r3, r3, #16
 8007030:	b2db      	uxtb	r3, r3
 8007032:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	0a1b      	lsrs	r3, r3, #8
 8007038:	b2db      	uxtb	r3, r3
 800703a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8007042:	78fb      	ldrb	r3, [r7, #3]
 8007044:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8007046:	4b08      	ldr	r3, [pc, #32]	; (8007068 <WIZCHIP_WRITE+0x98>)
 8007048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704a:	f107 020c 	add.w	r2, r7, #12
 800704e:	2104      	movs	r1, #4
 8007050:	4610      	mov	r0, r2
 8007052:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8007054:	4b04      	ldr	r3, [pc, #16]	; (8007068 <WIZCHIP_WRITE+0x98>)
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800705a:	4b03      	ldr	r3, [pc, #12]	; (8007068 <WIZCHIP_WRITE+0x98>)
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	4798      	blx	r3
}
 8007060:	bf00      	nop
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20000048 	.word	0x20000048

0800706c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800706c:	b590      	push	{r4, r7, lr}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	4613      	mov	r3, r2
 8007078:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800707a:	4b2b      	ldr	r3, [pc, #172]	; (8007128 <WIZCHIP_READ_BUF+0xbc>)
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007080:	4b29      	ldr	r3, [pc, #164]	; (8007128 <WIZCHIP_READ_BUF+0xbc>)
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007086:	4b28      	ldr	r3, [pc, #160]	; (8007128 <WIZCHIP_READ_BUF+0xbc>)
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <WIZCHIP_READ_BUF+0x2a>
 800708e:	4b26      	ldr	r3, [pc, #152]	; (8007128 <WIZCHIP_READ_BUF+0xbc>)
 8007090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007092:	2b00      	cmp	r3, #0
 8007094:	d126      	bne.n	80070e4 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007096:	4b24      	ldr	r3, [pc, #144]	; (8007128 <WIZCHIP_READ_BUF+0xbc>)
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	0c12      	lsrs	r2, r2, #16
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	4610      	mov	r0, r2
 80070a2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80070a4:	4b20      	ldr	r3, [pc, #128]	; (8007128 <WIZCHIP_READ_BUF+0xbc>)
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	0a12      	lsrs	r2, r2, #8
 80070ac:	b2d2      	uxtb	r2, r2
 80070ae:	4610      	mov	r0, r2
 80070b0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80070b2:	4b1d      	ldr	r3, [pc, #116]	; (8007128 <WIZCHIP_READ_BUF+0xbc>)
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	b2d2      	uxtb	r2, r2
 80070ba:	4610      	mov	r0, r2
 80070bc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80070be:	2300      	movs	r3, #0
 80070c0:	82fb      	strh	r3, [r7, #22]
 80070c2:	e00a      	b.n	80070da <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80070c4:	4b18      	ldr	r3, [pc, #96]	; (8007128 <WIZCHIP_READ_BUF+0xbc>)
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	8afa      	ldrh	r2, [r7, #22]
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	188c      	adds	r4, r1, r2
 80070ce:	4798      	blx	r3
 80070d0:	4603      	mov	r3, r0
 80070d2:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80070d4:	8afb      	ldrh	r3, [r7, #22]
 80070d6:	3301      	adds	r3, #1
 80070d8:	82fb      	strh	r3, [r7, #22]
 80070da:	8afa      	ldrh	r2, [r7, #22]
 80070dc:	88fb      	ldrh	r3, [r7, #6]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d3f0      	bcc.n	80070c4 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80070e2:	e017      	b.n	8007114 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	0c1b      	lsrs	r3, r3, #16
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	0a1b      	lsrs	r3, r3, #8
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80070fa:	4b0b      	ldr	r3, [pc, #44]	; (8007128 <WIZCHIP_READ_BUF+0xbc>)
 80070fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fe:	f107 0210 	add.w	r2, r7, #16
 8007102:	2103      	movs	r1, #3
 8007104:	4610      	mov	r0, r2
 8007106:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8007108:	4b07      	ldr	r3, [pc, #28]	; (8007128 <WIZCHIP_READ_BUF+0xbc>)
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	88fa      	ldrh	r2, [r7, #6]
 800710e:	4611      	mov	r1, r2
 8007110:	68b8      	ldr	r0, [r7, #8]
 8007112:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8007114:	4b04      	ldr	r3, [pc, #16]	; (8007128 <WIZCHIP_READ_BUF+0xbc>)
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800711a:	4b03      	ldr	r3, [pc, #12]	; (8007128 <WIZCHIP_READ_BUF+0xbc>)
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	4798      	blx	r3
}
 8007120:	bf00      	nop
 8007122:	371c      	adds	r7, #28
 8007124:	46bd      	mov	sp, r7
 8007126:	bd90      	pop	{r4, r7, pc}
 8007128:	20000048 	.word	0x20000048

0800712c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	4613      	mov	r3, r2
 8007138:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800713a:	4b2b      	ldr	r3, [pc, #172]	; (80071e8 <WIZCHIP_WRITE_BUF+0xbc>)
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007140:	4b29      	ldr	r3, [pc, #164]	; (80071e8 <WIZCHIP_WRITE_BUF+0xbc>)
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f043 0304 	orr.w	r3, r3, #4
 800714c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800714e:	4b26      	ldr	r3, [pc, #152]	; (80071e8 <WIZCHIP_WRITE_BUF+0xbc>)
 8007150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007152:	2b00      	cmp	r3, #0
 8007154:	d126      	bne.n	80071a4 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007156:	4b24      	ldr	r3, [pc, #144]	; (80071e8 <WIZCHIP_WRITE_BUF+0xbc>)
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	0c12      	lsrs	r2, r2, #16
 800715e:	b2d2      	uxtb	r2, r2
 8007160:	4610      	mov	r0, r2
 8007162:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007164:	4b20      	ldr	r3, [pc, #128]	; (80071e8 <WIZCHIP_WRITE_BUF+0xbc>)
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	0a12      	lsrs	r2, r2, #8
 800716c:	b2d2      	uxtb	r2, r2
 800716e:	4610      	mov	r0, r2
 8007170:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007172:	4b1d      	ldr	r3, [pc, #116]	; (80071e8 <WIZCHIP_WRITE_BUF+0xbc>)
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	4610      	mov	r0, r2
 800717c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800717e:	2300      	movs	r3, #0
 8007180:	82fb      	strh	r3, [r7, #22]
 8007182:	e00a      	b.n	800719a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8007184:	4b18      	ldr	r3, [pc, #96]	; (80071e8 <WIZCHIP_WRITE_BUF+0xbc>)
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	8afa      	ldrh	r2, [r7, #22]
 800718a:	68b9      	ldr	r1, [r7, #8]
 800718c:	440a      	add	r2, r1
 800718e:	7812      	ldrb	r2, [r2, #0]
 8007190:	4610      	mov	r0, r2
 8007192:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8007194:	8afb      	ldrh	r3, [r7, #22]
 8007196:	3301      	adds	r3, #1
 8007198:	82fb      	strh	r3, [r7, #22]
 800719a:	8afa      	ldrh	r2, [r7, #22]
 800719c:	88fb      	ldrh	r3, [r7, #6]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d3f0      	bcc.n	8007184 <WIZCHIP_WRITE_BUF+0x58>
 80071a2:	e017      	b.n	80071d4 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	0c1b      	lsrs	r3, r3, #16
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	0a1b      	lsrs	r3, r3, #8
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80071ba:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <WIZCHIP_WRITE_BUF+0xbc>)
 80071bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071be:	f107 0210 	add.w	r2, r7, #16
 80071c2:	2103      	movs	r1, #3
 80071c4:	4610      	mov	r0, r2
 80071c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80071c8:	4b07      	ldr	r3, [pc, #28]	; (80071e8 <WIZCHIP_WRITE_BUF+0xbc>)
 80071ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071cc:	88fa      	ldrh	r2, [r7, #6]
 80071ce:	4611      	mov	r1, r2
 80071d0:	68b8      	ldr	r0, [r7, #8]
 80071d2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80071d4:	4b04      	ldr	r3, [pc, #16]	; (80071e8 <WIZCHIP_WRITE_BUF+0xbc>)
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80071da:	4b03      	ldr	r3, [pc, #12]	; (80071e8 <WIZCHIP_WRITE_BUF+0xbc>)
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	4798      	blx	r3
}
 80071e0:	bf00      	nop
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20000048 	.word	0x20000048

080071ec <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80071ec:	b590      	push	{r4, r7, lr}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	4603      	mov	r3, r0
 80071f4:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	81fb      	strh	r3, [r7, #14]
 80071fa:	2300      	movs	r3, #0
 80071fc:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80071fe:	79fb      	ldrb	r3, [r7, #7]
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	3301      	adds	r3, #1
 8007204:	00db      	lsls	r3, r3, #3
 8007206:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff fe94 	bl	8006f38 <WIZCHIP_READ>
 8007210:	4603      	mov	r3, r0
 8007212:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8007214:	89bb      	ldrh	r3, [r7, #12]
 8007216:	021b      	lsls	r3, r3, #8
 8007218:	b29c      	uxth	r4, r3
 800721a:	79fb      	ldrb	r3, [r7, #7]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	3301      	adds	r3, #1
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007226:	4618      	mov	r0, r3
 8007228:	f7ff fe86 	bl	8006f38 <WIZCHIP_READ>
 800722c:	4603      	mov	r3, r0
 800722e:	b29b      	uxth	r3, r3
 8007230:	4423      	add	r3, r4
 8007232:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8007234:	89bb      	ldrh	r3, [r7, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d01a      	beq.n	8007270 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800723a:	79fb      	ldrb	r3, [r7, #7]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	3301      	adds	r3, #1
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007246:	4618      	mov	r0, r3
 8007248:	f7ff fe76 	bl	8006f38 <WIZCHIP_READ>
 800724c:	4603      	mov	r3, r0
 800724e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8007250:	89fb      	ldrh	r3, [r7, #14]
 8007252:	021b      	lsls	r3, r3, #8
 8007254:	b29c      	uxth	r4, r3
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	3301      	adds	r3, #1
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff fe68 	bl	8006f38 <WIZCHIP_READ>
 8007268:	4603      	mov	r3, r0
 800726a:	b29b      	uxth	r3, r3
 800726c:	4423      	add	r3, r4
 800726e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8007270:	89fa      	ldrh	r2, [r7, #14]
 8007272:	89bb      	ldrh	r3, [r7, #12]
 8007274:	429a      	cmp	r2, r3
 8007276:	d1c2      	bne.n	80071fe <getSn_TX_FSR+0x12>
   return val;
 8007278:	89fb      	ldrh	r3, [r7, #14]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	bd90      	pop	{r4, r7, pc}

08007282 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8007282:	b590      	push	{r4, r7, lr}
 8007284:	b085      	sub	sp, #20
 8007286:	af00      	add	r7, sp, #0
 8007288:	4603      	mov	r3, r0
 800728a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800728c:	2300      	movs	r3, #0
 800728e:	81fb      	strh	r3, [r7, #14]
 8007290:	2300      	movs	r3, #0
 8007292:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8007294:	79fb      	ldrb	r3, [r7, #7]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	3301      	adds	r3, #1
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff fe49 	bl	8006f38 <WIZCHIP_READ>
 80072a6:	4603      	mov	r3, r0
 80072a8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80072aa:	89bb      	ldrh	r3, [r7, #12]
 80072ac:	021b      	lsls	r3, r3, #8
 80072ae:	b29c      	uxth	r4, r3
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	3301      	adds	r3, #1
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80072bc:	4618      	mov	r0, r3
 80072be:	f7ff fe3b 	bl	8006f38 <WIZCHIP_READ>
 80072c2:	4603      	mov	r3, r0
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	4423      	add	r3, r4
 80072c8:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80072ca:	89bb      	ldrh	r3, [r7, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d01a      	beq.n	8007306 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	3301      	adds	r3, #1
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff fe2b 	bl	8006f38 <WIZCHIP_READ>
 80072e2:	4603      	mov	r3, r0
 80072e4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80072e6:	89fb      	ldrh	r3, [r7, #14]
 80072e8:	021b      	lsls	r3, r3, #8
 80072ea:	b29c      	uxth	r4, r3
 80072ec:	79fb      	ldrb	r3, [r7, #7]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	3301      	adds	r3, #1
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff fe1d 	bl	8006f38 <WIZCHIP_READ>
 80072fe:	4603      	mov	r3, r0
 8007300:	b29b      	uxth	r3, r3
 8007302:	4423      	add	r3, r4
 8007304:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8007306:	89fa      	ldrh	r2, [r7, #14]
 8007308:	89bb      	ldrh	r3, [r7, #12]
 800730a:	429a      	cmp	r2, r3
 800730c:	d1c2      	bne.n	8007294 <getSn_RX_RSR+0x12>
   return val;
 800730e:	89fb      	ldrh	r3, [r7, #14]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	bd90      	pop	{r4, r7, pc}

08007318 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8007318:	b590      	push	{r4, r7, lr}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	4603      	mov	r3, r0
 8007320:	6039      	str	r1, [r7, #0]
 8007322:	71fb      	strb	r3, [r7, #7]
 8007324:	4613      	mov	r3, r2
 8007326:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8007328:	2300      	movs	r3, #0
 800732a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800732c:	2300      	movs	r3, #0
 800732e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8007330:	88bb      	ldrh	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d048      	beq.n	80073c8 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8007336:	79fb      	ldrb	r3, [r7, #7]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	3301      	adds	r3, #1
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007342:	4618      	mov	r0, r3
 8007344:	f7ff fdf8 	bl	8006f38 <WIZCHIP_READ>
 8007348:	4603      	mov	r3, r0
 800734a:	b29b      	uxth	r3, r3
 800734c:	021b      	lsls	r3, r3, #8
 800734e:	b29c      	uxth	r4, r3
 8007350:	79fb      	ldrb	r3, [r7, #7]
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	3301      	adds	r3, #1
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff fdeb 	bl	8006f38 <WIZCHIP_READ>
 8007362:	4603      	mov	r3, r0
 8007364:	b29b      	uxth	r3, r3
 8007366:	4423      	add	r3, r4
 8007368:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800736a:	89fb      	ldrh	r3, [r7, #14]
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	79fa      	ldrb	r2, [r7, #7]
 8007370:	0092      	lsls	r2, r2, #2
 8007372:	3202      	adds	r2, #2
 8007374:	00d2      	lsls	r2, r2, #3
 8007376:	4413      	add	r3, r2
 8007378:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800737a:	88bb      	ldrh	r3, [r7, #4]
 800737c:	461a      	mov	r2, r3
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	68b8      	ldr	r0, [r7, #8]
 8007382:	f7ff fed3 	bl	800712c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8007386:	89fa      	ldrh	r2, [r7, #14]
 8007388:	88bb      	ldrh	r3, [r7, #4]
 800738a:	4413      	add	r3, r2
 800738c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800738e:	79fb      	ldrb	r3, [r7, #7]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	3301      	adds	r3, #1
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800739a:	461a      	mov	r2, r3
 800739c:	89fb      	ldrh	r3, [r7, #14]
 800739e:	0a1b      	lsrs	r3, r3, #8
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	4619      	mov	r1, r3
 80073a6:	4610      	mov	r0, r2
 80073a8:	f7ff fe12 	bl	8006fd0 <WIZCHIP_WRITE>
 80073ac:	79fb      	ldrb	r3, [r7, #7]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	3301      	adds	r3, #1
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80073b8:	461a      	mov	r2, r3
 80073ba:	89fb      	ldrh	r3, [r7, #14]
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	4619      	mov	r1, r3
 80073c0:	4610      	mov	r0, r2
 80073c2:	f7ff fe05 	bl	8006fd0 <WIZCHIP_WRITE>
 80073c6:	e000      	b.n	80073ca <wiz_send_data+0xb2>
   if(len == 0)  return;
 80073c8:	bf00      	nop
}
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd90      	pop	{r4, r7, pc}

080073d0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80073d0:	b590      	push	{r4, r7, lr}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	6039      	str	r1, [r7, #0]
 80073da:	71fb      	strb	r3, [r7, #7]
 80073dc:	4613      	mov	r3, r2
 80073de:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80073e8:	88bb      	ldrh	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d048      	beq.n	8007480 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80073ee:	79fb      	ldrb	r3, [r7, #7]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	3301      	adds	r3, #1
 80073f4:	00db      	lsls	r3, r3, #3
 80073f6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7ff fd9c 	bl	8006f38 <WIZCHIP_READ>
 8007400:	4603      	mov	r3, r0
 8007402:	b29b      	uxth	r3, r3
 8007404:	021b      	lsls	r3, r3, #8
 8007406:	b29c      	uxth	r4, r3
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	3301      	adds	r3, #1
 800740e:	00db      	lsls	r3, r3, #3
 8007410:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8007414:	4618      	mov	r0, r3
 8007416:	f7ff fd8f 	bl	8006f38 <WIZCHIP_READ>
 800741a:	4603      	mov	r3, r0
 800741c:	b29b      	uxth	r3, r3
 800741e:	4423      	add	r3, r4
 8007420:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8007422:	89fb      	ldrh	r3, [r7, #14]
 8007424:	021b      	lsls	r3, r3, #8
 8007426:	79fa      	ldrb	r2, [r7, #7]
 8007428:	0092      	lsls	r2, r2, #2
 800742a:	3203      	adds	r2, #3
 800742c:	00d2      	lsls	r2, r2, #3
 800742e:	4413      	add	r3, r2
 8007430:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8007432:	88bb      	ldrh	r3, [r7, #4]
 8007434:	461a      	mov	r2, r3
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	68b8      	ldr	r0, [r7, #8]
 800743a:	f7ff fe17 	bl	800706c <WIZCHIP_READ_BUF>
   ptr += len;
 800743e:	89fa      	ldrh	r2, [r7, #14]
 8007440:	88bb      	ldrh	r3, [r7, #4]
 8007442:	4413      	add	r3, r2
 8007444:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	3301      	adds	r3, #1
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8007452:	461a      	mov	r2, r3
 8007454:	89fb      	ldrh	r3, [r7, #14]
 8007456:	0a1b      	lsrs	r3, r3, #8
 8007458:	b29b      	uxth	r3, r3
 800745a:	b2db      	uxtb	r3, r3
 800745c:	4619      	mov	r1, r3
 800745e:	4610      	mov	r0, r2
 8007460:	f7ff fdb6 	bl	8006fd0 <WIZCHIP_WRITE>
 8007464:	79fb      	ldrb	r3, [r7, #7]
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	3301      	adds	r3, #1
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8007470:	461a      	mov	r2, r3
 8007472:	89fb      	ldrh	r3, [r7, #14]
 8007474:	b2db      	uxtb	r3, r3
 8007476:	4619      	mov	r1, r3
 8007478:	4610      	mov	r0, r2
 800747a:	f7ff fda9 	bl	8006fd0 <WIZCHIP_WRITE>
 800747e:	e000      	b.n	8007482 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8007480:	bf00      	nop
}
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	bd90      	pop	{r4, r7, pc}

08007488 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8007488:	b590      	push	{r4, r7, lr}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	460a      	mov	r2, r1
 8007492:	71fb      	strb	r3, [r7, #7]
 8007494:	4613      	mov	r3, r2
 8007496:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8007498:	2300      	movs	r3, #0
 800749a:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 800749c:	79fb      	ldrb	r3, [r7, #7]
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	3301      	adds	r3, #1
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff fd45 	bl	8006f38 <WIZCHIP_READ>
 80074ae:	4603      	mov	r3, r0
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	b29c      	uxth	r4, r3
 80074b6:	79fb      	ldrb	r3, [r7, #7]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	3301      	adds	r3, #1
 80074bc:	00db      	lsls	r3, r3, #3
 80074be:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff fd38 	bl	8006f38 <WIZCHIP_READ>
 80074c8:	4603      	mov	r3, r0
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	4423      	add	r3, r4
 80074ce:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80074d0:	89fa      	ldrh	r2, [r7, #14]
 80074d2:	88bb      	ldrh	r3, [r7, #4]
 80074d4:	4413      	add	r3, r2
 80074d6:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	3301      	adds	r3, #1
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80074e4:	461a      	mov	r2, r3
 80074e6:	89fb      	ldrh	r3, [r7, #14]
 80074e8:	0a1b      	lsrs	r3, r3, #8
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	4619      	mov	r1, r3
 80074f0:	4610      	mov	r0, r2
 80074f2:	f7ff fd6d 	bl	8006fd0 <WIZCHIP_WRITE>
 80074f6:	79fb      	ldrb	r3, [r7, #7]
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	3301      	adds	r3, #1
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8007502:	461a      	mov	r2, r3
 8007504:	89fb      	ldrh	r3, [r7, #14]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	4619      	mov	r1, r3
 800750a:	4610      	mov	r0, r2
 800750c:	f7ff fd60 	bl	8006fd0 <WIZCHIP_WRITE>
}
 8007510:	bf00      	nop
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	bd90      	pop	{r4, r7, pc}

08007518 <dynamic_host_configuration>:
 * @brief Configures the W5500 using DHCP for dynamic IP assignment.
 * @param mac Source MAC address
 * @retval None
 */
void dynamic_host_configuration(uint8_t mac[6])
{
 8007518:	b580      	push	{r7, lr}
 800751a:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 800751e:	af00      	add	r7, sp, #0
 8007520:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8007524:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8007528:	6018      	str	r0, [r3, #0]
	uint8_t dhcp_buffer[1024];

    wiz_NetInfo net_info = {
 800752a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800752e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007532:	461a      	mov	r2, r3
 8007534:	2300      	movs	r3, #0
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	6053      	str	r3, [r2, #4]
 800753a:	6093      	str	r3, [r2, #8]
 800753c:	60d3      	str	r3, [r2, #12]
 800753e:	6113      	str	r3, [r2, #16]
 8007540:	f8c2 3013 	str.w	r3, [r2, #19]
        .mac  = {mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]},  // Set MAC address
 8007544:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8007548:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	781a      	ldrb	r2, [r3, #0]
    wiz_NetInfo net_info = {
 8007550:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8007554:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007558:	701a      	strb	r2, [r3, #0]
 800755a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800755e:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	785a      	ldrb	r2, [r3, #1]
 8007566:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800756a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800756e:	705a      	strb	r2, [r3, #1]
 8007570:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8007574:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	789a      	ldrb	r2, [r3, #2]
 800757c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8007580:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8007584:	709a      	strb	r2, [r3, #2]
 8007586:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800758a:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	78da      	ldrb	r2, [r3, #3]
 8007592:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8007596:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800759a:	70da      	strb	r2, [r3, #3]
 800759c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80075a0:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	791a      	ldrb	r2, [r3, #4]
 80075a8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80075ac:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80075b0:	711a      	strb	r2, [r3, #4]
 80075b2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80075b6:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	795a      	ldrb	r2, [r3, #5]
 80075be:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80075c2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80075c6:	715a      	strb	r2, [r3, #5]
 80075c8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80075cc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80075d0:	2202      	movs	r2, #2
 80075d2:	759a      	strb	r2, [r3, #22]
        .dhcp = NETINFO_DHCP                                      // Enable DHCP mode
    };

    printf("Setting up dynamic host configuration...\r\n");
 80075d4:	4826      	ldr	r0, [pc, #152]	; (8007670 <dynamic_host_configuration+0x158>)
 80075d6:	f001 f9ad 	bl	8008934 <puts>


    // don't buffer the output of printf
    setbuf(stdout, NULL);
 80075da:	4b26      	ldr	r3, [pc, #152]	; (8007674 <dynamic_host_configuration+0x15c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	2100      	movs	r1, #0
 80075e2:	4618      	mov	r0, r3
 80075e4:	f001 f9ae 	bl	8008944 <setbuf>


    // Set the MAC address before using DHCP
    setSHAR(net_info.mac);
 80075e8:	f107 0308 	add.w	r3, r7, #8
 80075ec:	2206      	movs	r2, #6
 80075ee:	4619      	mov	r1, r3
 80075f0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80075f4:	f7ff fd9a 	bl	800712c <WIZCHIP_WRITE_BUF>

    // Initialize DHCP
    DHCP_init(DHCP_SOCKET, dhcp_buffer);
 80075f8:	f107 0320 	add.w	r3, r7, #32
 80075fc:	4619      	mov	r1, r3
 80075fe:	2000      	movs	r0, #0
 8007600:	f7fe feb0 	bl	8006364 <DHCP_init>

    // Register DHCP callback functions if needed
    reg_dhcp_cbfunc(callback_ip_assigned, callback_ip_assigned, callback_ip_conflict);
 8007604:	4a1c      	ldr	r2, [pc, #112]	; (8007678 <dynamic_host_configuration+0x160>)
 8007606:	491d      	ldr	r1, [pc, #116]	; (800767c <dynamic_host_configuration+0x164>)
 8007608:	481c      	ldr	r0, [pc, #112]	; (800767c <dynamic_host_configuration+0x164>)
 800760a:	f7fd fc09 	bl	8004e20 <reg_dhcp_cbfunc>

    // Run DHCP process in a loop until IP is assigned
    while ((!ip_assigned)) {
 800760e:	e001      	b.n	8007614 <dynamic_host_configuration+0xfc>
        DHCP_run();
 8007610:	f7fe fcf0 	bl	8005ff4 <DHCP_run>
    while ((!ip_assigned)) {
 8007614:	4b1a      	ldr	r3, [pc, #104]	; (8007680 <dynamic_host_configuration+0x168>)
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	f083 0301 	eor.w	r3, r3, #1
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1f5      	bne.n	8007610 <dynamic_host_configuration+0xf8>
    }

    // Retrieve IP, gateway, subnet mask, and DNS from DHCP
    getIPfromDHCP(net_info.ip);
 8007624:	f107 0308 	add.w	r3, r7, #8
 8007628:	3306      	adds	r3, #6
 800762a:	4618      	mov	r0, r3
 800762c:	f7fe ff44 	bl	80064b8 <getIPfromDHCP>
    getGWfromDHCP(net_info.gw);
 8007630:	f107 0308 	add.w	r3, r7, #8
 8007634:	330e      	adds	r3, #14
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe ff5e 	bl	80064f8 <getGWfromDHCP>
    getSNfromDHCP(net_info.sn);
 800763c:	f107 0308 	add.w	r3, r7, #8
 8007640:	330a      	adds	r3, #10
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe ff78 	bl	8006538 <getSNfromDHCP>
    getDNSfromDHCP(net_info.dns);
 8007648:	f107 0308 	add.w	r3, r7, #8
 800764c:	3312      	adds	r3, #18
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe ff92 	bl	8006578 <getDNSfromDHCP>

    // Set network information obtained from DHCP
    wizchip_setnetinfo(&net_info);
 8007654:	f107 0308 	add.w	r3, r7, #8
 8007658:	4618      	mov	r0, r3
 800765a:	f000 ff2b 	bl	80084b4 <wizchip_setnetinfo>

    printf("Dynamic IP configuration is done successfully.\r\n");
 800765e:	4809      	ldr	r0, [pc, #36]	; (8007684 <dynamic_host_configuration+0x16c>)
 8007660:	f001 f968 	bl	8008934 <puts>
}
 8007664:	bf00      	nop
 8007666:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	08009c70 	.word	0x08009c70
 8007674:	200000cc 	.word	0x200000cc
 8007678:	080076a5 	.word	0x080076a5
 800767c:	08007689 	.word	0x08007689
 8007680:	20004230 	.word	0x20004230
 8007684:	08009c9c 	.word	0x08009c9c

08007688 <callback_ip_assigned>:


void callback_ip_assigned()
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
    printf("DHCP: IP assigned\n");
 800768c:	4803      	ldr	r0, [pc, #12]	; (800769c <callback_ip_assigned+0x14>)
 800768e:	f001 f951 	bl	8008934 <puts>
    ip_assigned = true;
 8007692:	4b03      	ldr	r3, [pc, #12]	; (80076a0 <callback_ip_assigned+0x18>)
 8007694:	2201      	movs	r2, #1
 8007696:	701a      	strb	r2, [r3, #0]
}
 8007698:	bf00      	nop
 800769a:	bd80      	pop	{r7, pc}
 800769c:	08009ccc 	.word	0x08009ccc
 80076a0:	20004230 	.word	0x20004230

080076a4 <callback_ip_conflict>:
{
    printf("DHCP: IP renewed\n");
}

void callback_ip_conflict()
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	af00      	add	r7, sp, #0
    printf("DHCP: IP conflict detected\n");
 80076a8:	4802      	ldr	r0, [pc, #8]	; (80076b4 <callback_ip_conflict+0x10>)
 80076aa:	f001 f943 	bl	8008934 <puts>
}
 80076ae:	bf00      	nop
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	08009cf4 	.word	0x08009cf4

080076b8 <check_cable_presence>:
 *
 * This function continuously checks the status of the PHY link until the Ethernet cable is connected.
 *
 * @return void
 */
void check_cable_presence() {
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
    uint8_t phy_status;
    int error_status;

    printf("\r\nChecking ethernet cable presence ...\r\n");
 80076be:	4815      	ldr	r0, [pc, #84]	; (8007714 <check_cable_presence+0x5c>)
 80076c0:	f001 f938 	bl	8008934 <puts>

    do {
        // Get the PHY link status
        error_status = ctlwizchip(CW_GET_PHYLINK, (void*)&phy_status);
 80076c4:	1cfb      	adds	r3, r7, #3
 80076c6:	4619      	mov	r1, r3
 80076c8:	200f      	movs	r0, #15
 80076ca:	f000 fb17 	bl	8007cfc <ctlwizchip>
 80076ce:	4603      	mov	r3, r0
 80076d0:	607b      	str	r3, [r7, #4]

        if (error_status == -1) {
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d8:	d103      	bne.n	80076e2 <check_cable_presence+0x2a>
            printf("Failed to get PHY link info.\r\nTrying again...\r\n");
 80076da:	480f      	ldr	r0, [pc, #60]	; (8007718 <check_cable_presence+0x60>)
 80076dc:	f001 f92a 	bl	8008934 <puts>
            continue;
 80076e0:	e009      	b.n	80076f6 <check_cable_presence+0x3e>
        }

        // Check if the cable is not connected
        if (phy_status == PHY_LINK_OFF) {
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d106      	bne.n	80076f6 <check_cable_presence+0x3e>
            printf("Cable is not connected.\r\n");
 80076e8:	480c      	ldr	r0, [pc, #48]	; (800771c <check_cable_presence+0x64>)
 80076ea:	f001 f923 	bl	8008934 <puts>
            HAL_Delay(1500);
 80076ee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80076f2:	f7f8 ffb5 	bl	8000660 <HAL_Delay>
        }
    } while (error_status == -1 || phy_status == PHY_LINK_OFF);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fc:	d0e2      	beq.n	80076c4 <check_cable_presence+0xc>
 80076fe:	78fb      	ldrb	r3, [r7, #3]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0df      	beq.n	80076c4 <check_cable_presence+0xc>

    printf("Cable is connected.\r\n");
 8007704:	4806      	ldr	r0, [pc, #24]	; (8007720 <check_cable_presence+0x68>)
 8007706:	f001 f915 	bl	8008934 <puts>
}
 800770a:	bf00      	nop
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	08009d10 	.word	0x08009d10
 8007718:	08009d38 	.word	0x08009d38
 800771c:	08009d68 	.word	0x08009d68
 8007720:	08009d84 	.word	0x08009d84

08007724 <check_phy_status>:
 *
 * This function retrieves and prints the PHY link status and configuration, including mode, speed, and duplex settings.
 *
 * @return void
 */
void check_phy_status() {
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
    uint8_t phy_status;

    // Get the PHY link status
    if (ctlwizchip(CW_GET_PHYLINK, (void*)&phy_status) == -1) {
 800772a:	1dfb      	adds	r3, r7, #7
 800772c:	4619      	mov	r1, r3
 800772e:	200f      	movs	r0, #15
 8007730:	f000 fae4 	bl	8007cfc <ctlwizchip>
 8007734:	4603      	mov	r3, r0
 8007736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773a:	d103      	bne.n	8007744 <check_phy_status+0x20>
        printf("Failed to get PHY link status.\r\n");
 800773c:	4838      	ldr	r0, [pc, #224]	; (8007820 <check_phy_status+0xfc>)
 800773e:	f001 f8f9 	bl	8008934 <puts>
        return;
 8007742:	e06a      	b.n	800781a <check_phy_status+0xf6>
    }

    // Print the PHY link status
    if (phy_status == PHY_LINK_ON) {
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d103      	bne.n	8007752 <check_phy_status+0x2e>
        printf("PHY Link is ON.\r\n");
 800774a:	4836      	ldr	r0, [pc, #216]	; (8007824 <check_phy_status+0x100>)
 800774c:	f001 f8f2 	bl	8008934 <puts>
 8007750:	e002      	b.n	8007758 <check_phy_status+0x34>
    } else {
        printf("PHY Link is OFF.\r\n");
 8007752:	4835      	ldr	r0, [pc, #212]	; (8007828 <check_phy_status+0x104>)
 8007754:	f001 f8ee 	bl	8008934 <puts>
    }

    // Get the PHY configuration (optional, for more detailed information)
    wiz_PhyConf phy_conf;
    if (ctlwizchip(CW_GET_PHYCONF, (void*)&phy_conf) == -1) {
 8007758:	463b      	mov	r3, r7
 800775a:	4619      	mov	r1, r3
 800775c:	200b      	movs	r0, #11
 800775e:	f000 facd 	bl	8007cfc <ctlwizchip>
 8007762:	4603      	mov	r3, r0
 8007764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007768:	d103      	bne.n	8007772 <check_phy_status+0x4e>
        printf("Failed to get PHY configuration.\r\n");
 800776a:	4830      	ldr	r0, [pc, #192]	; (800782c <check_phy_status+0x108>)
 800776c:	f001 f8e2 	bl	8008934 <puts>
        return;
 8007770:	e053      	b.n	800781a <check_phy_status+0xf6>
    }

    // Print the PHY configuration
    printf("PHY Mode: ");
 8007772:	482f      	ldr	r0, [pc, #188]	; (8007830 <check_phy_status+0x10c>)
 8007774:	f001 f878 	bl	8008868 <iprintf>
    switch (phy_conf.by) {
 8007778:	783b      	ldrb	r3, [r7, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <check_phy_status+0x60>
 800777e:	2b01      	cmp	r3, #1
 8007780:	d004      	beq.n	800778c <check_phy_status+0x68>
 8007782:	e007      	b.n	8007794 <check_phy_status+0x70>
        case PHY_CONFBY_HW:
            printf("Configured by hardware.\r\n");
 8007784:	482b      	ldr	r0, [pc, #172]	; (8007834 <check_phy_status+0x110>)
 8007786:	f001 f8d5 	bl	8008934 <puts>
            break;
 800778a:	e007      	b.n	800779c <check_phy_status+0x78>
        case PHY_CONFBY_SW:
            printf("Configured by software.\r\n");
 800778c:	482a      	ldr	r0, [pc, #168]	; (8007838 <check_phy_status+0x114>)
 800778e:	f001 f8d1 	bl	8008934 <puts>
            break;
 8007792:	e003      	b.n	800779c <check_phy_status+0x78>
        default:
            printf("Unknown.\r\n");
 8007794:	4829      	ldr	r0, [pc, #164]	; (800783c <check_phy_status+0x118>)
 8007796:	f001 f8cd 	bl	8008934 <puts>
            break;
 800779a:	bf00      	nop
    }

    printf("PHY Speed: ");
 800779c:	4828      	ldr	r0, [pc, #160]	; (8007840 <check_phy_status+0x11c>)
 800779e:	f001 f863 	bl	8008868 <iprintf>
    switch (phy_conf.speed) {
 80077a2:	78bb      	ldrb	r3, [r7, #2]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <check_phy_status+0x8a>
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d004      	beq.n	80077b6 <check_phy_status+0x92>
 80077ac:	e007      	b.n	80077be <check_phy_status+0x9a>
        case PHY_SPEED_10:
            printf("10 Mbps.\r\n");
 80077ae:	4825      	ldr	r0, [pc, #148]	; (8007844 <check_phy_status+0x120>)
 80077b0:	f001 f8c0 	bl	8008934 <puts>
            break;
 80077b4:	e007      	b.n	80077c6 <check_phy_status+0xa2>
        case PHY_SPEED_100:
            printf("100 Mbps.\r\n");
 80077b6:	4824      	ldr	r0, [pc, #144]	; (8007848 <check_phy_status+0x124>)
 80077b8:	f001 f8bc 	bl	8008934 <puts>
            break;
 80077bc:	e003      	b.n	80077c6 <check_phy_status+0xa2>
        default:
            printf("Unknown.\r\n");
 80077be:	481f      	ldr	r0, [pc, #124]	; (800783c <check_phy_status+0x118>)
 80077c0:	f001 f8b8 	bl	8008934 <puts>
            break;
 80077c4:	bf00      	nop
    }

    printf("PHY Duplex: ");
 80077c6:	4821      	ldr	r0, [pc, #132]	; (800784c <check_phy_status+0x128>)
 80077c8:	f001 f84e 	bl	8008868 <iprintf>
    switch (phy_conf.duplex) {
 80077cc:	78fb      	ldrb	r3, [r7, #3]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <check_phy_status+0xb4>
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d004      	beq.n	80077e0 <check_phy_status+0xbc>
 80077d6:	e007      	b.n	80077e8 <check_phy_status+0xc4>
        case PHY_DUPLEX_HALF:
            printf("Half duplex.\r\n");
 80077d8:	481d      	ldr	r0, [pc, #116]	; (8007850 <check_phy_status+0x12c>)
 80077da:	f001 f8ab 	bl	8008934 <puts>
            break;
 80077de:	e007      	b.n	80077f0 <check_phy_status+0xcc>
        case PHY_DUPLEX_FULL:
            printf("Full duplex.\r\n");
 80077e0:	481c      	ldr	r0, [pc, #112]	; (8007854 <check_phy_status+0x130>)
 80077e2:	f001 f8a7 	bl	8008934 <puts>
            break;
 80077e6:	e003      	b.n	80077f0 <check_phy_status+0xcc>
        default:
            printf("Unknown.\r\n");
 80077e8:	4814      	ldr	r0, [pc, #80]	; (800783c <check_phy_status+0x118>)
 80077ea:	f001 f8a3 	bl	8008934 <puts>
            break;
 80077ee:	bf00      	nop
    }

    // Print the PHY negotiation mode
    printf("PHY Negotiation Mode: ");
 80077f0:	4819      	ldr	r0, [pc, #100]	; (8007858 <check_phy_status+0x134>)
 80077f2:	f001 f839 	bl	8008868 <iprintf>
    switch (phy_conf.mode) {
 80077f6:	787b      	ldrb	r3, [r7, #1]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <check_phy_status+0xde>
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d004      	beq.n	800780a <check_phy_status+0xe6>
 8007800:	e007      	b.n	8007812 <check_phy_status+0xee>
        case PHY_MODE_MANUAL:
            printf("Manual.\r\n");
 8007802:	4816      	ldr	r0, [pc, #88]	; (800785c <check_phy_status+0x138>)
 8007804:	f001 f896 	bl	8008934 <puts>
            break;
 8007808:	e007      	b.n	800781a <check_phy_status+0xf6>
        case PHY_MODE_AUTONEGO:
            printf("Auto-negotiation.\r\n");
 800780a:	4815      	ldr	r0, [pc, #84]	; (8007860 <check_phy_status+0x13c>)
 800780c:	f001 f892 	bl	8008934 <puts>
            break;
 8007810:	e003      	b.n	800781a <check_phy_status+0xf6>
        default:
            printf("Unknown.\r\n");
 8007812:	480a      	ldr	r0, [pc, #40]	; (800783c <check_phy_status+0x118>)
 8007814:	f001 f88e 	bl	8008934 <puts>
            break;
 8007818:	bf00      	nop
    }
}
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	08009d9c 	.word	0x08009d9c
 8007824:	08009dbc 	.word	0x08009dbc
 8007828:	08009dd0 	.word	0x08009dd0
 800782c:	08009de4 	.word	0x08009de4
 8007830:	08009e08 	.word	0x08009e08
 8007834:	08009e14 	.word	0x08009e14
 8007838:	08009e30 	.word	0x08009e30
 800783c:	08009e4c 	.word	0x08009e4c
 8007840:	08009e58 	.word	0x08009e58
 8007844:	08009e64 	.word	0x08009e64
 8007848:	08009e70 	.word	0x08009e70
 800784c:	08009e7c 	.word	0x08009e7c
 8007850:	08009e8c 	.word	0x08009e8c
 8007854:	08009e9c 	.word	0x08009e9c
 8007858:	08009eac 	.word	0x08009eac
 800785c:	08009ec4 	.word	0x08009ec4
 8007860:	08009ed0 	.word	0x08009ed0

08007864 <print_current_host_configuration>:
 * This function retrieves the current network configuration from the WIZnet chip
 * and prints the MAC address, IP address, subnet mask, gateway, and DNS server.
 *
 * @return void
 */
void print_current_host_configuration() {
 8007864:	b5b0      	push	{r4, r5, r7, lr}
 8007866:	b08a      	sub	sp, #40	; 0x28
 8007868:	af04      	add	r7, sp, #16
    wiz_NetInfo current_net_info;

    // Retrieve the current network information from the WIZnet chip
    ctlnetwork(CN_GET_NETINFO, (void*)&current_net_info);
 800786a:	463b      	mov	r3, r7
 800786c:	4619      	mov	r1, r3
 800786e:	2001      	movs	r0, #1
 8007870:	f000 fb26 	bl	8007ec0 <ctlnetwork>

    // Print the MAC address
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
           current_net_info.mac[0], current_net_info.mac[1], current_net_info.mac[2],
 8007874:	783b      	ldrb	r3, [r7, #0]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8007876:	4618      	mov	r0, r3
           current_net_info.mac[0], current_net_info.mac[1], current_net_info.mac[2],
 8007878:	787b      	ldrb	r3, [r7, #1]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800787a:	461c      	mov	r4, r3
           current_net_info.mac[0], current_net_info.mac[1], current_net_info.mac[2],
 800787c:	78bb      	ldrb	r3, [r7, #2]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800787e:	461d      	mov	r5, r3
           current_net_info.mac[3], current_net_info.mac[4], current_net_info.mac[5]);
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	793a      	ldrb	r2, [r7, #4]
 8007884:	7979      	ldrb	r1, [r7, #5]
    printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8007886:	9102      	str	r1, [sp, #8]
 8007888:	9201      	str	r2, [sp, #4]
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	462b      	mov	r3, r5
 800788e:	4622      	mov	r2, r4
 8007890:	4601      	mov	r1, r0
 8007892:	481b      	ldr	r0, [pc, #108]	; (8007900 <print_current_host_configuration+0x9c>)
 8007894:	f000 ffe8 	bl	8008868 <iprintf>

    // Print the IP address
    printf("IP: %d.%d.%d.%d\r\n",
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 8007898:	79bb      	ldrb	r3, [r7, #6]
    printf("IP: %d.%d.%d.%d\r\n",
 800789a:	4619      	mov	r1, r3
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 800789c:	79fb      	ldrb	r3, [r7, #7]
    printf("IP: %d.%d.%d.%d\r\n",
 800789e:	461a      	mov	r2, r3
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 80078a0:	7a3b      	ldrb	r3, [r7, #8]
    printf("IP: %d.%d.%d.%d\r\n",
 80078a2:	4618      	mov	r0, r3
           current_net_info.ip[0], current_net_info.ip[1], current_net_info.ip[2], current_net_info.ip[3]);
 80078a4:	7a7b      	ldrb	r3, [r7, #9]
    printf("IP: %d.%d.%d.%d\r\n",
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	4603      	mov	r3, r0
 80078aa:	4816      	ldr	r0, [pc, #88]	; (8007904 <print_current_host_configuration+0xa0>)
 80078ac:	f000 ffdc 	bl	8008868 <iprintf>

    // Print the subnet mask
    printf("SN: %d.%d.%d.%d\r\n",
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 80078b0:	7abb      	ldrb	r3, [r7, #10]
    printf("SN: %d.%d.%d.%d\r\n",
 80078b2:	4619      	mov	r1, r3
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 80078b4:	7afb      	ldrb	r3, [r7, #11]
    printf("SN: %d.%d.%d.%d\r\n",
 80078b6:	461a      	mov	r2, r3
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 80078b8:	7b3b      	ldrb	r3, [r7, #12]
    printf("SN: %d.%d.%d.%d\r\n",
 80078ba:	4618      	mov	r0, r3
           current_net_info.sn[0], current_net_info.sn[1], current_net_info.sn[2], current_net_info.sn[3]);
 80078bc:	7b7b      	ldrb	r3, [r7, #13]
    printf("SN: %d.%d.%d.%d\r\n",
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	4603      	mov	r3, r0
 80078c2:	4811      	ldr	r0, [pc, #68]	; (8007908 <print_current_host_configuration+0xa4>)
 80078c4:	f000 ffd0 	bl	8008868 <iprintf>

    // Print the gateway address
    printf("GW: %d.%d.%d.%d\r\n",
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
    printf("GW: %d.%d.%d.%d\r\n",
 80078ca:	4619      	mov	r1, r3
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
    printf("GW: %d.%d.%d.%d\r\n",
 80078ce:	461a      	mov	r2, r3
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 80078d0:	7c3b      	ldrb	r3, [r7, #16]
    printf("GW: %d.%d.%d.%d\r\n",
 80078d2:	4618      	mov	r0, r3
           current_net_info.gw[0], current_net_info.gw[1], current_net_info.gw[2], current_net_info.gw[3]);
 80078d4:	7c7b      	ldrb	r3, [r7, #17]
    printf("GW: %d.%d.%d.%d\r\n",
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	4603      	mov	r3, r0
 80078da:	480c      	ldr	r0, [pc, #48]	; (800790c <print_current_host_configuration+0xa8>)
 80078dc:	f000 ffc4 	bl	8008868 <iprintf>

    // Print the DNS server address
    printf("DNS: %d.%d.%d.%d\r\n",
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 80078e0:	7cbb      	ldrb	r3, [r7, #18]
    printf("DNS: %d.%d.%d.%d\r\n",
 80078e2:	4619      	mov	r1, r3
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 80078e4:	7cfb      	ldrb	r3, [r7, #19]
    printf("DNS: %d.%d.%d.%d\r\n",
 80078e6:	461a      	mov	r2, r3
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 80078e8:	7d3b      	ldrb	r3, [r7, #20]
    printf("DNS: %d.%d.%d.%d\r\n",
 80078ea:	4618      	mov	r0, r3
           current_net_info.dns[0], current_net_info.dns[1], current_net_info.dns[2], current_net_info.dns[3]);
 80078ec:	7d7b      	ldrb	r3, [r7, #21]
    printf("DNS: %d.%d.%d.%d\r\n",
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	4603      	mov	r3, r0
 80078f2:	4807      	ldr	r0, [pc, #28]	; (8007910 <print_current_host_configuration+0xac>)
 80078f4:	f000 ffb8 	bl	8008868 <iprintf>
}
 80078f8:	bf00      	nop
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bdb0      	pop	{r4, r5, r7, pc}
 8007900:	08009ee4 	.word	0x08009ee4
 8007904:	08009f0c 	.word	0x08009f0c
 8007908:	08009f20 	.word	0x08009f20
 800790c:	08009f34 	.word	0x08009f34
 8007910:	08009f48 	.word	0x08009f48

08007914 <SPIReadWrite>:
 *@brief Helper driver to send and receive one byte through SPI
 *@param data   : 1 byte data to transmit
 *@return		: 1 byte data which is received
 */
uint8_t SPIReadWrite(uint8_t data)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	71fb      	strb	r3, [r7, #7]
	 * the SPI_CR2 register is set.
	 */

	// check TXE(tx empty buffer) bit of the status register(SR),
	// and wait until the tx buffer becomes empty
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 800791e:	bf00      	nop
 8007920:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <SPIReadWrite+0x4c>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b02      	cmp	r3, #2
 800792c:	d1f8      	bne.n	8007920 <SPIReadWrite+0xc>



	// write the data to the data register to be sent
	*(__IO uint8_t*)&hspi1.Instance->DR = data;
 800792e:	4b0c      	ldr	r3, [pc, #48]	; (8007960 <SPIReadWrite+0x4c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	330c      	adds	r3, #12
 8007934:	79fa      	ldrb	r2, [r7, #7]
 8007936:	701a      	strb	r2, [r3, #0]
	 *	 * and the RXNE flag is set
	 */

	// wait until the data from the slave is received,
	// and the RXNE flag is set
	while((hspi1.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8007938:	bf00      	nop
 800793a:	4b09      	ldr	r3, [pc, #36]	; (8007960 <SPIReadWrite+0x4c>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b01      	cmp	r3, #1
 8007946:	d1f8      	bne.n	800793a <SPIReadWrite+0x26>


	// return the received byte
	return 	(*(__IO uint8_t*)&hspi1.Instance->DR);
 8007948:	4b05      	ldr	r3, [pc, #20]	; (8007960 <SPIReadWrite+0x4c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	330c      	adds	r3, #12
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	b2db      	uxtb	r3, r3
}
 8007952:	4618      	mov	r0, r3
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	200040f0 	.word	0x200040f0

08007964 <wizchip_deselect>:

/**
 *@brief Helper driver to deselect wizchip
 */
void wizchip_deselect()
{
 8007964:	b580      	push	{r7, lr}
 8007966:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCS_PORT, SCS_PIN, GPIO_PIN_SET);
 8007968:	2201      	movs	r2, #1
 800796a:	2102      	movs	r1, #2
 800796c:	4802      	ldr	r0, [pc, #8]	; (8007978 <wizchip_deselect+0x14>)
 800796e:	f7f9 fd1d 	bl	80013ac <HAL_GPIO_WritePin>
}
 8007972:	bf00      	nop
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	40020000 	.word	0x40020000

0800797c <wizchip_select>:

/**
 *@brief Helper driver to select wizchip
 */
void wizchip_select()
{
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCS_PORT, SCS_PIN, GPIO_PIN_RESET);
 8007980:	2200      	movs	r2, #0
 8007982:	2102      	movs	r1, #2
 8007984:	4802      	ldr	r0, [pc, #8]	; (8007990 <wizchip_select+0x14>)
 8007986:	f7f9 fd11 	bl	80013ac <HAL_GPIO_WritePin>
}
 800798a:	bf00      	nop
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	40020000 	.word	0x40020000

08007994 <wizchip_read>:
/**
 *@brief Helper driver to read one byte through SPI
 *@return		: 1 byte data which is received
 */
uint8_t wizchip_read()
{
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0
	// pass a dummy variable and read from the spi
	return SPIReadWrite(0x00);
 8007998:	2000      	movs	r0, #0
 800799a:	f7ff ffbb 	bl	8007914 <SPIReadWrite>
 800799e:	4603      	mov	r3, r0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <wizchip_write>:
/**
 *@brief Helper driver to send one byte through SPI
 *@param data   : 1 byte data to transmit
 */
void wizchip_write(uint8_t data)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(data);
 80079ae:	79fb      	ldrb	r3, [r7, #7]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff ffaf 	bl	8007914 <SPIReadWrite>
}
 80079b6:	bf00      	nop
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <wizchip_read_burst>:
 *@brief Helper driver to read burst of bytes through SPI
 *@param buff   : buffer to put the received data
 *@param len    : number of bytes to read
 */
void wizchip_read_burst(uint8_t* buff, uint16_t len)
{
 80079be:	b590      	push	{r4, r7, lr}
 80079c0:	b085      	sub	sp, #20
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	460b      	mov	r3, r1
 80079c8:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < len; i++)
 80079ca:	2300      	movs	r3, #0
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	e009      	b.n	80079e4 <wizchip_read_burst+0x26>
	{
		buff[i] = wizchip_read();
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	18d4      	adds	r4, r2, r3
 80079d6:	f7ff ffdd 	bl	8007994 <wizchip_read>
 80079da:	4603      	mov	r3, r0
 80079dc:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len; i++)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	3301      	adds	r3, #1
 80079e2:	60fb      	str	r3, [r7, #12]
 80079e4:	887b      	ldrh	r3, [r7, #2]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	dbf1      	blt.n	80079d0 <wizchip_read_burst+0x12>
	}

}
 80079ec:	bf00      	nop
 80079ee:	bf00      	nop
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd90      	pop	{r4, r7, pc}

080079f6 <wizchip_write_burst>:
 *@brief Helper driver to read burst of bytes through SPI
 *@param data   : array containing data to be sent
 *@param len    : number of bytes to send
 */
void wizchip_write_burst(uint8_t* data, uint16_t len)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	460b      	mov	r3, r1
 8007a00:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < len; i++)
 8007a02:	2300      	movs	r3, #0
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	e009      	b.n	8007a1c <wizchip_write_burst+0x26>
	{
		wizchip_write(data[i]);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff ffc7 	bl	80079a4 <wizchip_write>
	for (int i = 0; i < len; i++)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	887b      	ldrh	r3, [r7, #2]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	dbf1      	blt.n	8007a08 <wizchip_write_burst+0x12>
	}
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
	...

08007a30 <w5500_pins_init>:
/**
 *@brief initializer of PA0(RESET) and SCS(PA1)
 */

void w5500_pins_init()
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a36:	1d3b      	adds	r3, r7, #4
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	605a      	str	r2, [r3, #4]
 8007a3e:	609a      	str	r2, [r3, #8]
 8007a40:	60da      	str	r2, [r3, #12]
 8007a42:	611a      	str	r2, [r3, #16]


	// enable GPIO clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8007a44:	2300      	movs	r3, #0
 8007a46:	603b      	str	r3, [r7, #0]
 8007a48:	4b0e      	ldr	r3, [pc, #56]	; (8007a84 <w5500_pins_init+0x54>)
 8007a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4c:	4a0d      	ldr	r2, [pc, #52]	; (8007a84 <w5500_pins_init+0x54>)
 8007a4e:	f043 0301 	orr.w	r3, r3, #1
 8007a52:	6313      	str	r3, [r2, #48]	; 0x30
 8007a54:	4b0b      	ldr	r3, [pc, #44]	; (8007a84 <w5500_pins_init+0x54>)
 8007a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	603b      	str	r3, [r7, #0]
 8007a5e:	683b      	ldr	r3, [r7, #0]

	// configuring RESET and SCS as outputs
	GPIO_InitStruct.Pin = RESET_PIN | SCS_PIN;
 8007a60:	2303      	movs	r3, #3
 8007a62:	607b      	str	r3, [r7, #4]

	// push pull(high if 1 and low if 0)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a64:	2301      	movs	r3, #1
 8007a66:	60bb      	str	r3, [r7, #8]

	// output is NOPULL
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]

	// mark these pins fast
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	613b      	str	r3, [r7, #16]


	// initialize the pins
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a70:	1d3b      	adds	r3, r7, #4
 8007a72:	4619      	mov	r1, r3
 8007a74:	4804      	ldr	r0, [pc, #16]	; (8007a88 <w5500_pins_init+0x58>)
 8007a76:	f7f9 fafd 	bl	8001074 <HAL_GPIO_Init>
}
 8007a7a:	bf00      	nop
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	40023800 	.word	0x40023800
 8007a88:	40020000 	.word	0x40020000

08007a8c <w5500_init>:

void w5500_init()
{
 8007a8c:	b590      	push	{r4, r7, lr}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
	// the available size of w5500 is 32KB
	// w5500 supports 8 independents sockets simultaneously
	// here 2KB is allocated for
	// each of the transmit and receive buffer of each socket
	uint8_t memory_for_each_socket[2][8] =
 8007a92:	4b1f      	ldr	r3, [pc, #124]	; (8007b10 <w5500_init+0x84>)
 8007a94:	1d3c      	adds	r4, r7, #4
 8007a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{
			{2, 2, 2, 2, 2, 2, 2, 2},		// receive buffer size
			{2, 2, 2, 2, 2, 2, 2, 2}		// transmit buffer size
	};

	uint8_t tmp = 0xFF;
 8007a9c:	23ff      	movs	r3, #255	; 0xff
 8007a9e:	75fb      	strb	r3, [r7, #23]


	// initialize RESET and SCS pins
	w5500_pins_init();
 8007aa0:	f7ff ffc6 	bl	8007a30 <w5500_pins_init>

	// first deselect the chip(by setting SCS pin)
	HAL_GPIO_WritePin(SCS_PORT, SCS_PIN, GPIO_PIN_SET);
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	2102      	movs	r1, #2
 8007aa8:	481a      	ldr	r0, [pc, #104]	; (8007b14 <w5500_init+0x88>)
 8007aaa:	f7f9 fc7f 	bl	80013ac <HAL_GPIO_WritePin>


	// hard reset the wiznet chip by clearing RESET
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	4818      	ldr	r0, [pc, #96]	; (8007b14 <w5500_init+0x88>)
 8007ab4:	f7f9 fc7a 	bl	80013ac <HAL_GPIO_WritePin>

	// busy wait for a while and keep the RESET pin 0
	while(tmp--);
 8007ab8:	bf00      	nop
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
 8007abc:	1e5a      	subs	r2, r3, #1
 8007abe:	75fa      	strb	r2, [r7, #23]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1fa      	bne.n	8007aba <w5500_init+0x2e>


	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	2101      	movs	r1, #1
 8007ac8:	4812      	ldr	r0, [pc, #72]	; (8007b14 <w5500_init+0x88>)
 8007aca:	f7f9 fc6f 	bl	80013ac <HAL_GPIO_WritePin>

	// assign the helper drivers to complete the driver

	// callback functions for selecting and deselecting the chip
	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8007ace:	4912      	ldr	r1, [pc, #72]	; (8007b18 <w5500_init+0x8c>)
 8007ad0:	4812      	ldr	r0, [pc, #72]	; (8007b1c <w5500_init+0x90>)
 8007ad2:	f000 f895 	bl	8007c00 <reg_wizchip_cs_cbfunc>

	// callback functions for reading and writing bytes of data
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8007ad6:	4912      	ldr	r1, [pc, #72]	; (8007b20 <w5500_init+0x94>)
 8007ad8:	4812      	ldr	r0, [pc, #72]	; (8007b24 <w5500_init+0x98>)
 8007ada:	f000 f8b7 	bl	8007c4c <reg_wizchip_spi_cbfunc>

	// callback functions for reading and writing burst of data
	reg_wizchip_spiburst_cbfunc(wizchip_read_burst, wizchip_write_burst);
 8007ade:	4912      	ldr	r1, [pc, #72]	; (8007b28 <w5500_init+0x9c>)
 8007ae0:	4812      	ldr	r0, [pc, #72]	; (8007b2c <w5500_init+0xa0>)
 8007ae2:	f000 f8df 	bl	8007ca4 <reg_wizchip_spiburst_cbfunc>



	// allocate the specified memory for each socket
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)memory_for_each_socket) == -1)
 8007ae6:	1d3b      	adds	r3, r7, #4
 8007ae8:	4619      	mov	r1, r3
 8007aea:	2001      	movs	r0, #1
 8007aec:	f000 f906 	bl	8007cfc <ctlwizchip>
 8007af0:	4603      	mov	r3, r0
 8007af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af6:	d103      	bne.n	8007b00 <w5500_init+0x74>
	{
		printf("WIZCHIP initialization failed\r\n");
 8007af8:	480d      	ldr	r0, [pc, #52]	; (8007b30 <w5500_init+0xa4>)
 8007afa:	f000 ff1b 	bl	8008934 <puts>
		while(1);
 8007afe:	e7fe      	b.n	8007afe <w5500_init+0x72>
	}

	printf("WIZCHIP initialization done successfully\r\n");
 8007b00:	480c      	ldr	r0, [pc, #48]	; (8007b34 <w5500_init+0xa8>)
 8007b02:	f000 ff17 	bl	8008934 <puts>
}
 8007b06:	bf00      	nop
 8007b08:	371c      	adds	r7, #28
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd90      	pop	{r4, r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	08009fa8 	.word	0x08009fa8
 8007b14:	40020000 	.word	0x40020000
 8007b18:	08007965 	.word	0x08007965
 8007b1c:	0800797d 	.word	0x0800797d
 8007b20:	080079a5 	.word	0x080079a5
 8007b24:	08007995 	.word	0x08007995
 8007b28:	080079f7 	.word	0x080079f7
 8007b2c:	080079bf 	.word	0x080079bf
 8007b30:	08009f5c 	.word	0x08009f5c
 8007b34:	08009f7c 	.word	0x08009f7c

08007b38 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8007b38:	b480      	push	{r7}
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	bf00      	nop
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8007b46:	b480      	push	{r7}
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	bf00      	nop
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8007b54:	b480      	push	{r7}
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	bf00      	nop
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8007b62:	b480      	push	{r7}
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	bf00      	nop
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	4618      	mov	r0, r3
 8007b80:	370c      	adds	r7, #12
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8007b8a:	b480      	push	{r7}
 8007b8c:	b083      	sub	sp, #12
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	460b      	mov	r3, r1
 8007b94:	70fb      	strb	r3, [r7, #3]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	78fa      	ldrb	r2, [r7, #3]
 8007b9a:	701a      	strb	r2, [r3, #0]
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	2300      	movs	r3, #0
 8007bae:	4618      	mov	r0, r3
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	71fb      	strb	r3, [r7, #7]
 8007bc2:	bf00      	nop
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	807b      	strh	r3, [r7, #2]
 8007bda:	bf00      	nop
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8007be6:	b480      	push	{r7}
 8007be8:	b083      	sub	sp, #12
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	807b      	strh	r3, [r7, #2]
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
	...

08007c00 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <reg_wizchip_cs_cbfunc+0x16>
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d106      	bne.n	8007c24 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8007c16:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <reg_wizchip_cs_cbfunc+0x40>)
 8007c18:	4a0a      	ldr	r2, [pc, #40]	; (8007c44 <reg_wizchip_cs_cbfunc+0x44>)
 8007c1a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8007c1c:	4b08      	ldr	r3, [pc, #32]	; (8007c40 <reg_wizchip_cs_cbfunc+0x40>)
 8007c1e:	4a0a      	ldr	r2, [pc, #40]	; (8007c48 <reg_wizchip_cs_cbfunc+0x48>)
 8007c20:	619a      	str	r2, [r3, #24]
 8007c22:	e006      	b.n	8007c32 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8007c24:	4a06      	ldr	r2, [pc, #24]	; (8007c40 <reg_wizchip_cs_cbfunc+0x40>)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8007c2a:	4a05      	ldr	r2, [pc, #20]	; (8007c40 <reg_wizchip_cs_cbfunc+0x40>)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	6193      	str	r3, [r2, #24]
   }
}
 8007c30:	bf00      	nop
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	20000048 	.word	0x20000048
 8007c44:	08007b55 	.word	0x08007b55
 8007c48:	08007b63 	.word	0x08007b63

08007c4c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8007c56:	bf00      	nop
 8007c58:	4b0f      	ldr	r3, [pc, #60]	; (8007c98 <reg_wizchip_spi_cbfunc+0x4c>)
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d0f9      	beq.n	8007c58 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <reg_wizchip_spi_cbfunc+0x24>
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d106      	bne.n	8007c7e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8007c70:	4b09      	ldr	r3, [pc, #36]	; (8007c98 <reg_wizchip_spi_cbfunc+0x4c>)
 8007c72:	4a0a      	ldr	r2, [pc, #40]	; (8007c9c <reg_wizchip_spi_cbfunc+0x50>)
 8007c74:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8007c76:	4b08      	ldr	r3, [pc, #32]	; (8007c98 <reg_wizchip_spi_cbfunc+0x4c>)
 8007c78:	4a09      	ldr	r2, [pc, #36]	; (8007ca0 <reg_wizchip_spi_cbfunc+0x54>)
 8007c7a:	621a      	str	r2, [r3, #32]
 8007c7c:	e006      	b.n	8007c8c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8007c7e:	4a06      	ldr	r2, [pc, #24]	; (8007c98 <reg_wizchip_spi_cbfunc+0x4c>)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8007c84:	4a04      	ldr	r2, [pc, #16]	; (8007c98 <reg_wizchip_spi_cbfunc+0x4c>)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	6213      	str	r3, [r2, #32]
   }
}
 8007c8a:	bf00      	nop
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	20000048 	.word	0x20000048
 8007c9c:	08007ba9 	.word	0x08007ba9
 8007ca0:	08007bb9 	.word	0x08007bb9

08007ca4 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8007cae:	bf00      	nop
 8007cb0:	4b0f      	ldr	r3, [pc, #60]	; (8007cf0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d0f9      	beq.n	8007cb0 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d002      	beq.n	8007cc8 <reg_wizchip_spiburst_cbfunc+0x24>
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d106      	bne.n	8007cd6 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8007cc8:	4b09      	ldr	r3, [pc, #36]	; (8007cf0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8007cca:	4a0a      	ldr	r2, [pc, #40]	; (8007cf4 <reg_wizchip_spiburst_cbfunc+0x50>)
 8007ccc:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8007cce:	4b08      	ldr	r3, [pc, #32]	; (8007cf0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8007cd0:	4a09      	ldr	r2, [pc, #36]	; (8007cf8 <reg_wizchip_spiburst_cbfunc+0x54>)
 8007cd2:	629a      	str	r2, [r3, #40]	; 0x28
 8007cd4:	e006      	b.n	8007ce4 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8007cd6:	4a06      	ldr	r2, [pc, #24]	; (8007cf0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8007cdc:	4a04      	ldr	r2, [pc, #16]	; (8007cf0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8007ce2:	bf00      	nop
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	20000048 	.word	0x20000048
 8007cf4:	08007bcf 	.word	0x08007bcf
 8007cf8:	08007be7 	.word	0x08007be7

08007cfc <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8007cfc:	b590      	push	{r4, r7, lr}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	6039      	str	r1, [r7, #0]
 8007d06:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	2300      	movs	r3, #0
 8007d12:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	2b0f      	cmp	r3, #15
 8007d18:	f200 80c7 	bhi.w	8007eaa <ctlwizchip+0x1ae>
 8007d1c:	a201      	add	r2, pc, #4	; (adr r2, 8007d24 <ctlwizchip+0x28>)
 8007d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d22:	bf00      	nop
 8007d24:	08007d65 	.word	0x08007d65
 8007d28:	08007d6b 	.word	0x08007d6b
 8007d2c:	08007d97 	.word	0x08007d97
 8007d30:	08007d8b 	.word	0x08007d8b
 8007d34:	08007da5 	.word	0x08007da5
 8007d38:	08007db1 	.word	0x08007db1
 8007d3c:	08007dbf 	.word	0x08007dbf
 8007d40:	08007de5 	.word	0x08007de5
 8007d44:	08007e0b 	.word	0x08007e0b
 8007d48:	08007e4f 	.word	0x08007e4f
 8007d4c:	08007e55 	.word	0x08007e55
 8007d50:	08007e5d 	.word	0x08007e5d
 8007d54:	08007eb1 	.word	0x08007eb1
 8007d58:	08007e65 	.word	0x08007e65
 8007d5c:	08007e73 	.word	0x08007e73
 8007d60:	08007e8f 	.word	0x08007e8f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8007d64:	f000 f8ea 	bl	8007f3c <wizchip_sw_reset>
         break;
 8007d68:	e0a3      	b.n	8007eb2 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d004      	beq.n	8007d7a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3308      	adds	r3, #8
 8007d78:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	4611      	mov	r1, r2
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 f927 	bl	8007fd4 <wizchip_init>
 8007d86:	4603      	mov	r3, r0
 8007d88:	e094      	b.n	8007eb4 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 f9ac 	bl	80080ec <wizchip_clrinterrupt>
         break;
 8007d94:	e08d      	b.n	8007eb2 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8007d96:	f000 f9dd 	bl	8008154 <wizchip_getinterrupt>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	801a      	strh	r2, [r3, #0]
         break;
 8007da2:	e086      	b.n	8007eb2 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 f9f8 	bl	800819e <wizchip_setinterruptmask>
         break;         
 8007dae:	e080      	b.n	8007eb2 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8007db0:	f000 fa10 	bl	80081d4 <wizchip_getinterruptmask>
 8007db4:	4603      	mov	r3, r0
 8007db6:	461a      	mov	r2, r3
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	801a      	strh	r2, [r3, #0]
         break;
 8007dbc:	e079      	b.n	8007eb2 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	0a1b      	lsrs	r3, r3, #8
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	4619      	mov	r1, r3
 8007dca:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8007dce:	f7ff f8ff 	bl	8006fd0 <WIZCHIP_WRITE>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	4619      	mov	r1, r3
 8007dda:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8007dde:	f7ff f8f7 	bl	8006fd0 <WIZCHIP_WRITE>
         break;
 8007de2:	e066      	b.n	8007eb2 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8007de4:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8007de8:	f7ff f8a6 	bl	8006f38 <WIZCHIP_READ>
 8007dec:	4603      	mov	r3, r0
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	021b      	lsls	r3, r3, #8
 8007df2:	b29c      	uxth	r4, r3
 8007df4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8007df8:	f7ff f89e 	bl	8006f38 <WIZCHIP_READ>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	4423      	add	r3, r4
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	801a      	strh	r2, [r3, #0]
         break;
 8007e08:	e053      	b.n	8007eb2 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8007e0a:	4b2c      	ldr	r3, [pc, #176]	; (8007ebc <ctlwizchip+0x1c0>)
 8007e0c:	789a      	ldrb	r2, [r3, #2]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	3301      	adds	r3, #1
 8007e16:	4a29      	ldr	r2, [pc, #164]	; (8007ebc <ctlwizchip+0x1c0>)
 8007e18:	78d2      	ldrb	r2, [r2, #3]
 8007e1a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	3302      	adds	r3, #2
 8007e20:	4a26      	ldr	r2, [pc, #152]	; (8007ebc <ctlwizchip+0x1c0>)
 8007e22:	7912      	ldrb	r2, [r2, #4]
 8007e24:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	3303      	adds	r3, #3
 8007e2a:	4a24      	ldr	r2, [pc, #144]	; (8007ebc <ctlwizchip+0x1c0>)
 8007e2c:	7952      	ldrb	r2, [r2, #5]
 8007e2e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	3304      	adds	r3, #4
 8007e34:	4a21      	ldr	r2, [pc, #132]	; (8007ebc <ctlwizchip+0x1c0>)
 8007e36:	7992      	ldrb	r2, [r2, #6]
 8007e38:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	3305      	adds	r3, #5
 8007e3e:	4a1f      	ldr	r2, [pc, #124]	; (8007ebc <ctlwizchip+0x1c0>)
 8007e40:	79d2      	ldrb	r2, [r2, #7]
 8007e42:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	3306      	adds	r3, #6
 8007e48:	2200      	movs	r2, #0
 8007e4a:	701a      	strb	r2, [r3, #0]
         break;
 8007e4c:	e031      	b.n	8007eb2 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8007e4e:	f000 fa13 	bl	8008278 <wizphy_reset>
         break;
 8007e52:	e02e      	b.n	8007eb2 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8007e54:	6838      	ldr	r0, [r7, #0]
 8007e56:	f000 fa36 	bl	80082c6 <wizphy_setphyconf>
         break;
 8007e5a:	e02a      	b.n	8007eb2 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8007e5c:	6838      	ldr	r0, [r7, #0]
 8007e5e:	f000 fa75 	bl	800834c <wizphy_getphyconf>
         break;
 8007e62:	e026      	b.n	8007eb2 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f000 fad9 	bl	8008420 <wizphy_setphypmode>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	e020      	b.n	8007eb4 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8007e72:	f000 f9e8 	bl	8008246 <wizphy_getphypmode>
 8007e76:	4603      	mov	r3, r0
 8007e78:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8007e7a:	7dfb      	ldrb	r3, [r7, #23]
 8007e7c:	2bff      	cmp	r3, #255	; 0xff
 8007e7e:	d102      	bne.n	8007e86 <ctlwizchip+0x18a>
 8007e80:	f04f 33ff 	mov.w	r3, #4294967295
 8007e84:	e016      	b.n	8007eb4 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	7dfa      	ldrb	r2, [r7, #23]
 8007e8a:	701a      	strb	r2, [r3, #0]
         break;
 8007e8c:	e011      	b.n	8007eb2 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8007e8e:	f000 f9c4 	bl	800821a <wizphy_getphylink>
 8007e92:	4603      	mov	r3, r0
 8007e94:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
 8007e98:	2bff      	cmp	r3, #255	; 0xff
 8007e9a:	d102      	bne.n	8007ea2 <ctlwizchip+0x1a6>
 8007e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea0:	e008      	b.n	8007eb4 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	7dfa      	ldrb	r2, [r7, #23]
 8007ea6:	701a      	strb	r2, [r3, #0]
         break;
 8007ea8:	e003      	b.n	8007eb2 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8007eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8007eae:	e001      	b.n	8007eb4 <ctlwizchip+0x1b8>
         break;
 8007eb0:	bf00      	nop
   }
   return 0;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	371c      	adds	r7, #28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd90      	pop	{r4, r7, pc}
 8007ebc:	20000048 	.word	0x20000048

08007ec0 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	6039      	str	r1, [r7, #0]
 8007eca:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	2b05      	cmp	r3, #5
 8007ed0:	d82c      	bhi.n	8007f2c <ctlnetwork+0x6c>
 8007ed2:	a201      	add	r2, pc, #4	; (adr r2, 8007ed8 <ctlnetwork+0x18>)
 8007ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed8:	08007ef1 	.word	0x08007ef1
 8007edc:	08007ef9 	.word	0x08007ef9
 8007ee0:	08007f01 	.word	0x08007f01
 8007ee4:	08007f0f 	.word	0x08007f0f
 8007ee8:	08007f1d 	.word	0x08007f1d
 8007eec:	08007f25 	.word	0x08007f25
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8007ef0:	6838      	ldr	r0, [r7, #0]
 8007ef2:	f000 fadf 	bl	80084b4 <wizchip_setnetinfo>
         break;
 8007ef6:	e01c      	b.n	8007f32 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8007ef8:	6838      	ldr	r0, [r7, #0]
 8007efa:	f000 fb1b 	bl	8008534 <wizchip_getnetinfo>
         break;
 8007efe:	e018      	b.n	8007f32 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 fb55 	bl	80085b4 <wizchip_setnetmode>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	e012      	b.n	8007f34 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8007f0e:	f000 fb73 	bl	80085f8 <wizchip_getnetmode>
 8007f12:	4603      	mov	r3, r0
 8007f14:	461a      	mov	r2, r3
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	701a      	strb	r2, [r3, #0]
         break;
 8007f1a:	e00a      	b.n	8007f32 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8007f1c:	6838      	ldr	r0, [r7, #0]
 8007f1e:	f000 fb73 	bl	8008608 <wizchip_settimeout>
         break;
 8007f22:	e006      	b.n	8007f32 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8007f24:	6838      	ldr	r0, [r7, #0]
 8007f26:	f000 fb90 	bl	800864a <wizchip_gettimeout>
         break;
 8007f2a:	e002      	b.n	8007f32 <ctlnetwork+0x72>
      default:
         return -1;
 8007f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f30:	e000      	b.n	8007f34 <ctlnetwork+0x74>
   }
   return 0;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8007f42:	1d3b      	adds	r3, r7, #4
 8007f44:	2206      	movs	r2, #6
 8007f46:	4619      	mov	r1, r3
 8007f48:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8007f4c:	f7ff f88e 	bl	800706c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8007f50:	f107 0314 	add.w	r3, r7, #20
 8007f54:	2204      	movs	r2, #4
 8007f56:	4619      	mov	r1, r3
 8007f58:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007f5c:	f7ff f886 	bl	800706c <WIZCHIP_READ_BUF>
 8007f60:	f107 0310 	add.w	r3, r7, #16
 8007f64:	2204      	movs	r2, #4
 8007f66:	4619      	mov	r1, r3
 8007f68:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8007f6c:	f7ff f87e 	bl	800706c <WIZCHIP_READ_BUF>
 8007f70:	f107 030c 	add.w	r3, r7, #12
 8007f74:	2204      	movs	r2, #4
 8007f76:	4619      	mov	r1, r3
 8007f78:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8007f7c:	f7ff f876 	bl	800706c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8007f80:	2180      	movs	r1, #128	; 0x80
 8007f82:	2000      	movs	r0, #0
 8007f84:	f7ff f824 	bl	8006fd0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8007f88:	2000      	movs	r0, #0
 8007f8a:	f7fe ffd5 	bl	8006f38 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8007f8e:	1d3b      	adds	r3, r7, #4
 8007f90:	2206      	movs	r2, #6
 8007f92:	4619      	mov	r1, r3
 8007f94:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8007f98:	f7ff f8c8 	bl	800712c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8007f9c:	f107 0314 	add.w	r3, r7, #20
 8007fa0:	2204      	movs	r2, #4
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007fa8:	f7ff f8c0 	bl	800712c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8007fac:	f107 0310 	add.w	r3, r7, #16
 8007fb0:	2204      	movs	r2, #4
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8007fb8:	f7ff f8b8 	bl	800712c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8007fbc:	f107 030c 	add.w	r3, r7, #12
 8007fc0:	2204      	movs	r2, #4
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8007fc8:	f7ff f8b0 	bl	800712c <WIZCHIP_WRITE_BUF>
}
 8007fcc:	bf00      	nop
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8007fe2:	f7ff ffab 	bl	8007f3c <wizchip_sw_reset>
   if(txsize)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d03b      	beq.n	8008064 <wizchip_init+0x90>
   {
      tmp = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	73fb      	strb	r3, [r7, #15]
 8007ff4:	e015      	b.n	8008022 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8007ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	781a      	ldrb	r2, [r3, #0]
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	4413      	add	r3, r2
 8008004:	b2db      	uxtb	r3, r3
 8008006:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8008008:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800800c:	2b10      	cmp	r3, #16
 800800e:	dd02      	ble.n	8008016 <wizchip_init+0x42>
 8008010:	f04f 33ff 	mov.w	r3, #4294967295
 8008014:	e066      	b.n	80080e4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800801a:	b2db      	uxtb	r3, r3
 800801c:	3301      	adds	r3, #1
 800801e:	b2db      	uxtb	r3, r3
 8008020:	73fb      	strb	r3, [r7, #15]
 8008022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008026:	2b07      	cmp	r3, #7
 8008028:	dde5      	ble.n	8007ff6 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800802a:	2300      	movs	r3, #0
 800802c:	73fb      	strb	r3, [r7, #15]
 800802e:	e015      	b.n	800805c <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8008030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	3301      	adds	r3, #1
 8008038:	00db      	lsls	r3, r3, #3
 800803a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800803e:	4618      	mov	r0, r3
 8008040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	4413      	add	r3, r2
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	4619      	mov	r1, r3
 800804c:	f7fe ffc0 	bl	8006fd0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008054:	b2db      	uxtb	r3, r3
 8008056:	3301      	adds	r3, #1
 8008058:	b2db      	uxtb	r3, r3
 800805a:	73fb      	strb	r3, [r7, #15]
 800805c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008060:	2b07      	cmp	r3, #7
 8008062:	dde5      	ble.n	8008030 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d03b      	beq.n	80080e2 <wizchip_init+0x10e>
   {
      tmp = 0;
 800806a:	2300      	movs	r3, #0
 800806c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]
 8008072:	e015      	b.n	80080a0 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8008074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	4413      	add	r3, r2
 800807c:	781a      	ldrb	r2, [r3, #0]
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	4413      	add	r3, r2
 8008082:	b2db      	uxtb	r3, r3
 8008084:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8008086:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800808a:	2b10      	cmp	r3, #16
 800808c:	dd02      	ble.n	8008094 <wizchip_init+0xc0>
 800808e:	f04f 33ff 	mov.w	r3, #4294967295
 8008092:	e027      	b.n	80080e4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008098:	b2db      	uxtb	r3, r3
 800809a:	3301      	adds	r3, #1
 800809c:	b2db      	uxtb	r3, r3
 800809e:	73fb      	strb	r3, [r7, #15]
 80080a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080a4:	2b07      	cmp	r3, #7
 80080a6:	dde5      	ble.n	8008074 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]
 80080ac:	e015      	b.n	80080da <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80080ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	3301      	adds	r3, #1
 80080b6:	00db      	lsls	r3, r3, #3
 80080b8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80080bc:	4618      	mov	r0, r3
 80080be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	4413      	add	r3, r2
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	4619      	mov	r1, r3
 80080ca:	f7fe ff81 	bl	8006fd0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80080ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	3301      	adds	r3, #1
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	73fb      	strb	r3, [r7, #15]
 80080da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080de:	2b07      	cmp	r3, #7
 80080e0:	dde5      	ble.n	80080ae <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	4603      	mov	r3, r0
 80080f4:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80080f6:	88fb      	ldrh	r3, [r7, #6]
 80080f8:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80080fa:	88fb      	ldrh	r3, [r7, #6]
 80080fc:	0a1b      	lsrs	r3, r3, #8
 80080fe:	b29b      	uxth	r3, r3
 8008100:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8008102:	7bfb      	ldrb	r3, [r7, #15]
 8008104:	f023 030f 	bic.w	r3, r3, #15
 8008108:	b2db      	uxtb	r3, r3
 800810a:	4619      	mov	r1, r3
 800810c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8008110:	f7fe ff5e 	bl	8006fd0 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8008114:	2300      	movs	r3, #0
 8008116:	73fb      	strb	r3, [r7, #15]
 8008118:	e014      	b.n	8008144 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800811a:	7bba      	ldrb	r2, [r7, #14]
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	fa42 f303 	asr.w	r3, r2, r3
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	d009      	beq.n	800813e <wizchip_clrinterrupt+0x52>
 800812a:	7bfb      	ldrb	r3, [r7, #15]
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	3301      	adds	r3, #1
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008136:	211f      	movs	r1, #31
 8008138:	4618      	mov	r0, r3
 800813a:	f7fe ff49 	bl	8006fd0 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 800813e:	7bfb      	ldrb	r3, [r7, #15]
 8008140:	3301      	adds	r3, #1
 8008142:	73fb      	strb	r3, [r7, #15]
 8008144:	7bfb      	ldrb	r3, [r7, #15]
 8008146:	2b07      	cmp	r3, #7
 8008148:	d9e7      	bls.n	800811a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 800814a:	bf00      	nop
 800814c:	bf00      	nop
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800815a:	2300      	movs	r3, #0
 800815c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8008166:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800816a:	f7fe fee5 	bl	8006f38 <WIZCHIP_READ>
 800816e:	4603      	mov	r3, r0
 8008170:	f023 030f 	bic.w	r3, r3, #15
 8008174:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8008176:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800817a:	f7fe fedd 	bl	8006f38 <WIZCHIP_READ>
 800817e:	4603      	mov	r3, r0
 8008180:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8008182:	79bb      	ldrb	r3, [r7, #6]
 8008184:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8008186:	88bb      	ldrh	r3, [r7, #4]
 8008188:	021b      	lsls	r3, r3, #8
 800818a:	b29a      	uxth	r2, r3
 800818c:	79fb      	ldrb	r3, [r7, #7]
 800818e:	b29b      	uxth	r3, r3
 8008190:	4413      	add	r3, r2
 8008192:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8008194:	88bb      	ldrh	r3, [r7, #4]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b084      	sub	sp, #16
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	4603      	mov	r3, r0
 80081a6:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80081a8:	88fb      	ldrh	r3, [r7, #6]
 80081aa:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80081ac:	88fb      	ldrh	r3, [r7, #6]
 80081ae:	0a1b      	lsrs	r3, r3, #8
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	4619      	mov	r1, r3
 80081b8:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80081bc:	f7fe ff08 	bl	8006fd0 <WIZCHIP_WRITE>
   setSIMR(simr);
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	4619      	mov	r1, r3
 80081c4:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80081c8:	f7fe ff02 	bl	8006fd0 <WIZCHIP_WRITE>
#endif   
}
 80081cc:	bf00      	nop
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80081e6:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80081ea:	f7fe fea5 	bl	8006f38 <WIZCHIP_READ>
 80081ee:	4603      	mov	r3, r0
 80081f0:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80081f2:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80081f6:	f7fe fe9f 	bl	8006f38 <WIZCHIP_READ>
 80081fa:	4603      	mov	r3, r0
 80081fc:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80081fe:	79bb      	ldrb	r3, [r7, #6]
 8008200:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8008202:	88bb      	ldrh	r3, [r7, #4]
 8008204:	021b      	lsls	r3, r3, #8
 8008206:	b29a      	uxth	r2, r3
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	b29b      	uxth	r3, r3
 800820c:	4413      	add	r3, r2
 800820e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8008210:	88bb      	ldrh	r3, [r7, #4]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b082      	sub	sp, #8
 800821e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8008220:	2300      	movs	r3, #0
 8008222:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8008224:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8008228:	f7fe fe86 	bl	8006f38 <WIZCHIP_READ>
 800822c:	4603      	mov	r3, r0
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8008236:	2301      	movs	r3, #1
 8008238:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800823a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b082      	sub	sp, #8
 800824a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 800824c:	2300      	movs	r3, #0
 800824e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8008250:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8008254:	f7fe fe70 	bl	8006f38 <WIZCHIP_READ>
 8008258:	4603      	mov	r3, r0
 800825a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800825e:	2b30      	cmp	r3, #48	; 0x30
 8008260:	d102      	bne.n	8008268 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8008262:	2301      	movs	r3, #1
 8008264:	71fb      	strb	r3, [r7, #7]
 8008266:	e001      	b.n	800826c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8008268:	2300      	movs	r3, #0
 800826a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 800826c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 800827e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8008282:	f7fe fe59 	bl	8006f38 <WIZCHIP_READ>
 8008286:	4603      	mov	r3, r0
 8008288:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800828a:	79fb      	ldrb	r3, [r7, #7]
 800828c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008290:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8008292:	79fb      	ldrb	r3, [r7, #7]
 8008294:	4619      	mov	r1, r3
 8008296:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800829a:	f7fe fe99 	bl	8006fd0 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800829e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80082a2:	f7fe fe49 	bl	8006f38 <WIZCHIP_READ>
 80082a6:	4603      	mov	r3, r0
 80082a8:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80082aa:	79fb      	ldrb	r3, [r7, #7]
 80082ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80082b0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	4619      	mov	r1, r3
 80082b6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80082ba:	f7fe fe89 	bl	8006fd0 <WIZCHIP_WRITE>
}
 80082be:	bf00      	nop
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d104      	bne.n	80082e4 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80082da:	7bfb      	ldrb	r3, [r7, #15]
 80082dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082e0:	73fb      	strb	r3, [r7, #15]
 80082e2:	e003      	b.n	80082ec <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ea:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	785b      	ldrb	r3, [r3, #1]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d104      	bne.n	80082fe <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
 80082f6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80082fa:	73fb      	strb	r3, [r7, #15]
 80082fc:	e019      	b.n	8008332 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	78db      	ldrb	r3, [r3, #3]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d10d      	bne.n	8008322 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	789b      	ldrb	r3, [r3, #2]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d104      	bne.n	8008318 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	f043 0318 	orr.w	r3, r3, #24
 8008314:	73fb      	strb	r3, [r7, #15]
 8008316:	e00c      	b.n	8008332 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8008318:	7bfb      	ldrb	r3, [r7, #15]
 800831a:	f043 0308 	orr.w	r3, r3, #8
 800831e:	73fb      	strb	r3, [r7, #15]
 8008320:	e007      	b.n	8008332 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	789b      	ldrb	r3, [r3, #2]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d103      	bne.n	8008332 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	f043 0310 	orr.w	r3, r3, #16
 8008330:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8008332:	7bfb      	ldrb	r3, [r7, #15]
 8008334:	4619      	mov	r1, r3
 8008336:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800833a:	f7fe fe49 	bl	8006fd0 <WIZCHIP_WRITE>
   wizphy_reset();
 800833e:	f7ff ff9b 	bl	8008278 <wizphy_reset>
}
 8008342:	bf00      	nop
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
	...

0800834c <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8008354:	2300      	movs	r3, #0
 8008356:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8008358:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800835c:	f7fe fdec 	bl	8006f38 <WIZCHIP_READ>
 8008360:	4603      	mov	r3, r0
 8008362:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	119b      	asrs	r3, r3, #6
 8008368:	b2db      	uxtb	r3, r3
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	b2da      	uxtb	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800837a:	2b20      	cmp	r3, #32
 800837c:	d001      	beq.n	8008382 <wizphy_getphyconf+0x36>
 800837e:	2b38      	cmp	r3, #56	; 0x38
 8008380:	d103      	bne.n	800838a <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	705a      	strb	r2, [r3, #1]
         break;
 8008388:	e003      	b.n	8008392 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	705a      	strb	r2, [r3, #1]
         break;
 8008390:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8008392:	7bfb      	ldrb	r3, [r7, #15]
 8008394:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008398:	3b10      	subs	r3, #16
 800839a:	2b10      	cmp	r3, #16
 800839c:	bf8c      	ite	hi
 800839e:	2201      	movhi	r2, #1
 80083a0:	2200      	movls	r2, #0
 80083a2:	b2d2      	uxtb	r2, r2
 80083a4:	2a00      	cmp	r2, #0
 80083a6:	d10f      	bne.n	80083c8 <wizphy_getphyconf+0x7c>
 80083a8:	4a1b      	ldr	r2, [pc, #108]	; (8008418 <wizphy_getphyconf+0xcc>)
 80083aa:	fa22 f303 	lsr.w	r3, r2, r3
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	bf14      	ite	ne
 80083b6:	2301      	movne	r3, #1
 80083b8:	2300      	moveq	r3, #0
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	709a      	strb	r2, [r3, #2]
         break;
 80083c6:	e003      	b.n	80083d0 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	709a      	strb	r2, [r3, #2]
         break;
 80083ce:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083d6:	3b08      	subs	r3, #8
 80083d8:	2b18      	cmp	r3, #24
 80083da:	bf8c      	ite	hi
 80083dc:	2201      	movhi	r2, #1
 80083de:	2200      	movls	r2, #0
 80083e0:	b2d2      	uxtb	r2, r2
 80083e2:	2a00      	cmp	r2, #0
 80083e4:	d10f      	bne.n	8008406 <wizphy_getphyconf+0xba>
 80083e6:	4a0d      	ldr	r2, [pc, #52]	; (800841c <wizphy_getphyconf+0xd0>)
 80083e8:	fa22 f303 	lsr.w	r3, r2, r3
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	bf14      	ite	ne
 80083f4:	2301      	movne	r3, #1
 80083f6:	2300      	moveq	r3, #0
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d003      	beq.n	8008406 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	70da      	strb	r2, [r3, #3]
         break;
 8008404:	e003      	b.n	800840e <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	70da      	strb	r2, [r3, #3]
         break;
 800840c:	bf00      	nop
   }
}
 800840e:	bf00      	nop
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	00010101 	.word	0x00010101
 800841c:	01010001 	.word	0x01010001

08008420 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800842a:	2300      	movs	r3, #0
 800842c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800842e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8008432:	f7fe fd81 	bl	8006f38 <WIZCHIP_READ>
 8008436:	4603      	mov	r3, r0
 8008438:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008440:	2b00      	cmp	r3, #0
 8008442:	d102      	bne.n	800844a <wizphy_setphypmode+0x2a>
 8008444:	f04f 33ff 	mov.w	r3, #4294967295
 8008448:	e030      	b.n	80084ac <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800844a:	7bfb      	ldrb	r3, [r7, #15]
 800844c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8008450:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8008452:	79fb      	ldrb	r3, [r7, #7]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d104      	bne.n	8008462 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800845e:	73fb      	strb	r3, [r7, #15]
 8008460:	e003      	b.n	800846a <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8008468:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	4619      	mov	r1, r3
 800846e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8008472:	f7fe fdad 	bl	8006fd0 <WIZCHIP_WRITE>
   wizphy_reset();
 8008476:	f7ff feff 	bl	8008278 <wizphy_reset>
   tmp = getPHYCFGR();
 800847a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800847e:	f7fe fd5b 	bl	8006f38 <WIZCHIP_READ>
 8008482:	4603      	mov	r3, r0
 8008484:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d106      	bne.n	800849a <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008492:	2b00      	cmp	r3, #0
 8008494:	d008      	beq.n	80084a8 <wizphy_setphypmode+0x88>
 8008496:	2300      	movs	r3, #0
 8008498:	e008      	b.n	80084ac <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800849a:	7bfb      	ldrb	r3, [r7, #15]
 800849c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <wizphy_setphypmode+0x88>
 80084a4:	2300      	movs	r3, #0
 80084a6:	e001      	b.n	80084ac <wizphy_setphypmode+0x8c>
   }
   return -1;
 80084a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2206      	movs	r2, #6
 80084c0:	4619      	mov	r1, r3
 80084c2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80084c6:	f7fe fe31 	bl	800712c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	330e      	adds	r3, #14
 80084ce:	2204      	movs	r2, #4
 80084d0:	4619      	mov	r1, r3
 80084d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80084d6:	f7fe fe29 	bl	800712c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	330a      	adds	r3, #10
 80084de:	2204      	movs	r2, #4
 80084e0:	4619      	mov	r1, r3
 80084e2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80084e6:	f7fe fe21 	bl	800712c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3306      	adds	r3, #6
 80084ee:	2204      	movs	r2, #4
 80084f0:	4619      	mov	r1, r3
 80084f2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80084f6:	f7fe fe19 	bl	800712c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	7c9a      	ldrb	r2, [r3, #18]
 80084fe:	4b0b      	ldr	r3, [pc, #44]	; (800852c <wizchip_setnetinfo+0x78>)
 8008500:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	7cda      	ldrb	r2, [r3, #19]
 8008506:	4b09      	ldr	r3, [pc, #36]	; (800852c <wizchip_setnetinfo+0x78>)
 8008508:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	7d1a      	ldrb	r2, [r3, #20]
 800850e:	4b07      	ldr	r3, [pc, #28]	; (800852c <wizchip_setnetinfo+0x78>)
 8008510:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	7d5a      	ldrb	r2, [r3, #21]
 8008516:	4b05      	ldr	r3, [pc, #20]	; (800852c <wizchip_setnetinfo+0x78>)
 8008518:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	7d9a      	ldrb	r2, [r3, #22]
 800851e:	4b04      	ldr	r3, [pc, #16]	; (8008530 <wizchip_setnetinfo+0x7c>)
 8008520:	701a      	strb	r2, [r3, #0]
}
 8008522:	bf00      	nop
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20004234 	.word	0x20004234
 8008530:	20004238 	.word	0x20004238

08008534 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2206      	movs	r2, #6
 8008540:	4619      	mov	r1, r3
 8008542:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8008546:	f7fe fd91 	bl	800706c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	330e      	adds	r3, #14
 800854e:	2204      	movs	r2, #4
 8008550:	4619      	mov	r1, r3
 8008552:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008556:	f7fe fd89 	bl	800706c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	330a      	adds	r3, #10
 800855e:	2204      	movs	r2, #4
 8008560:	4619      	mov	r1, r3
 8008562:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8008566:	f7fe fd81 	bl	800706c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	3306      	adds	r3, #6
 800856e:	2204      	movs	r2, #4
 8008570:	4619      	mov	r1, r3
 8008572:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8008576:	f7fe fd79 	bl	800706c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800857a:	4b0c      	ldr	r3, [pc, #48]	; (80085ac <wizchip_getnetinfo+0x78>)
 800857c:	781a      	ldrb	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8008582:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <wizchip_getnetinfo+0x78>)
 8008584:	785a      	ldrb	r2, [r3, #1]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800858a:	4b08      	ldr	r3, [pc, #32]	; (80085ac <wizchip_getnetinfo+0x78>)
 800858c:	789a      	ldrb	r2, [r3, #2]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8008592:	4b06      	ldr	r3, [pc, #24]	; (80085ac <wizchip_getnetinfo+0x78>)
 8008594:	78da      	ldrb	r2, [r3, #3]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800859a:	4b05      	ldr	r3, [pc, #20]	; (80085b0 <wizchip_getnetinfo+0x7c>)
 800859c:	781a      	ldrb	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	759a      	strb	r2, [r3, #22]
}
 80085a2:	bf00      	nop
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	20004234 	.word	0x20004234
 80085b0:	20004238 	.word	0x20004238

080085b4 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	4603      	mov	r3, r0
 80085bc:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80085be:	2300      	movs	r3, #0
 80085c0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80085c2:	79fb      	ldrb	r3, [r7, #7]
 80085c4:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <wizchip_setnetmode+0x1e>
 80085cc:	f04f 33ff 	mov.w	r3, #4294967295
 80085d0:	e00e      	b.n	80085f0 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80085d2:	2000      	movs	r0, #0
 80085d4:	f7fe fcb0 	bl	8006f38 <WIZCHIP_READ>
 80085d8:	4603      	mov	r3, r0
 80085da:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80085dc:	7bfa      	ldrb	r2, [r7, #15]
 80085de:	79fb      	ldrb	r3, [r7, #7]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
 80085e6:	4619      	mov	r1, r3
 80085e8:	2000      	movs	r0, #0
 80085ea:	f7fe fcf1 	bl	8006fd0 <WIZCHIP_WRITE>
   return 0;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80085fc:	2000      	movs	r0, #0
 80085fe:	f7fe fc9b 	bl	8006f38 <WIZCHIP_READ>
 8008602:	4603      	mov	r3, r0
}
 8008604:	4618      	mov	r0, r3
 8008606:	bd80      	pop	{r7, pc}

08008608 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	4619      	mov	r1, r3
 8008616:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800861a:	f7fe fcd9 	bl	8006fd0 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	885b      	ldrh	r3, [r3, #2]
 8008622:	0a1b      	lsrs	r3, r3, #8
 8008624:	b29b      	uxth	r3, r3
 8008626:	b2db      	uxtb	r3, r3
 8008628:	4619      	mov	r1, r3
 800862a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800862e:	f7fe fccf 	bl	8006fd0 <WIZCHIP_WRITE>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	885b      	ldrh	r3, [r3, #2]
 8008636:	b2db      	uxtb	r3, r3
 8008638:	4619      	mov	r1, r3
 800863a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800863e:	f7fe fcc7 	bl	8006fd0 <WIZCHIP_WRITE>
}
 8008642:	bf00      	nop
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800864a:	b590      	push	{r4, r7, lr}
 800864c:	b083      	sub	sp, #12
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8008652:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8008656:	f7fe fc6f 	bl	8006f38 <WIZCHIP_READ>
 800865a:	4603      	mov	r3, r0
 800865c:	461a      	mov	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8008662:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8008666:	f7fe fc67 	bl	8006f38 <WIZCHIP_READ>
 800866a:	4603      	mov	r3, r0
 800866c:	b29b      	uxth	r3, r3
 800866e:	021b      	lsls	r3, r3, #8
 8008670:	b29c      	uxth	r4, r3
 8008672:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8008676:	f7fe fc5f 	bl	8006f38 <WIZCHIP_READ>
 800867a:	4603      	mov	r3, r0
 800867c:	b29b      	uxth	r3, r3
 800867e:	4423      	add	r3, r4
 8008680:	b29a      	uxth	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	805a      	strh	r2, [r3, #2]
}
 8008686:	bf00      	nop
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	bd90      	pop	{r4, r7, pc}
	...

08008690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80086c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008694:	f7fc fa4a 	bl	8004b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008698:	480c      	ldr	r0, [pc, #48]	; (80086cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800869a:	490d      	ldr	r1, [pc, #52]	; (80086d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800869c:	4a0d      	ldr	r2, [pc, #52]	; (80086d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800869e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80086a0:	e002      	b.n	80086a8 <LoopCopyDataInit>

080086a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80086a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80086a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80086a6:	3304      	adds	r3, #4

080086a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80086a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80086aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80086ac:	d3f9      	bcc.n	80086a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80086ae:	4a0a      	ldr	r2, [pc, #40]	; (80086d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80086b0:	4c0a      	ldr	r4, [pc, #40]	; (80086dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80086b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80086b4:	e001      	b.n	80086ba <LoopFillZerobss>

080086b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80086b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80086b8:	3204      	adds	r2, #4

080086ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80086ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80086bc:	d3fb      	bcc.n	80086b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80086be:	f000 fb43 	bl	8008d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80086c2:	f7fc f835 	bl	8004730 <main>
  bx  lr    
 80086c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80086c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80086cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80086d0:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80086d4:	0800a014 	.word	0x0800a014
  ldr r2, =_sbss
 80086d8:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80086dc:	20004388 	.word	0x20004388

080086e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80086e0:	e7fe      	b.n	80086e0 <ADC_IRQHandler>
	...

080086e4 <std>:
 80086e4:	2300      	movs	r3, #0
 80086e6:	b510      	push	{r4, lr}
 80086e8:	4604      	mov	r4, r0
 80086ea:	e9c0 3300 	strd	r3, r3, [r0]
 80086ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086f2:	6083      	str	r3, [r0, #8]
 80086f4:	8181      	strh	r1, [r0, #12]
 80086f6:	6643      	str	r3, [r0, #100]	; 0x64
 80086f8:	81c2      	strh	r2, [r0, #14]
 80086fa:	6183      	str	r3, [r0, #24]
 80086fc:	4619      	mov	r1, r3
 80086fe:	2208      	movs	r2, #8
 8008700:	305c      	adds	r0, #92	; 0x5c
 8008702:	f000 facd 	bl	8008ca0 <memset>
 8008706:	4b0d      	ldr	r3, [pc, #52]	; (800873c <std+0x58>)
 8008708:	6263      	str	r3, [r4, #36]	; 0x24
 800870a:	4b0d      	ldr	r3, [pc, #52]	; (8008740 <std+0x5c>)
 800870c:	62a3      	str	r3, [r4, #40]	; 0x28
 800870e:	4b0d      	ldr	r3, [pc, #52]	; (8008744 <std+0x60>)
 8008710:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008712:	4b0d      	ldr	r3, [pc, #52]	; (8008748 <std+0x64>)
 8008714:	6323      	str	r3, [r4, #48]	; 0x30
 8008716:	4b0d      	ldr	r3, [pc, #52]	; (800874c <std+0x68>)
 8008718:	6224      	str	r4, [r4, #32]
 800871a:	429c      	cmp	r4, r3
 800871c:	d006      	beq.n	800872c <std+0x48>
 800871e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008722:	4294      	cmp	r4, r2
 8008724:	d002      	beq.n	800872c <std+0x48>
 8008726:	33d0      	adds	r3, #208	; 0xd0
 8008728:	429c      	cmp	r4, r3
 800872a:	d105      	bne.n	8008738 <std+0x54>
 800872c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008734:	f000 bb2c 	b.w	8008d90 <__retarget_lock_init_recursive>
 8008738:	bd10      	pop	{r4, pc}
 800873a:	bf00      	nop
 800873c:	08008af1 	.word	0x08008af1
 8008740:	08008b13 	.word	0x08008b13
 8008744:	08008b4b 	.word	0x08008b4b
 8008748:	08008b6f 	.word	0x08008b6f
 800874c:	2000423c 	.word	0x2000423c

08008750 <stdio_exit_handler>:
 8008750:	4a02      	ldr	r2, [pc, #8]	; (800875c <stdio_exit_handler+0xc>)
 8008752:	4903      	ldr	r1, [pc, #12]	; (8008760 <stdio_exit_handler+0x10>)
 8008754:	4803      	ldr	r0, [pc, #12]	; (8008764 <stdio_exit_handler+0x14>)
 8008756:	f000 b869 	b.w	800882c <_fwalk_sglue>
 800875a:	bf00      	nop
 800875c:	20000074 	.word	0x20000074
 8008760:	08009919 	.word	0x08009919
 8008764:	20000080 	.word	0x20000080

08008768 <cleanup_stdio>:
 8008768:	6841      	ldr	r1, [r0, #4]
 800876a:	4b0c      	ldr	r3, [pc, #48]	; (800879c <cleanup_stdio+0x34>)
 800876c:	4299      	cmp	r1, r3
 800876e:	b510      	push	{r4, lr}
 8008770:	4604      	mov	r4, r0
 8008772:	d001      	beq.n	8008778 <cleanup_stdio+0x10>
 8008774:	f001 f8d0 	bl	8009918 <_fflush_r>
 8008778:	68a1      	ldr	r1, [r4, #8]
 800877a:	4b09      	ldr	r3, [pc, #36]	; (80087a0 <cleanup_stdio+0x38>)
 800877c:	4299      	cmp	r1, r3
 800877e:	d002      	beq.n	8008786 <cleanup_stdio+0x1e>
 8008780:	4620      	mov	r0, r4
 8008782:	f001 f8c9 	bl	8009918 <_fflush_r>
 8008786:	68e1      	ldr	r1, [r4, #12]
 8008788:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <cleanup_stdio+0x3c>)
 800878a:	4299      	cmp	r1, r3
 800878c:	d004      	beq.n	8008798 <cleanup_stdio+0x30>
 800878e:	4620      	mov	r0, r4
 8008790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008794:	f001 b8c0 	b.w	8009918 <_fflush_r>
 8008798:	bd10      	pop	{r4, pc}
 800879a:	bf00      	nop
 800879c:	2000423c 	.word	0x2000423c
 80087a0:	200042a4 	.word	0x200042a4
 80087a4:	2000430c 	.word	0x2000430c

080087a8 <global_stdio_init.part.0>:
 80087a8:	b510      	push	{r4, lr}
 80087aa:	4b0b      	ldr	r3, [pc, #44]	; (80087d8 <global_stdio_init.part.0+0x30>)
 80087ac:	4c0b      	ldr	r4, [pc, #44]	; (80087dc <global_stdio_init.part.0+0x34>)
 80087ae:	4a0c      	ldr	r2, [pc, #48]	; (80087e0 <global_stdio_init.part.0+0x38>)
 80087b0:	601a      	str	r2, [r3, #0]
 80087b2:	4620      	mov	r0, r4
 80087b4:	2200      	movs	r2, #0
 80087b6:	2104      	movs	r1, #4
 80087b8:	f7ff ff94 	bl	80086e4 <std>
 80087bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80087c0:	2201      	movs	r2, #1
 80087c2:	2109      	movs	r1, #9
 80087c4:	f7ff ff8e 	bl	80086e4 <std>
 80087c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80087cc:	2202      	movs	r2, #2
 80087ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087d2:	2112      	movs	r1, #18
 80087d4:	f7ff bf86 	b.w	80086e4 <std>
 80087d8:	20004374 	.word	0x20004374
 80087dc:	2000423c 	.word	0x2000423c
 80087e0:	08008751 	.word	0x08008751

080087e4 <__sfp_lock_acquire>:
 80087e4:	4801      	ldr	r0, [pc, #4]	; (80087ec <__sfp_lock_acquire+0x8>)
 80087e6:	f000 bad4 	b.w	8008d92 <__retarget_lock_acquire_recursive>
 80087ea:	bf00      	nop
 80087ec:	2000437d 	.word	0x2000437d

080087f0 <__sfp_lock_release>:
 80087f0:	4801      	ldr	r0, [pc, #4]	; (80087f8 <__sfp_lock_release+0x8>)
 80087f2:	f000 bacf 	b.w	8008d94 <__retarget_lock_release_recursive>
 80087f6:	bf00      	nop
 80087f8:	2000437d 	.word	0x2000437d

080087fc <__sinit>:
 80087fc:	b510      	push	{r4, lr}
 80087fe:	4604      	mov	r4, r0
 8008800:	f7ff fff0 	bl	80087e4 <__sfp_lock_acquire>
 8008804:	6a23      	ldr	r3, [r4, #32]
 8008806:	b11b      	cbz	r3, 8008810 <__sinit+0x14>
 8008808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800880c:	f7ff bff0 	b.w	80087f0 <__sfp_lock_release>
 8008810:	4b04      	ldr	r3, [pc, #16]	; (8008824 <__sinit+0x28>)
 8008812:	6223      	str	r3, [r4, #32]
 8008814:	4b04      	ldr	r3, [pc, #16]	; (8008828 <__sinit+0x2c>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1f5      	bne.n	8008808 <__sinit+0xc>
 800881c:	f7ff ffc4 	bl	80087a8 <global_stdio_init.part.0>
 8008820:	e7f2      	b.n	8008808 <__sinit+0xc>
 8008822:	bf00      	nop
 8008824:	08008769 	.word	0x08008769
 8008828:	20004374 	.word	0x20004374

0800882c <_fwalk_sglue>:
 800882c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008830:	4607      	mov	r7, r0
 8008832:	4688      	mov	r8, r1
 8008834:	4614      	mov	r4, r2
 8008836:	2600      	movs	r6, #0
 8008838:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800883c:	f1b9 0901 	subs.w	r9, r9, #1
 8008840:	d505      	bpl.n	800884e <_fwalk_sglue+0x22>
 8008842:	6824      	ldr	r4, [r4, #0]
 8008844:	2c00      	cmp	r4, #0
 8008846:	d1f7      	bne.n	8008838 <_fwalk_sglue+0xc>
 8008848:	4630      	mov	r0, r6
 800884a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800884e:	89ab      	ldrh	r3, [r5, #12]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d907      	bls.n	8008864 <_fwalk_sglue+0x38>
 8008854:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008858:	3301      	adds	r3, #1
 800885a:	d003      	beq.n	8008864 <_fwalk_sglue+0x38>
 800885c:	4629      	mov	r1, r5
 800885e:	4638      	mov	r0, r7
 8008860:	47c0      	blx	r8
 8008862:	4306      	orrs	r6, r0
 8008864:	3568      	adds	r5, #104	; 0x68
 8008866:	e7e9      	b.n	800883c <_fwalk_sglue+0x10>

08008868 <iprintf>:
 8008868:	b40f      	push	{r0, r1, r2, r3}
 800886a:	b507      	push	{r0, r1, r2, lr}
 800886c:	4906      	ldr	r1, [pc, #24]	; (8008888 <iprintf+0x20>)
 800886e:	ab04      	add	r3, sp, #16
 8008870:	6808      	ldr	r0, [r1, #0]
 8008872:	f853 2b04 	ldr.w	r2, [r3], #4
 8008876:	6881      	ldr	r1, [r0, #8]
 8008878:	9301      	str	r3, [sp, #4]
 800887a:	f000 fd1d 	bl	80092b8 <_vfiprintf_r>
 800887e:	b003      	add	sp, #12
 8008880:	f85d eb04 	ldr.w	lr, [sp], #4
 8008884:	b004      	add	sp, #16
 8008886:	4770      	bx	lr
 8008888:	200000cc 	.word	0x200000cc

0800888c <_puts_r>:
 800888c:	6a03      	ldr	r3, [r0, #32]
 800888e:	b570      	push	{r4, r5, r6, lr}
 8008890:	6884      	ldr	r4, [r0, #8]
 8008892:	4605      	mov	r5, r0
 8008894:	460e      	mov	r6, r1
 8008896:	b90b      	cbnz	r3, 800889c <_puts_r+0x10>
 8008898:	f7ff ffb0 	bl	80087fc <__sinit>
 800889c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800889e:	07db      	lsls	r3, r3, #31
 80088a0:	d405      	bmi.n	80088ae <_puts_r+0x22>
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	0598      	lsls	r0, r3, #22
 80088a6:	d402      	bmi.n	80088ae <_puts_r+0x22>
 80088a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088aa:	f000 fa72 	bl	8008d92 <__retarget_lock_acquire_recursive>
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	0719      	lsls	r1, r3, #28
 80088b2:	d513      	bpl.n	80088dc <_puts_r+0x50>
 80088b4:	6923      	ldr	r3, [r4, #16]
 80088b6:	b18b      	cbz	r3, 80088dc <_puts_r+0x50>
 80088b8:	3e01      	subs	r6, #1
 80088ba:	68a3      	ldr	r3, [r4, #8]
 80088bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088c0:	3b01      	subs	r3, #1
 80088c2:	60a3      	str	r3, [r4, #8]
 80088c4:	b9e9      	cbnz	r1, 8008902 <_puts_r+0x76>
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	da2e      	bge.n	8008928 <_puts_r+0x9c>
 80088ca:	4622      	mov	r2, r4
 80088cc:	210a      	movs	r1, #10
 80088ce:	4628      	mov	r0, r5
 80088d0:	f000 f951 	bl	8008b76 <__swbuf_r>
 80088d4:	3001      	adds	r0, #1
 80088d6:	d007      	beq.n	80088e8 <_puts_r+0x5c>
 80088d8:	250a      	movs	r5, #10
 80088da:	e007      	b.n	80088ec <_puts_r+0x60>
 80088dc:	4621      	mov	r1, r4
 80088de:	4628      	mov	r0, r5
 80088e0:	f000 f986 	bl	8008bf0 <__swsetup_r>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d0e7      	beq.n	80088b8 <_puts_r+0x2c>
 80088e8:	f04f 35ff 	mov.w	r5, #4294967295
 80088ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088ee:	07da      	lsls	r2, r3, #31
 80088f0:	d405      	bmi.n	80088fe <_puts_r+0x72>
 80088f2:	89a3      	ldrh	r3, [r4, #12]
 80088f4:	059b      	lsls	r3, r3, #22
 80088f6:	d402      	bmi.n	80088fe <_puts_r+0x72>
 80088f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088fa:	f000 fa4b 	bl	8008d94 <__retarget_lock_release_recursive>
 80088fe:	4628      	mov	r0, r5
 8008900:	bd70      	pop	{r4, r5, r6, pc}
 8008902:	2b00      	cmp	r3, #0
 8008904:	da04      	bge.n	8008910 <_puts_r+0x84>
 8008906:	69a2      	ldr	r2, [r4, #24]
 8008908:	429a      	cmp	r2, r3
 800890a:	dc06      	bgt.n	800891a <_puts_r+0x8e>
 800890c:	290a      	cmp	r1, #10
 800890e:	d004      	beq.n	800891a <_puts_r+0x8e>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	1c5a      	adds	r2, r3, #1
 8008914:	6022      	str	r2, [r4, #0]
 8008916:	7019      	strb	r1, [r3, #0]
 8008918:	e7cf      	b.n	80088ba <_puts_r+0x2e>
 800891a:	4622      	mov	r2, r4
 800891c:	4628      	mov	r0, r5
 800891e:	f000 f92a 	bl	8008b76 <__swbuf_r>
 8008922:	3001      	adds	r0, #1
 8008924:	d1c9      	bne.n	80088ba <_puts_r+0x2e>
 8008926:	e7df      	b.n	80088e8 <_puts_r+0x5c>
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	250a      	movs	r5, #10
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	6022      	str	r2, [r4, #0]
 8008930:	701d      	strb	r5, [r3, #0]
 8008932:	e7db      	b.n	80088ec <_puts_r+0x60>

08008934 <puts>:
 8008934:	4b02      	ldr	r3, [pc, #8]	; (8008940 <puts+0xc>)
 8008936:	4601      	mov	r1, r0
 8008938:	6818      	ldr	r0, [r3, #0]
 800893a:	f7ff bfa7 	b.w	800888c <_puts_r>
 800893e:	bf00      	nop
 8008940:	200000cc 	.word	0x200000cc

08008944 <setbuf>:
 8008944:	fab1 f281 	clz	r2, r1
 8008948:	0952      	lsrs	r2, r2, #5
 800894a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800894e:	0052      	lsls	r2, r2, #1
 8008950:	f000 b800 	b.w	8008954 <setvbuf>

08008954 <setvbuf>:
 8008954:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008958:	461d      	mov	r5, r3
 800895a:	4b54      	ldr	r3, [pc, #336]	; (8008aac <setvbuf+0x158>)
 800895c:	681f      	ldr	r7, [r3, #0]
 800895e:	4604      	mov	r4, r0
 8008960:	460e      	mov	r6, r1
 8008962:	4690      	mov	r8, r2
 8008964:	b127      	cbz	r7, 8008970 <setvbuf+0x1c>
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	b913      	cbnz	r3, 8008970 <setvbuf+0x1c>
 800896a:	4638      	mov	r0, r7
 800896c:	f7ff ff46 	bl	80087fc <__sinit>
 8008970:	f1b8 0f02 	cmp.w	r8, #2
 8008974:	d006      	beq.n	8008984 <setvbuf+0x30>
 8008976:	f1b8 0f01 	cmp.w	r8, #1
 800897a:	f200 8094 	bhi.w	8008aa6 <setvbuf+0x152>
 800897e:	2d00      	cmp	r5, #0
 8008980:	f2c0 8091 	blt.w	8008aa6 <setvbuf+0x152>
 8008984:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008986:	07da      	lsls	r2, r3, #31
 8008988:	d405      	bmi.n	8008996 <setvbuf+0x42>
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	059b      	lsls	r3, r3, #22
 800898e:	d402      	bmi.n	8008996 <setvbuf+0x42>
 8008990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008992:	f000 f9fe 	bl	8008d92 <__retarget_lock_acquire_recursive>
 8008996:	4621      	mov	r1, r4
 8008998:	4638      	mov	r0, r7
 800899a:	f000 ffbd 	bl	8009918 <_fflush_r>
 800899e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089a0:	b141      	cbz	r1, 80089b4 <setvbuf+0x60>
 80089a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089a6:	4299      	cmp	r1, r3
 80089a8:	d002      	beq.n	80089b0 <setvbuf+0x5c>
 80089aa:	4638      	mov	r0, r7
 80089ac:	f000 fa02 	bl	8008db4 <_free_r>
 80089b0:	2300      	movs	r3, #0
 80089b2:	6363      	str	r3, [r4, #52]	; 0x34
 80089b4:	2300      	movs	r3, #0
 80089b6:	61a3      	str	r3, [r4, #24]
 80089b8:	6063      	str	r3, [r4, #4]
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	0618      	lsls	r0, r3, #24
 80089be:	d503      	bpl.n	80089c8 <setvbuf+0x74>
 80089c0:	6921      	ldr	r1, [r4, #16]
 80089c2:	4638      	mov	r0, r7
 80089c4:	f000 f9f6 	bl	8008db4 <_free_r>
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80089ce:	f023 0303 	bic.w	r3, r3, #3
 80089d2:	f1b8 0f02 	cmp.w	r8, #2
 80089d6:	81a3      	strh	r3, [r4, #12]
 80089d8:	d05f      	beq.n	8008a9a <setvbuf+0x146>
 80089da:	ab01      	add	r3, sp, #4
 80089dc:	466a      	mov	r2, sp
 80089de:	4621      	mov	r1, r4
 80089e0:	4638      	mov	r0, r7
 80089e2:	f000 ffc1 	bl	8009968 <__swhatbuf_r>
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	4318      	orrs	r0, r3
 80089ea:	81a0      	strh	r0, [r4, #12]
 80089ec:	bb2d      	cbnz	r5, 8008a3a <setvbuf+0xe6>
 80089ee:	9d00      	ldr	r5, [sp, #0]
 80089f0:	4628      	mov	r0, r5
 80089f2:	f000 fa2b 	bl	8008e4c <malloc>
 80089f6:	4606      	mov	r6, r0
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d150      	bne.n	8008a9e <setvbuf+0x14a>
 80089fc:	f8dd 9000 	ldr.w	r9, [sp]
 8008a00:	45a9      	cmp	r9, r5
 8008a02:	d13e      	bne.n	8008a82 <setvbuf+0x12e>
 8008a04:	f04f 35ff 	mov.w	r5, #4294967295
 8008a08:	2200      	movs	r2, #0
 8008a0a:	60a2      	str	r2, [r4, #8]
 8008a0c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008a10:	6022      	str	r2, [r4, #0]
 8008a12:	6122      	str	r2, [r4, #16]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a1a:	6162      	str	r2, [r4, #20]
 8008a1c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a1e:	f043 0302 	orr.w	r3, r3, #2
 8008a22:	07d1      	lsls	r1, r2, #31
 8008a24:	81a3      	strh	r3, [r4, #12]
 8008a26:	d404      	bmi.n	8008a32 <setvbuf+0xde>
 8008a28:	059b      	lsls	r3, r3, #22
 8008a2a:	d402      	bmi.n	8008a32 <setvbuf+0xde>
 8008a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a2e:	f000 f9b1 	bl	8008d94 <__retarget_lock_release_recursive>
 8008a32:	4628      	mov	r0, r5
 8008a34:	b003      	add	sp, #12
 8008a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a3a:	2e00      	cmp	r6, #0
 8008a3c:	d0d8      	beq.n	80089f0 <setvbuf+0x9c>
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	b913      	cbnz	r3, 8008a48 <setvbuf+0xf4>
 8008a42:	4638      	mov	r0, r7
 8008a44:	f7ff feda 	bl	80087fc <__sinit>
 8008a48:	f1b8 0f01 	cmp.w	r8, #1
 8008a4c:	bf08      	it	eq
 8008a4e:	89a3      	ldrheq	r3, [r4, #12]
 8008a50:	6026      	str	r6, [r4, #0]
 8008a52:	bf04      	itt	eq
 8008a54:	f043 0301 	orreq.w	r3, r3, #1
 8008a58:	81a3      	strheq	r3, [r4, #12]
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	f013 0208 	ands.w	r2, r3, #8
 8008a60:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008a64:	d01d      	beq.n	8008aa2 <setvbuf+0x14e>
 8008a66:	07da      	lsls	r2, r3, #31
 8008a68:	bf41      	itttt	mi
 8008a6a:	2200      	movmi	r2, #0
 8008a6c:	426d      	negmi	r5, r5
 8008a6e:	60a2      	strmi	r2, [r4, #8]
 8008a70:	61a5      	strmi	r5, [r4, #24]
 8008a72:	bf58      	it	pl
 8008a74:	60a5      	strpl	r5, [r4, #8]
 8008a76:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008a78:	f015 0501 	ands.w	r5, r5, #1
 8008a7c:	d0d4      	beq.n	8008a28 <setvbuf+0xd4>
 8008a7e:	2500      	movs	r5, #0
 8008a80:	e7d7      	b.n	8008a32 <setvbuf+0xde>
 8008a82:	4648      	mov	r0, r9
 8008a84:	f000 f9e2 	bl	8008e4c <malloc>
 8008a88:	4606      	mov	r6, r0
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d0ba      	beq.n	8008a04 <setvbuf+0xb0>
 8008a8e:	89a3      	ldrh	r3, [r4, #12]
 8008a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a94:	81a3      	strh	r3, [r4, #12]
 8008a96:	464d      	mov	r5, r9
 8008a98:	e7d1      	b.n	8008a3e <setvbuf+0xea>
 8008a9a:	2500      	movs	r5, #0
 8008a9c:	e7b4      	b.n	8008a08 <setvbuf+0xb4>
 8008a9e:	46a9      	mov	r9, r5
 8008aa0:	e7f5      	b.n	8008a8e <setvbuf+0x13a>
 8008aa2:	60a2      	str	r2, [r4, #8]
 8008aa4:	e7e7      	b.n	8008a76 <setvbuf+0x122>
 8008aa6:	f04f 35ff 	mov.w	r5, #4294967295
 8008aaa:	e7c2      	b.n	8008a32 <setvbuf+0xde>
 8008aac:	200000cc 	.word	0x200000cc

08008ab0 <siprintf>:
 8008ab0:	b40e      	push	{r1, r2, r3}
 8008ab2:	b500      	push	{lr}
 8008ab4:	b09c      	sub	sp, #112	; 0x70
 8008ab6:	ab1d      	add	r3, sp, #116	; 0x74
 8008ab8:	9002      	str	r0, [sp, #8]
 8008aba:	9006      	str	r0, [sp, #24]
 8008abc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ac0:	4809      	ldr	r0, [pc, #36]	; (8008ae8 <siprintf+0x38>)
 8008ac2:	9107      	str	r1, [sp, #28]
 8008ac4:	9104      	str	r1, [sp, #16]
 8008ac6:	4909      	ldr	r1, [pc, #36]	; (8008aec <siprintf+0x3c>)
 8008ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008acc:	9105      	str	r1, [sp, #20]
 8008ace:	6800      	ldr	r0, [r0, #0]
 8008ad0:	9301      	str	r3, [sp, #4]
 8008ad2:	a902      	add	r1, sp, #8
 8008ad4:	f000 fac8 	bl	8009068 <_svfiprintf_r>
 8008ad8:	9b02      	ldr	r3, [sp, #8]
 8008ada:	2200      	movs	r2, #0
 8008adc:	701a      	strb	r2, [r3, #0]
 8008ade:	b01c      	add	sp, #112	; 0x70
 8008ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ae4:	b003      	add	sp, #12
 8008ae6:	4770      	bx	lr
 8008ae8:	200000cc 	.word	0x200000cc
 8008aec:	ffff0208 	.word	0xffff0208

08008af0 <__sread>:
 8008af0:	b510      	push	{r4, lr}
 8008af2:	460c      	mov	r4, r1
 8008af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af8:	f000 f8fc 	bl	8008cf4 <_read_r>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	bfab      	itete	ge
 8008b00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b02:	89a3      	ldrhlt	r3, [r4, #12]
 8008b04:	181b      	addge	r3, r3, r0
 8008b06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b0a:	bfac      	ite	ge
 8008b0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b0e:	81a3      	strhlt	r3, [r4, #12]
 8008b10:	bd10      	pop	{r4, pc}

08008b12 <__swrite>:
 8008b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b16:	461f      	mov	r7, r3
 8008b18:	898b      	ldrh	r3, [r1, #12]
 8008b1a:	05db      	lsls	r3, r3, #23
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	460c      	mov	r4, r1
 8008b20:	4616      	mov	r6, r2
 8008b22:	d505      	bpl.n	8008b30 <__swrite+0x1e>
 8008b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b28:	2302      	movs	r3, #2
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f000 f8d0 	bl	8008cd0 <_lseek_r>
 8008b30:	89a3      	ldrh	r3, [r4, #12]
 8008b32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b3a:	81a3      	strh	r3, [r4, #12]
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	463b      	mov	r3, r7
 8008b40:	4628      	mov	r0, r5
 8008b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b46:	f000 b8e7 	b.w	8008d18 <_write_r>

08008b4a <__sseek>:
 8008b4a:	b510      	push	{r4, lr}
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b52:	f000 f8bd 	bl	8008cd0 <_lseek_r>
 8008b56:	1c43      	adds	r3, r0, #1
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	bf15      	itete	ne
 8008b5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b66:	81a3      	strheq	r3, [r4, #12]
 8008b68:	bf18      	it	ne
 8008b6a:	81a3      	strhne	r3, [r4, #12]
 8008b6c:	bd10      	pop	{r4, pc}

08008b6e <__sclose>:
 8008b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b72:	f000 b89d 	b.w	8008cb0 <_close_r>

08008b76 <__swbuf_r>:
 8008b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b78:	460e      	mov	r6, r1
 8008b7a:	4614      	mov	r4, r2
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	b118      	cbz	r0, 8008b88 <__swbuf_r+0x12>
 8008b80:	6a03      	ldr	r3, [r0, #32]
 8008b82:	b90b      	cbnz	r3, 8008b88 <__swbuf_r+0x12>
 8008b84:	f7ff fe3a 	bl	80087fc <__sinit>
 8008b88:	69a3      	ldr	r3, [r4, #24]
 8008b8a:	60a3      	str	r3, [r4, #8]
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	071a      	lsls	r2, r3, #28
 8008b90:	d525      	bpl.n	8008bde <__swbuf_r+0x68>
 8008b92:	6923      	ldr	r3, [r4, #16]
 8008b94:	b31b      	cbz	r3, 8008bde <__swbuf_r+0x68>
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	6922      	ldr	r2, [r4, #16]
 8008b9a:	1a98      	subs	r0, r3, r2
 8008b9c:	6963      	ldr	r3, [r4, #20]
 8008b9e:	b2f6      	uxtb	r6, r6
 8008ba0:	4283      	cmp	r3, r0
 8008ba2:	4637      	mov	r7, r6
 8008ba4:	dc04      	bgt.n	8008bb0 <__swbuf_r+0x3a>
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	4628      	mov	r0, r5
 8008baa:	f000 feb5 	bl	8009918 <_fflush_r>
 8008bae:	b9e0      	cbnz	r0, 8008bea <__swbuf_r+0x74>
 8008bb0:	68a3      	ldr	r3, [r4, #8]
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	60a3      	str	r3, [r4, #8]
 8008bb6:	6823      	ldr	r3, [r4, #0]
 8008bb8:	1c5a      	adds	r2, r3, #1
 8008bba:	6022      	str	r2, [r4, #0]
 8008bbc:	701e      	strb	r6, [r3, #0]
 8008bbe:	6962      	ldr	r2, [r4, #20]
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d004      	beq.n	8008bd0 <__swbuf_r+0x5a>
 8008bc6:	89a3      	ldrh	r3, [r4, #12]
 8008bc8:	07db      	lsls	r3, r3, #31
 8008bca:	d506      	bpl.n	8008bda <__swbuf_r+0x64>
 8008bcc:	2e0a      	cmp	r6, #10
 8008bce:	d104      	bne.n	8008bda <__swbuf_r+0x64>
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	f000 fea0 	bl	8009918 <_fflush_r>
 8008bd8:	b938      	cbnz	r0, 8008bea <__swbuf_r+0x74>
 8008bda:	4638      	mov	r0, r7
 8008bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bde:	4621      	mov	r1, r4
 8008be0:	4628      	mov	r0, r5
 8008be2:	f000 f805 	bl	8008bf0 <__swsetup_r>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d0d5      	beq.n	8008b96 <__swbuf_r+0x20>
 8008bea:	f04f 37ff 	mov.w	r7, #4294967295
 8008bee:	e7f4      	b.n	8008bda <__swbuf_r+0x64>

08008bf0 <__swsetup_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4b2a      	ldr	r3, [pc, #168]	; (8008c9c <__swsetup_r+0xac>)
 8008bf4:	4605      	mov	r5, r0
 8008bf6:	6818      	ldr	r0, [r3, #0]
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	b118      	cbz	r0, 8008c04 <__swsetup_r+0x14>
 8008bfc:	6a03      	ldr	r3, [r0, #32]
 8008bfe:	b90b      	cbnz	r3, 8008c04 <__swsetup_r+0x14>
 8008c00:	f7ff fdfc 	bl	80087fc <__sinit>
 8008c04:	89a3      	ldrh	r3, [r4, #12]
 8008c06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c0a:	0718      	lsls	r0, r3, #28
 8008c0c:	d422      	bmi.n	8008c54 <__swsetup_r+0x64>
 8008c0e:	06d9      	lsls	r1, r3, #27
 8008c10:	d407      	bmi.n	8008c22 <__swsetup_r+0x32>
 8008c12:	2309      	movs	r3, #9
 8008c14:	602b      	str	r3, [r5, #0]
 8008c16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c1a:	81a3      	strh	r3, [r4, #12]
 8008c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c20:	e034      	b.n	8008c8c <__swsetup_r+0x9c>
 8008c22:	0758      	lsls	r0, r3, #29
 8008c24:	d512      	bpl.n	8008c4c <__swsetup_r+0x5c>
 8008c26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c28:	b141      	cbz	r1, 8008c3c <__swsetup_r+0x4c>
 8008c2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c2e:	4299      	cmp	r1, r3
 8008c30:	d002      	beq.n	8008c38 <__swsetup_r+0x48>
 8008c32:	4628      	mov	r0, r5
 8008c34:	f000 f8be 	bl	8008db4 <_free_r>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	6363      	str	r3, [r4, #52]	; 0x34
 8008c3c:	89a3      	ldrh	r3, [r4, #12]
 8008c3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	2300      	movs	r3, #0
 8008c46:	6063      	str	r3, [r4, #4]
 8008c48:	6923      	ldr	r3, [r4, #16]
 8008c4a:	6023      	str	r3, [r4, #0]
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	f043 0308 	orr.w	r3, r3, #8
 8008c52:	81a3      	strh	r3, [r4, #12]
 8008c54:	6923      	ldr	r3, [r4, #16]
 8008c56:	b94b      	cbnz	r3, 8008c6c <__swsetup_r+0x7c>
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c62:	d003      	beq.n	8008c6c <__swsetup_r+0x7c>
 8008c64:	4621      	mov	r1, r4
 8008c66:	4628      	mov	r0, r5
 8008c68:	f000 fea4 	bl	80099b4 <__smakebuf_r>
 8008c6c:	89a0      	ldrh	r0, [r4, #12]
 8008c6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c72:	f010 0301 	ands.w	r3, r0, #1
 8008c76:	d00a      	beq.n	8008c8e <__swsetup_r+0x9e>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	60a3      	str	r3, [r4, #8]
 8008c7c:	6963      	ldr	r3, [r4, #20]
 8008c7e:	425b      	negs	r3, r3
 8008c80:	61a3      	str	r3, [r4, #24]
 8008c82:	6923      	ldr	r3, [r4, #16]
 8008c84:	b943      	cbnz	r3, 8008c98 <__swsetup_r+0xa8>
 8008c86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c8a:	d1c4      	bne.n	8008c16 <__swsetup_r+0x26>
 8008c8c:	bd38      	pop	{r3, r4, r5, pc}
 8008c8e:	0781      	lsls	r1, r0, #30
 8008c90:	bf58      	it	pl
 8008c92:	6963      	ldrpl	r3, [r4, #20]
 8008c94:	60a3      	str	r3, [r4, #8]
 8008c96:	e7f4      	b.n	8008c82 <__swsetup_r+0x92>
 8008c98:	2000      	movs	r0, #0
 8008c9a:	e7f7      	b.n	8008c8c <__swsetup_r+0x9c>
 8008c9c:	200000cc 	.word	0x200000cc

08008ca0 <memset>:
 8008ca0:	4402      	add	r2, r0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d100      	bne.n	8008caa <memset+0xa>
 8008ca8:	4770      	bx	lr
 8008caa:	f803 1b01 	strb.w	r1, [r3], #1
 8008cae:	e7f9      	b.n	8008ca4 <memset+0x4>

08008cb0 <_close_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4d06      	ldr	r5, [pc, #24]	; (8008ccc <_close_r+0x1c>)
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	4608      	mov	r0, r1
 8008cba:	602b      	str	r3, [r5, #0]
 8008cbc:	f7fb fecc 	bl	8004a58 <_close>
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	d102      	bne.n	8008cca <_close_r+0x1a>
 8008cc4:	682b      	ldr	r3, [r5, #0]
 8008cc6:	b103      	cbz	r3, 8008cca <_close_r+0x1a>
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
 8008ccc:	20004378 	.word	0x20004378

08008cd0 <_lseek_r>:
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	4d07      	ldr	r5, [pc, #28]	; (8008cf0 <_lseek_r+0x20>)
 8008cd4:	4604      	mov	r4, r0
 8008cd6:	4608      	mov	r0, r1
 8008cd8:	4611      	mov	r1, r2
 8008cda:	2200      	movs	r2, #0
 8008cdc:	602a      	str	r2, [r5, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	f7fb fee1 	bl	8004aa6 <_lseek>
 8008ce4:	1c43      	adds	r3, r0, #1
 8008ce6:	d102      	bne.n	8008cee <_lseek_r+0x1e>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	b103      	cbz	r3, 8008cee <_lseek_r+0x1e>
 8008cec:	6023      	str	r3, [r4, #0]
 8008cee:	bd38      	pop	{r3, r4, r5, pc}
 8008cf0:	20004378 	.word	0x20004378

08008cf4 <_read_r>:
 8008cf4:	b538      	push	{r3, r4, r5, lr}
 8008cf6:	4d07      	ldr	r5, [pc, #28]	; (8008d14 <_read_r+0x20>)
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	4608      	mov	r0, r1
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	2200      	movs	r2, #0
 8008d00:	602a      	str	r2, [r5, #0]
 8008d02:	461a      	mov	r2, r3
 8008d04:	f7fb fe6f 	bl	80049e6 <_read>
 8008d08:	1c43      	adds	r3, r0, #1
 8008d0a:	d102      	bne.n	8008d12 <_read_r+0x1e>
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	b103      	cbz	r3, 8008d12 <_read_r+0x1e>
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	bd38      	pop	{r3, r4, r5, pc}
 8008d14:	20004378 	.word	0x20004378

08008d18 <_write_r>:
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	4d07      	ldr	r5, [pc, #28]	; (8008d38 <_write_r+0x20>)
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	4608      	mov	r0, r1
 8008d20:	4611      	mov	r1, r2
 8008d22:	2200      	movs	r2, #0
 8008d24:	602a      	str	r2, [r5, #0]
 8008d26:	461a      	mov	r2, r3
 8008d28:	f7fb fe7a 	bl	8004a20 <_write>
 8008d2c:	1c43      	adds	r3, r0, #1
 8008d2e:	d102      	bne.n	8008d36 <_write_r+0x1e>
 8008d30:	682b      	ldr	r3, [r5, #0]
 8008d32:	b103      	cbz	r3, 8008d36 <_write_r+0x1e>
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	bd38      	pop	{r3, r4, r5, pc}
 8008d38:	20004378 	.word	0x20004378

08008d3c <__errno>:
 8008d3c:	4b01      	ldr	r3, [pc, #4]	; (8008d44 <__errno+0x8>)
 8008d3e:	6818      	ldr	r0, [r3, #0]
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	200000cc 	.word	0x200000cc

08008d48 <__libc_init_array>:
 8008d48:	b570      	push	{r4, r5, r6, lr}
 8008d4a:	4d0d      	ldr	r5, [pc, #52]	; (8008d80 <__libc_init_array+0x38>)
 8008d4c:	4c0d      	ldr	r4, [pc, #52]	; (8008d84 <__libc_init_array+0x3c>)
 8008d4e:	1b64      	subs	r4, r4, r5
 8008d50:	10a4      	asrs	r4, r4, #2
 8008d52:	2600      	movs	r6, #0
 8008d54:	42a6      	cmp	r6, r4
 8008d56:	d109      	bne.n	8008d6c <__libc_init_array+0x24>
 8008d58:	4d0b      	ldr	r5, [pc, #44]	; (8008d88 <__libc_init_array+0x40>)
 8008d5a:	4c0c      	ldr	r4, [pc, #48]	; (8008d8c <__libc_init_array+0x44>)
 8008d5c:	f000 feea 	bl	8009b34 <_init>
 8008d60:	1b64      	subs	r4, r4, r5
 8008d62:	10a4      	asrs	r4, r4, #2
 8008d64:	2600      	movs	r6, #0
 8008d66:	42a6      	cmp	r6, r4
 8008d68:	d105      	bne.n	8008d76 <__libc_init_array+0x2e>
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d70:	4798      	blx	r3
 8008d72:	3601      	adds	r6, #1
 8008d74:	e7ee      	b.n	8008d54 <__libc_init_array+0xc>
 8008d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d7a:	4798      	blx	r3
 8008d7c:	3601      	adds	r6, #1
 8008d7e:	e7f2      	b.n	8008d66 <__libc_init_array+0x1e>
 8008d80:	0800a00c 	.word	0x0800a00c
 8008d84:	0800a00c 	.word	0x0800a00c
 8008d88:	0800a00c 	.word	0x0800a00c
 8008d8c:	0800a010 	.word	0x0800a010

08008d90 <__retarget_lock_init_recursive>:
 8008d90:	4770      	bx	lr

08008d92 <__retarget_lock_acquire_recursive>:
 8008d92:	4770      	bx	lr

08008d94 <__retarget_lock_release_recursive>:
 8008d94:	4770      	bx	lr

08008d96 <memcpy>:
 8008d96:	440a      	add	r2, r1
 8008d98:	4291      	cmp	r1, r2
 8008d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d9e:	d100      	bne.n	8008da2 <memcpy+0xc>
 8008da0:	4770      	bx	lr
 8008da2:	b510      	push	{r4, lr}
 8008da4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008da8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dac:	4291      	cmp	r1, r2
 8008dae:	d1f9      	bne.n	8008da4 <memcpy+0xe>
 8008db0:	bd10      	pop	{r4, pc}
	...

08008db4 <_free_r>:
 8008db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008db6:	2900      	cmp	r1, #0
 8008db8:	d044      	beq.n	8008e44 <_free_r+0x90>
 8008dba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dbe:	9001      	str	r0, [sp, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f1a1 0404 	sub.w	r4, r1, #4
 8008dc6:	bfb8      	it	lt
 8008dc8:	18e4      	addlt	r4, r4, r3
 8008dca:	f000 f8e7 	bl	8008f9c <__malloc_lock>
 8008dce:	4a1e      	ldr	r2, [pc, #120]	; (8008e48 <_free_r+0x94>)
 8008dd0:	9801      	ldr	r0, [sp, #4]
 8008dd2:	6813      	ldr	r3, [r2, #0]
 8008dd4:	b933      	cbnz	r3, 8008de4 <_free_r+0x30>
 8008dd6:	6063      	str	r3, [r4, #4]
 8008dd8:	6014      	str	r4, [r2, #0]
 8008dda:	b003      	add	sp, #12
 8008ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008de0:	f000 b8e2 	b.w	8008fa8 <__malloc_unlock>
 8008de4:	42a3      	cmp	r3, r4
 8008de6:	d908      	bls.n	8008dfa <_free_r+0x46>
 8008de8:	6825      	ldr	r5, [r4, #0]
 8008dea:	1961      	adds	r1, r4, r5
 8008dec:	428b      	cmp	r3, r1
 8008dee:	bf01      	itttt	eq
 8008df0:	6819      	ldreq	r1, [r3, #0]
 8008df2:	685b      	ldreq	r3, [r3, #4]
 8008df4:	1949      	addeq	r1, r1, r5
 8008df6:	6021      	streq	r1, [r4, #0]
 8008df8:	e7ed      	b.n	8008dd6 <_free_r+0x22>
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	b10b      	cbz	r3, 8008e04 <_free_r+0x50>
 8008e00:	42a3      	cmp	r3, r4
 8008e02:	d9fa      	bls.n	8008dfa <_free_r+0x46>
 8008e04:	6811      	ldr	r1, [r2, #0]
 8008e06:	1855      	adds	r5, r2, r1
 8008e08:	42a5      	cmp	r5, r4
 8008e0a:	d10b      	bne.n	8008e24 <_free_r+0x70>
 8008e0c:	6824      	ldr	r4, [r4, #0]
 8008e0e:	4421      	add	r1, r4
 8008e10:	1854      	adds	r4, r2, r1
 8008e12:	42a3      	cmp	r3, r4
 8008e14:	6011      	str	r1, [r2, #0]
 8008e16:	d1e0      	bne.n	8008dda <_free_r+0x26>
 8008e18:	681c      	ldr	r4, [r3, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	6053      	str	r3, [r2, #4]
 8008e1e:	440c      	add	r4, r1
 8008e20:	6014      	str	r4, [r2, #0]
 8008e22:	e7da      	b.n	8008dda <_free_r+0x26>
 8008e24:	d902      	bls.n	8008e2c <_free_r+0x78>
 8008e26:	230c      	movs	r3, #12
 8008e28:	6003      	str	r3, [r0, #0]
 8008e2a:	e7d6      	b.n	8008dda <_free_r+0x26>
 8008e2c:	6825      	ldr	r5, [r4, #0]
 8008e2e:	1961      	adds	r1, r4, r5
 8008e30:	428b      	cmp	r3, r1
 8008e32:	bf04      	itt	eq
 8008e34:	6819      	ldreq	r1, [r3, #0]
 8008e36:	685b      	ldreq	r3, [r3, #4]
 8008e38:	6063      	str	r3, [r4, #4]
 8008e3a:	bf04      	itt	eq
 8008e3c:	1949      	addeq	r1, r1, r5
 8008e3e:	6021      	streq	r1, [r4, #0]
 8008e40:	6054      	str	r4, [r2, #4]
 8008e42:	e7ca      	b.n	8008dda <_free_r+0x26>
 8008e44:	b003      	add	sp, #12
 8008e46:	bd30      	pop	{r4, r5, pc}
 8008e48:	20004380 	.word	0x20004380

08008e4c <malloc>:
 8008e4c:	4b02      	ldr	r3, [pc, #8]	; (8008e58 <malloc+0xc>)
 8008e4e:	4601      	mov	r1, r0
 8008e50:	6818      	ldr	r0, [r3, #0]
 8008e52:	f000 b823 	b.w	8008e9c <_malloc_r>
 8008e56:	bf00      	nop
 8008e58:	200000cc 	.word	0x200000cc

08008e5c <sbrk_aligned>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	4e0e      	ldr	r6, [pc, #56]	; (8008e98 <sbrk_aligned+0x3c>)
 8008e60:	460c      	mov	r4, r1
 8008e62:	6831      	ldr	r1, [r6, #0]
 8008e64:	4605      	mov	r5, r0
 8008e66:	b911      	cbnz	r1, 8008e6e <sbrk_aligned+0x12>
 8008e68:	f000 fe1c 	bl	8009aa4 <_sbrk_r>
 8008e6c:	6030      	str	r0, [r6, #0]
 8008e6e:	4621      	mov	r1, r4
 8008e70:	4628      	mov	r0, r5
 8008e72:	f000 fe17 	bl	8009aa4 <_sbrk_r>
 8008e76:	1c43      	adds	r3, r0, #1
 8008e78:	d00a      	beq.n	8008e90 <sbrk_aligned+0x34>
 8008e7a:	1cc4      	adds	r4, r0, #3
 8008e7c:	f024 0403 	bic.w	r4, r4, #3
 8008e80:	42a0      	cmp	r0, r4
 8008e82:	d007      	beq.n	8008e94 <sbrk_aligned+0x38>
 8008e84:	1a21      	subs	r1, r4, r0
 8008e86:	4628      	mov	r0, r5
 8008e88:	f000 fe0c 	bl	8009aa4 <_sbrk_r>
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	d101      	bne.n	8008e94 <sbrk_aligned+0x38>
 8008e90:	f04f 34ff 	mov.w	r4, #4294967295
 8008e94:	4620      	mov	r0, r4
 8008e96:	bd70      	pop	{r4, r5, r6, pc}
 8008e98:	20004384 	.word	0x20004384

08008e9c <_malloc_r>:
 8008e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ea0:	1ccd      	adds	r5, r1, #3
 8008ea2:	f025 0503 	bic.w	r5, r5, #3
 8008ea6:	3508      	adds	r5, #8
 8008ea8:	2d0c      	cmp	r5, #12
 8008eaa:	bf38      	it	cc
 8008eac:	250c      	movcc	r5, #12
 8008eae:	2d00      	cmp	r5, #0
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	db01      	blt.n	8008eb8 <_malloc_r+0x1c>
 8008eb4:	42a9      	cmp	r1, r5
 8008eb6:	d905      	bls.n	8008ec4 <_malloc_r+0x28>
 8008eb8:	230c      	movs	r3, #12
 8008eba:	603b      	str	r3, [r7, #0]
 8008ebc:	2600      	movs	r6, #0
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ec4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008f98 <_malloc_r+0xfc>
 8008ec8:	f000 f868 	bl	8008f9c <__malloc_lock>
 8008ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8008ed0:	461c      	mov	r4, r3
 8008ed2:	bb5c      	cbnz	r4, 8008f2c <_malloc_r+0x90>
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	f7ff ffc0 	bl	8008e5c <sbrk_aligned>
 8008edc:	1c43      	adds	r3, r0, #1
 8008ede:	4604      	mov	r4, r0
 8008ee0:	d155      	bne.n	8008f8e <_malloc_r+0xf2>
 8008ee2:	f8d8 4000 	ldr.w	r4, [r8]
 8008ee6:	4626      	mov	r6, r4
 8008ee8:	2e00      	cmp	r6, #0
 8008eea:	d145      	bne.n	8008f78 <_malloc_r+0xdc>
 8008eec:	2c00      	cmp	r4, #0
 8008eee:	d048      	beq.n	8008f82 <_malloc_r+0xe6>
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	4631      	mov	r1, r6
 8008ef4:	4638      	mov	r0, r7
 8008ef6:	eb04 0903 	add.w	r9, r4, r3
 8008efa:	f000 fdd3 	bl	8009aa4 <_sbrk_r>
 8008efe:	4581      	cmp	r9, r0
 8008f00:	d13f      	bne.n	8008f82 <_malloc_r+0xe6>
 8008f02:	6821      	ldr	r1, [r4, #0]
 8008f04:	1a6d      	subs	r5, r5, r1
 8008f06:	4629      	mov	r1, r5
 8008f08:	4638      	mov	r0, r7
 8008f0a:	f7ff ffa7 	bl	8008e5c <sbrk_aligned>
 8008f0e:	3001      	adds	r0, #1
 8008f10:	d037      	beq.n	8008f82 <_malloc_r+0xe6>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	442b      	add	r3, r5
 8008f16:	6023      	str	r3, [r4, #0]
 8008f18:	f8d8 3000 	ldr.w	r3, [r8]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d038      	beq.n	8008f92 <_malloc_r+0xf6>
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	42a2      	cmp	r2, r4
 8008f24:	d12b      	bne.n	8008f7e <_malloc_r+0xe2>
 8008f26:	2200      	movs	r2, #0
 8008f28:	605a      	str	r2, [r3, #4]
 8008f2a:	e00f      	b.n	8008f4c <_malloc_r+0xb0>
 8008f2c:	6822      	ldr	r2, [r4, #0]
 8008f2e:	1b52      	subs	r2, r2, r5
 8008f30:	d41f      	bmi.n	8008f72 <_malloc_r+0xd6>
 8008f32:	2a0b      	cmp	r2, #11
 8008f34:	d917      	bls.n	8008f66 <_malloc_r+0xca>
 8008f36:	1961      	adds	r1, r4, r5
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	6025      	str	r5, [r4, #0]
 8008f3c:	bf18      	it	ne
 8008f3e:	6059      	strne	r1, [r3, #4]
 8008f40:	6863      	ldr	r3, [r4, #4]
 8008f42:	bf08      	it	eq
 8008f44:	f8c8 1000 	streq.w	r1, [r8]
 8008f48:	5162      	str	r2, [r4, r5]
 8008f4a:	604b      	str	r3, [r1, #4]
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	f104 060b 	add.w	r6, r4, #11
 8008f52:	f000 f829 	bl	8008fa8 <__malloc_unlock>
 8008f56:	f026 0607 	bic.w	r6, r6, #7
 8008f5a:	1d23      	adds	r3, r4, #4
 8008f5c:	1af2      	subs	r2, r6, r3
 8008f5e:	d0ae      	beq.n	8008ebe <_malloc_r+0x22>
 8008f60:	1b9b      	subs	r3, r3, r6
 8008f62:	50a3      	str	r3, [r4, r2]
 8008f64:	e7ab      	b.n	8008ebe <_malloc_r+0x22>
 8008f66:	42a3      	cmp	r3, r4
 8008f68:	6862      	ldr	r2, [r4, #4]
 8008f6a:	d1dd      	bne.n	8008f28 <_malloc_r+0x8c>
 8008f6c:	f8c8 2000 	str.w	r2, [r8]
 8008f70:	e7ec      	b.n	8008f4c <_malloc_r+0xb0>
 8008f72:	4623      	mov	r3, r4
 8008f74:	6864      	ldr	r4, [r4, #4]
 8008f76:	e7ac      	b.n	8008ed2 <_malloc_r+0x36>
 8008f78:	4634      	mov	r4, r6
 8008f7a:	6876      	ldr	r6, [r6, #4]
 8008f7c:	e7b4      	b.n	8008ee8 <_malloc_r+0x4c>
 8008f7e:	4613      	mov	r3, r2
 8008f80:	e7cc      	b.n	8008f1c <_malloc_r+0x80>
 8008f82:	230c      	movs	r3, #12
 8008f84:	603b      	str	r3, [r7, #0]
 8008f86:	4638      	mov	r0, r7
 8008f88:	f000 f80e 	bl	8008fa8 <__malloc_unlock>
 8008f8c:	e797      	b.n	8008ebe <_malloc_r+0x22>
 8008f8e:	6025      	str	r5, [r4, #0]
 8008f90:	e7dc      	b.n	8008f4c <_malloc_r+0xb0>
 8008f92:	605b      	str	r3, [r3, #4]
 8008f94:	deff      	udf	#255	; 0xff
 8008f96:	bf00      	nop
 8008f98:	20004380 	.word	0x20004380

08008f9c <__malloc_lock>:
 8008f9c:	4801      	ldr	r0, [pc, #4]	; (8008fa4 <__malloc_lock+0x8>)
 8008f9e:	f7ff bef8 	b.w	8008d92 <__retarget_lock_acquire_recursive>
 8008fa2:	bf00      	nop
 8008fa4:	2000437c 	.word	0x2000437c

08008fa8 <__malloc_unlock>:
 8008fa8:	4801      	ldr	r0, [pc, #4]	; (8008fb0 <__malloc_unlock+0x8>)
 8008faa:	f7ff bef3 	b.w	8008d94 <__retarget_lock_release_recursive>
 8008fae:	bf00      	nop
 8008fb0:	2000437c 	.word	0x2000437c

08008fb4 <__ssputs_r>:
 8008fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb8:	688e      	ldr	r6, [r1, #8]
 8008fba:	461f      	mov	r7, r3
 8008fbc:	42be      	cmp	r6, r7
 8008fbe:	680b      	ldr	r3, [r1, #0]
 8008fc0:	4682      	mov	sl, r0
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	4690      	mov	r8, r2
 8008fc6:	d82c      	bhi.n	8009022 <__ssputs_r+0x6e>
 8008fc8:	898a      	ldrh	r2, [r1, #12]
 8008fca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fce:	d026      	beq.n	800901e <__ssputs_r+0x6a>
 8008fd0:	6965      	ldr	r5, [r4, #20]
 8008fd2:	6909      	ldr	r1, [r1, #16]
 8008fd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fd8:	eba3 0901 	sub.w	r9, r3, r1
 8008fdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fe0:	1c7b      	adds	r3, r7, #1
 8008fe2:	444b      	add	r3, r9
 8008fe4:	106d      	asrs	r5, r5, #1
 8008fe6:	429d      	cmp	r5, r3
 8008fe8:	bf38      	it	cc
 8008fea:	461d      	movcc	r5, r3
 8008fec:	0553      	lsls	r3, r2, #21
 8008fee:	d527      	bpl.n	8009040 <__ssputs_r+0x8c>
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	f7ff ff53 	bl	8008e9c <_malloc_r>
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	b360      	cbz	r0, 8009054 <__ssputs_r+0xa0>
 8008ffa:	6921      	ldr	r1, [r4, #16]
 8008ffc:	464a      	mov	r2, r9
 8008ffe:	f7ff feca 	bl	8008d96 <memcpy>
 8009002:	89a3      	ldrh	r3, [r4, #12]
 8009004:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800900c:	81a3      	strh	r3, [r4, #12]
 800900e:	6126      	str	r6, [r4, #16]
 8009010:	6165      	str	r5, [r4, #20]
 8009012:	444e      	add	r6, r9
 8009014:	eba5 0509 	sub.w	r5, r5, r9
 8009018:	6026      	str	r6, [r4, #0]
 800901a:	60a5      	str	r5, [r4, #8]
 800901c:	463e      	mov	r6, r7
 800901e:	42be      	cmp	r6, r7
 8009020:	d900      	bls.n	8009024 <__ssputs_r+0x70>
 8009022:	463e      	mov	r6, r7
 8009024:	6820      	ldr	r0, [r4, #0]
 8009026:	4632      	mov	r2, r6
 8009028:	4641      	mov	r1, r8
 800902a:	f000 fcff 	bl	8009a2c <memmove>
 800902e:	68a3      	ldr	r3, [r4, #8]
 8009030:	1b9b      	subs	r3, r3, r6
 8009032:	60a3      	str	r3, [r4, #8]
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	4433      	add	r3, r6
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	2000      	movs	r0, #0
 800903c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009040:	462a      	mov	r2, r5
 8009042:	f000 fd3f 	bl	8009ac4 <_realloc_r>
 8009046:	4606      	mov	r6, r0
 8009048:	2800      	cmp	r0, #0
 800904a:	d1e0      	bne.n	800900e <__ssputs_r+0x5a>
 800904c:	6921      	ldr	r1, [r4, #16]
 800904e:	4650      	mov	r0, sl
 8009050:	f7ff feb0 	bl	8008db4 <_free_r>
 8009054:	230c      	movs	r3, #12
 8009056:	f8ca 3000 	str.w	r3, [sl]
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009060:	81a3      	strh	r3, [r4, #12]
 8009062:	f04f 30ff 	mov.w	r0, #4294967295
 8009066:	e7e9      	b.n	800903c <__ssputs_r+0x88>

08009068 <_svfiprintf_r>:
 8009068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	4698      	mov	r8, r3
 800906e:	898b      	ldrh	r3, [r1, #12]
 8009070:	061b      	lsls	r3, r3, #24
 8009072:	b09d      	sub	sp, #116	; 0x74
 8009074:	4607      	mov	r7, r0
 8009076:	460d      	mov	r5, r1
 8009078:	4614      	mov	r4, r2
 800907a:	d50e      	bpl.n	800909a <_svfiprintf_r+0x32>
 800907c:	690b      	ldr	r3, [r1, #16]
 800907e:	b963      	cbnz	r3, 800909a <_svfiprintf_r+0x32>
 8009080:	2140      	movs	r1, #64	; 0x40
 8009082:	f7ff ff0b 	bl	8008e9c <_malloc_r>
 8009086:	6028      	str	r0, [r5, #0]
 8009088:	6128      	str	r0, [r5, #16]
 800908a:	b920      	cbnz	r0, 8009096 <_svfiprintf_r+0x2e>
 800908c:	230c      	movs	r3, #12
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	f04f 30ff 	mov.w	r0, #4294967295
 8009094:	e0d0      	b.n	8009238 <_svfiprintf_r+0x1d0>
 8009096:	2340      	movs	r3, #64	; 0x40
 8009098:	616b      	str	r3, [r5, #20]
 800909a:	2300      	movs	r3, #0
 800909c:	9309      	str	r3, [sp, #36]	; 0x24
 800909e:	2320      	movs	r3, #32
 80090a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80090a8:	2330      	movs	r3, #48	; 0x30
 80090aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009250 <_svfiprintf_r+0x1e8>
 80090ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090b2:	f04f 0901 	mov.w	r9, #1
 80090b6:	4623      	mov	r3, r4
 80090b8:	469a      	mov	sl, r3
 80090ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090be:	b10a      	cbz	r2, 80090c4 <_svfiprintf_r+0x5c>
 80090c0:	2a25      	cmp	r2, #37	; 0x25
 80090c2:	d1f9      	bne.n	80090b8 <_svfiprintf_r+0x50>
 80090c4:	ebba 0b04 	subs.w	fp, sl, r4
 80090c8:	d00b      	beq.n	80090e2 <_svfiprintf_r+0x7a>
 80090ca:	465b      	mov	r3, fp
 80090cc:	4622      	mov	r2, r4
 80090ce:	4629      	mov	r1, r5
 80090d0:	4638      	mov	r0, r7
 80090d2:	f7ff ff6f 	bl	8008fb4 <__ssputs_r>
 80090d6:	3001      	adds	r0, #1
 80090d8:	f000 80a9 	beq.w	800922e <_svfiprintf_r+0x1c6>
 80090dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090de:	445a      	add	r2, fp
 80090e0:	9209      	str	r2, [sp, #36]	; 0x24
 80090e2:	f89a 3000 	ldrb.w	r3, [sl]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 80a1 	beq.w	800922e <_svfiprintf_r+0x1c6>
 80090ec:	2300      	movs	r3, #0
 80090ee:	f04f 32ff 	mov.w	r2, #4294967295
 80090f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090f6:	f10a 0a01 	add.w	sl, sl, #1
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	9307      	str	r3, [sp, #28]
 80090fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009102:	931a      	str	r3, [sp, #104]	; 0x68
 8009104:	4654      	mov	r4, sl
 8009106:	2205      	movs	r2, #5
 8009108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910c:	4850      	ldr	r0, [pc, #320]	; (8009250 <_svfiprintf_r+0x1e8>)
 800910e:	f7f7 f867 	bl	80001e0 <memchr>
 8009112:	9a04      	ldr	r2, [sp, #16]
 8009114:	b9d8      	cbnz	r0, 800914e <_svfiprintf_r+0xe6>
 8009116:	06d0      	lsls	r0, r2, #27
 8009118:	bf44      	itt	mi
 800911a:	2320      	movmi	r3, #32
 800911c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009120:	0711      	lsls	r1, r2, #28
 8009122:	bf44      	itt	mi
 8009124:	232b      	movmi	r3, #43	; 0x2b
 8009126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800912a:	f89a 3000 	ldrb.w	r3, [sl]
 800912e:	2b2a      	cmp	r3, #42	; 0x2a
 8009130:	d015      	beq.n	800915e <_svfiprintf_r+0xf6>
 8009132:	9a07      	ldr	r2, [sp, #28]
 8009134:	4654      	mov	r4, sl
 8009136:	2000      	movs	r0, #0
 8009138:	f04f 0c0a 	mov.w	ip, #10
 800913c:	4621      	mov	r1, r4
 800913e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009142:	3b30      	subs	r3, #48	; 0x30
 8009144:	2b09      	cmp	r3, #9
 8009146:	d94d      	bls.n	80091e4 <_svfiprintf_r+0x17c>
 8009148:	b1b0      	cbz	r0, 8009178 <_svfiprintf_r+0x110>
 800914a:	9207      	str	r2, [sp, #28]
 800914c:	e014      	b.n	8009178 <_svfiprintf_r+0x110>
 800914e:	eba0 0308 	sub.w	r3, r0, r8
 8009152:	fa09 f303 	lsl.w	r3, r9, r3
 8009156:	4313      	orrs	r3, r2
 8009158:	9304      	str	r3, [sp, #16]
 800915a:	46a2      	mov	sl, r4
 800915c:	e7d2      	b.n	8009104 <_svfiprintf_r+0x9c>
 800915e:	9b03      	ldr	r3, [sp, #12]
 8009160:	1d19      	adds	r1, r3, #4
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	9103      	str	r1, [sp, #12]
 8009166:	2b00      	cmp	r3, #0
 8009168:	bfbb      	ittet	lt
 800916a:	425b      	neglt	r3, r3
 800916c:	f042 0202 	orrlt.w	r2, r2, #2
 8009170:	9307      	strge	r3, [sp, #28]
 8009172:	9307      	strlt	r3, [sp, #28]
 8009174:	bfb8      	it	lt
 8009176:	9204      	strlt	r2, [sp, #16]
 8009178:	7823      	ldrb	r3, [r4, #0]
 800917a:	2b2e      	cmp	r3, #46	; 0x2e
 800917c:	d10c      	bne.n	8009198 <_svfiprintf_r+0x130>
 800917e:	7863      	ldrb	r3, [r4, #1]
 8009180:	2b2a      	cmp	r3, #42	; 0x2a
 8009182:	d134      	bne.n	80091ee <_svfiprintf_r+0x186>
 8009184:	9b03      	ldr	r3, [sp, #12]
 8009186:	1d1a      	adds	r2, r3, #4
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	9203      	str	r2, [sp, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	bfb8      	it	lt
 8009190:	f04f 33ff 	movlt.w	r3, #4294967295
 8009194:	3402      	adds	r4, #2
 8009196:	9305      	str	r3, [sp, #20]
 8009198:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009260 <_svfiprintf_r+0x1f8>
 800919c:	7821      	ldrb	r1, [r4, #0]
 800919e:	2203      	movs	r2, #3
 80091a0:	4650      	mov	r0, sl
 80091a2:	f7f7 f81d 	bl	80001e0 <memchr>
 80091a6:	b138      	cbz	r0, 80091b8 <_svfiprintf_r+0x150>
 80091a8:	9b04      	ldr	r3, [sp, #16]
 80091aa:	eba0 000a 	sub.w	r0, r0, sl
 80091ae:	2240      	movs	r2, #64	; 0x40
 80091b0:	4082      	lsls	r2, r0
 80091b2:	4313      	orrs	r3, r2
 80091b4:	3401      	adds	r4, #1
 80091b6:	9304      	str	r3, [sp, #16]
 80091b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091bc:	4825      	ldr	r0, [pc, #148]	; (8009254 <_svfiprintf_r+0x1ec>)
 80091be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091c2:	2206      	movs	r2, #6
 80091c4:	f7f7 f80c 	bl	80001e0 <memchr>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d038      	beq.n	800923e <_svfiprintf_r+0x1d6>
 80091cc:	4b22      	ldr	r3, [pc, #136]	; (8009258 <_svfiprintf_r+0x1f0>)
 80091ce:	bb1b      	cbnz	r3, 8009218 <_svfiprintf_r+0x1b0>
 80091d0:	9b03      	ldr	r3, [sp, #12]
 80091d2:	3307      	adds	r3, #7
 80091d4:	f023 0307 	bic.w	r3, r3, #7
 80091d8:	3308      	adds	r3, #8
 80091da:	9303      	str	r3, [sp, #12]
 80091dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091de:	4433      	add	r3, r6
 80091e0:	9309      	str	r3, [sp, #36]	; 0x24
 80091e2:	e768      	b.n	80090b6 <_svfiprintf_r+0x4e>
 80091e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80091e8:	460c      	mov	r4, r1
 80091ea:	2001      	movs	r0, #1
 80091ec:	e7a6      	b.n	800913c <_svfiprintf_r+0xd4>
 80091ee:	2300      	movs	r3, #0
 80091f0:	3401      	adds	r4, #1
 80091f2:	9305      	str	r3, [sp, #20]
 80091f4:	4619      	mov	r1, r3
 80091f6:	f04f 0c0a 	mov.w	ip, #10
 80091fa:	4620      	mov	r0, r4
 80091fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009200:	3a30      	subs	r2, #48	; 0x30
 8009202:	2a09      	cmp	r2, #9
 8009204:	d903      	bls.n	800920e <_svfiprintf_r+0x1a6>
 8009206:	2b00      	cmp	r3, #0
 8009208:	d0c6      	beq.n	8009198 <_svfiprintf_r+0x130>
 800920a:	9105      	str	r1, [sp, #20]
 800920c:	e7c4      	b.n	8009198 <_svfiprintf_r+0x130>
 800920e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009212:	4604      	mov	r4, r0
 8009214:	2301      	movs	r3, #1
 8009216:	e7f0      	b.n	80091fa <_svfiprintf_r+0x192>
 8009218:	ab03      	add	r3, sp, #12
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	462a      	mov	r2, r5
 800921e:	4b0f      	ldr	r3, [pc, #60]	; (800925c <_svfiprintf_r+0x1f4>)
 8009220:	a904      	add	r1, sp, #16
 8009222:	4638      	mov	r0, r7
 8009224:	f3af 8000 	nop.w
 8009228:	1c42      	adds	r2, r0, #1
 800922a:	4606      	mov	r6, r0
 800922c:	d1d6      	bne.n	80091dc <_svfiprintf_r+0x174>
 800922e:	89ab      	ldrh	r3, [r5, #12]
 8009230:	065b      	lsls	r3, r3, #25
 8009232:	f53f af2d 	bmi.w	8009090 <_svfiprintf_r+0x28>
 8009236:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009238:	b01d      	add	sp, #116	; 0x74
 800923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923e:	ab03      	add	r3, sp, #12
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	462a      	mov	r2, r5
 8009244:	4b05      	ldr	r3, [pc, #20]	; (800925c <_svfiprintf_r+0x1f4>)
 8009246:	a904      	add	r1, sp, #16
 8009248:	4638      	mov	r0, r7
 800924a:	f000 f9bd 	bl	80095c8 <_printf_i>
 800924e:	e7eb      	b.n	8009228 <_svfiprintf_r+0x1c0>
 8009250:	08009fd0 	.word	0x08009fd0
 8009254:	08009fda 	.word	0x08009fda
 8009258:	00000000 	.word	0x00000000
 800925c:	08008fb5 	.word	0x08008fb5
 8009260:	08009fd6 	.word	0x08009fd6

08009264 <__sfputc_r>:
 8009264:	6893      	ldr	r3, [r2, #8]
 8009266:	3b01      	subs	r3, #1
 8009268:	2b00      	cmp	r3, #0
 800926a:	b410      	push	{r4}
 800926c:	6093      	str	r3, [r2, #8]
 800926e:	da08      	bge.n	8009282 <__sfputc_r+0x1e>
 8009270:	6994      	ldr	r4, [r2, #24]
 8009272:	42a3      	cmp	r3, r4
 8009274:	db01      	blt.n	800927a <__sfputc_r+0x16>
 8009276:	290a      	cmp	r1, #10
 8009278:	d103      	bne.n	8009282 <__sfputc_r+0x1e>
 800927a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800927e:	f7ff bc7a 	b.w	8008b76 <__swbuf_r>
 8009282:	6813      	ldr	r3, [r2, #0]
 8009284:	1c58      	adds	r0, r3, #1
 8009286:	6010      	str	r0, [r2, #0]
 8009288:	7019      	strb	r1, [r3, #0]
 800928a:	4608      	mov	r0, r1
 800928c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009290:	4770      	bx	lr

08009292 <__sfputs_r>:
 8009292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009294:	4606      	mov	r6, r0
 8009296:	460f      	mov	r7, r1
 8009298:	4614      	mov	r4, r2
 800929a:	18d5      	adds	r5, r2, r3
 800929c:	42ac      	cmp	r4, r5
 800929e:	d101      	bne.n	80092a4 <__sfputs_r+0x12>
 80092a0:	2000      	movs	r0, #0
 80092a2:	e007      	b.n	80092b4 <__sfputs_r+0x22>
 80092a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a8:	463a      	mov	r2, r7
 80092aa:	4630      	mov	r0, r6
 80092ac:	f7ff ffda 	bl	8009264 <__sfputc_r>
 80092b0:	1c43      	adds	r3, r0, #1
 80092b2:	d1f3      	bne.n	800929c <__sfputs_r+0xa>
 80092b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092b8 <_vfiprintf_r>:
 80092b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092bc:	460d      	mov	r5, r1
 80092be:	b09d      	sub	sp, #116	; 0x74
 80092c0:	4614      	mov	r4, r2
 80092c2:	4698      	mov	r8, r3
 80092c4:	4606      	mov	r6, r0
 80092c6:	b118      	cbz	r0, 80092d0 <_vfiprintf_r+0x18>
 80092c8:	6a03      	ldr	r3, [r0, #32]
 80092ca:	b90b      	cbnz	r3, 80092d0 <_vfiprintf_r+0x18>
 80092cc:	f7ff fa96 	bl	80087fc <__sinit>
 80092d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092d2:	07d9      	lsls	r1, r3, #31
 80092d4:	d405      	bmi.n	80092e2 <_vfiprintf_r+0x2a>
 80092d6:	89ab      	ldrh	r3, [r5, #12]
 80092d8:	059a      	lsls	r2, r3, #22
 80092da:	d402      	bmi.n	80092e2 <_vfiprintf_r+0x2a>
 80092dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092de:	f7ff fd58 	bl	8008d92 <__retarget_lock_acquire_recursive>
 80092e2:	89ab      	ldrh	r3, [r5, #12]
 80092e4:	071b      	lsls	r3, r3, #28
 80092e6:	d501      	bpl.n	80092ec <_vfiprintf_r+0x34>
 80092e8:	692b      	ldr	r3, [r5, #16]
 80092ea:	b99b      	cbnz	r3, 8009314 <_vfiprintf_r+0x5c>
 80092ec:	4629      	mov	r1, r5
 80092ee:	4630      	mov	r0, r6
 80092f0:	f7ff fc7e 	bl	8008bf0 <__swsetup_r>
 80092f4:	b170      	cbz	r0, 8009314 <_vfiprintf_r+0x5c>
 80092f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092f8:	07dc      	lsls	r4, r3, #31
 80092fa:	d504      	bpl.n	8009306 <_vfiprintf_r+0x4e>
 80092fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009300:	b01d      	add	sp, #116	; 0x74
 8009302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009306:	89ab      	ldrh	r3, [r5, #12]
 8009308:	0598      	lsls	r0, r3, #22
 800930a:	d4f7      	bmi.n	80092fc <_vfiprintf_r+0x44>
 800930c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800930e:	f7ff fd41 	bl	8008d94 <__retarget_lock_release_recursive>
 8009312:	e7f3      	b.n	80092fc <_vfiprintf_r+0x44>
 8009314:	2300      	movs	r3, #0
 8009316:	9309      	str	r3, [sp, #36]	; 0x24
 8009318:	2320      	movs	r3, #32
 800931a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800931e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009322:	2330      	movs	r3, #48	; 0x30
 8009324:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80094d8 <_vfiprintf_r+0x220>
 8009328:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800932c:	f04f 0901 	mov.w	r9, #1
 8009330:	4623      	mov	r3, r4
 8009332:	469a      	mov	sl, r3
 8009334:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009338:	b10a      	cbz	r2, 800933e <_vfiprintf_r+0x86>
 800933a:	2a25      	cmp	r2, #37	; 0x25
 800933c:	d1f9      	bne.n	8009332 <_vfiprintf_r+0x7a>
 800933e:	ebba 0b04 	subs.w	fp, sl, r4
 8009342:	d00b      	beq.n	800935c <_vfiprintf_r+0xa4>
 8009344:	465b      	mov	r3, fp
 8009346:	4622      	mov	r2, r4
 8009348:	4629      	mov	r1, r5
 800934a:	4630      	mov	r0, r6
 800934c:	f7ff ffa1 	bl	8009292 <__sfputs_r>
 8009350:	3001      	adds	r0, #1
 8009352:	f000 80a9 	beq.w	80094a8 <_vfiprintf_r+0x1f0>
 8009356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009358:	445a      	add	r2, fp
 800935a:	9209      	str	r2, [sp, #36]	; 0x24
 800935c:	f89a 3000 	ldrb.w	r3, [sl]
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 80a1 	beq.w	80094a8 <_vfiprintf_r+0x1f0>
 8009366:	2300      	movs	r3, #0
 8009368:	f04f 32ff 	mov.w	r2, #4294967295
 800936c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009370:	f10a 0a01 	add.w	sl, sl, #1
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	9307      	str	r3, [sp, #28]
 8009378:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800937c:	931a      	str	r3, [sp, #104]	; 0x68
 800937e:	4654      	mov	r4, sl
 8009380:	2205      	movs	r2, #5
 8009382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009386:	4854      	ldr	r0, [pc, #336]	; (80094d8 <_vfiprintf_r+0x220>)
 8009388:	f7f6 ff2a 	bl	80001e0 <memchr>
 800938c:	9a04      	ldr	r2, [sp, #16]
 800938e:	b9d8      	cbnz	r0, 80093c8 <_vfiprintf_r+0x110>
 8009390:	06d1      	lsls	r1, r2, #27
 8009392:	bf44      	itt	mi
 8009394:	2320      	movmi	r3, #32
 8009396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800939a:	0713      	lsls	r3, r2, #28
 800939c:	bf44      	itt	mi
 800939e:	232b      	movmi	r3, #43	; 0x2b
 80093a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093a4:	f89a 3000 	ldrb.w	r3, [sl]
 80093a8:	2b2a      	cmp	r3, #42	; 0x2a
 80093aa:	d015      	beq.n	80093d8 <_vfiprintf_r+0x120>
 80093ac:	9a07      	ldr	r2, [sp, #28]
 80093ae:	4654      	mov	r4, sl
 80093b0:	2000      	movs	r0, #0
 80093b2:	f04f 0c0a 	mov.w	ip, #10
 80093b6:	4621      	mov	r1, r4
 80093b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093bc:	3b30      	subs	r3, #48	; 0x30
 80093be:	2b09      	cmp	r3, #9
 80093c0:	d94d      	bls.n	800945e <_vfiprintf_r+0x1a6>
 80093c2:	b1b0      	cbz	r0, 80093f2 <_vfiprintf_r+0x13a>
 80093c4:	9207      	str	r2, [sp, #28]
 80093c6:	e014      	b.n	80093f2 <_vfiprintf_r+0x13a>
 80093c8:	eba0 0308 	sub.w	r3, r0, r8
 80093cc:	fa09 f303 	lsl.w	r3, r9, r3
 80093d0:	4313      	orrs	r3, r2
 80093d2:	9304      	str	r3, [sp, #16]
 80093d4:	46a2      	mov	sl, r4
 80093d6:	e7d2      	b.n	800937e <_vfiprintf_r+0xc6>
 80093d8:	9b03      	ldr	r3, [sp, #12]
 80093da:	1d19      	adds	r1, r3, #4
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	9103      	str	r1, [sp, #12]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	bfbb      	ittet	lt
 80093e4:	425b      	neglt	r3, r3
 80093e6:	f042 0202 	orrlt.w	r2, r2, #2
 80093ea:	9307      	strge	r3, [sp, #28]
 80093ec:	9307      	strlt	r3, [sp, #28]
 80093ee:	bfb8      	it	lt
 80093f0:	9204      	strlt	r2, [sp, #16]
 80093f2:	7823      	ldrb	r3, [r4, #0]
 80093f4:	2b2e      	cmp	r3, #46	; 0x2e
 80093f6:	d10c      	bne.n	8009412 <_vfiprintf_r+0x15a>
 80093f8:	7863      	ldrb	r3, [r4, #1]
 80093fa:	2b2a      	cmp	r3, #42	; 0x2a
 80093fc:	d134      	bne.n	8009468 <_vfiprintf_r+0x1b0>
 80093fe:	9b03      	ldr	r3, [sp, #12]
 8009400:	1d1a      	adds	r2, r3, #4
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	9203      	str	r2, [sp, #12]
 8009406:	2b00      	cmp	r3, #0
 8009408:	bfb8      	it	lt
 800940a:	f04f 33ff 	movlt.w	r3, #4294967295
 800940e:	3402      	adds	r4, #2
 8009410:	9305      	str	r3, [sp, #20]
 8009412:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80094e8 <_vfiprintf_r+0x230>
 8009416:	7821      	ldrb	r1, [r4, #0]
 8009418:	2203      	movs	r2, #3
 800941a:	4650      	mov	r0, sl
 800941c:	f7f6 fee0 	bl	80001e0 <memchr>
 8009420:	b138      	cbz	r0, 8009432 <_vfiprintf_r+0x17a>
 8009422:	9b04      	ldr	r3, [sp, #16]
 8009424:	eba0 000a 	sub.w	r0, r0, sl
 8009428:	2240      	movs	r2, #64	; 0x40
 800942a:	4082      	lsls	r2, r0
 800942c:	4313      	orrs	r3, r2
 800942e:	3401      	adds	r4, #1
 8009430:	9304      	str	r3, [sp, #16]
 8009432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009436:	4829      	ldr	r0, [pc, #164]	; (80094dc <_vfiprintf_r+0x224>)
 8009438:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800943c:	2206      	movs	r2, #6
 800943e:	f7f6 fecf 	bl	80001e0 <memchr>
 8009442:	2800      	cmp	r0, #0
 8009444:	d03f      	beq.n	80094c6 <_vfiprintf_r+0x20e>
 8009446:	4b26      	ldr	r3, [pc, #152]	; (80094e0 <_vfiprintf_r+0x228>)
 8009448:	bb1b      	cbnz	r3, 8009492 <_vfiprintf_r+0x1da>
 800944a:	9b03      	ldr	r3, [sp, #12]
 800944c:	3307      	adds	r3, #7
 800944e:	f023 0307 	bic.w	r3, r3, #7
 8009452:	3308      	adds	r3, #8
 8009454:	9303      	str	r3, [sp, #12]
 8009456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009458:	443b      	add	r3, r7
 800945a:	9309      	str	r3, [sp, #36]	; 0x24
 800945c:	e768      	b.n	8009330 <_vfiprintf_r+0x78>
 800945e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009462:	460c      	mov	r4, r1
 8009464:	2001      	movs	r0, #1
 8009466:	e7a6      	b.n	80093b6 <_vfiprintf_r+0xfe>
 8009468:	2300      	movs	r3, #0
 800946a:	3401      	adds	r4, #1
 800946c:	9305      	str	r3, [sp, #20]
 800946e:	4619      	mov	r1, r3
 8009470:	f04f 0c0a 	mov.w	ip, #10
 8009474:	4620      	mov	r0, r4
 8009476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800947a:	3a30      	subs	r2, #48	; 0x30
 800947c:	2a09      	cmp	r2, #9
 800947e:	d903      	bls.n	8009488 <_vfiprintf_r+0x1d0>
 8009480:	2b00      	cmp	r3, #0
 8009482:	d0c6      	beq.n	8009412 <_vfiprintf_r+0x15a>
 8009484:	9105      	str	r1, [sp, #20]
 8009486:	e7c4      	b.n	8009412 <_vfiprintf_r+0x15a>
 8009488:	fb0c 2101 	mla	r1, ip, r1, r2
 800948c:	4604      	mov	r4, r0
 800948e:	2301      	movs	r3, #1
 8009490:	e7f0      	b.n	8009474 <_vfiprintf_r+0x1bc>
 8009492:	ab03      	add	r3, sp, #12
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	462a      	mov	r2, r5
 8009498:	4b12      	ldr	r3, [pc, #72]	; (80094e4 <_vfiprintf_r+0x22c>)
 800949a:	a904      	add	r1, sp, #16
 800949c:	4630      	mov	r0, r6
 800949e:	f3af 8000 	nop.w
 80094a2:	4607      	mov	r7, r0
 80094a4:	1c78      	adds	r0, r7, #1
 80094a6:	d1d6      	bne.n	8009456 <_vfiprintf_r+0x19e>
 80094a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094aa:	07d9      	lsls	r1, r3, #31
 80094ac:	d405      	bmi.n	80094ba <_vfiprintf_r+0x202>
 80094ae:	89ab      	ldrh	r3, [r5, #12]
 80094b0:	059a      	lsls	r2, r3, #22
 80094b2:	d402      	bmi.n	80094ba <_vfiprintf_r+0x202>
 80094b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094b6:	f7ff fc6d 	bl	8008d94 <__retarget_lock_release_recursive>
 80094ba:	89ab      	ldrh	r3, [r5, #12]
 80094bc:	065b      	lsls	r3, r3, #25
 80094be:	f53f af1d 	bmi.w	80092fc <_vfiprintf_r+0x44>
 80094c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094c4:	e71c      	b.n	8009300 <_vfiprintf_r+0x48>
 80094c6:	ab03      	add	r3, sp, #12
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	462a      	mov	r2, r5
 80094cc:	4b05      	ldr	r3, [pc, #20]	; (80094e4 <_vfiprintf_r+0x22c>)
 80094ce:	a904      	add	r1, sp, #16
 80094d0:	4630      	mov	r0, r6
 80094d2:	f000 f879 	bl	80095c8 <_printf_i>
 80094d6:	e7e4      	b.n	80094a2 <_vfiprintf_r+0x1ea>
 80094d8:	08009fd0 	.word	0x08009fd0
 80094dc:	08009fda 	.word	0x08009fda
 80094e0:	00000000 	.word	0x00000000
 80094e4:	08009293 	.word	0x08009293
 80094e8:	08009fd6 	.word	0x08009fd6

080094ec <_printf_common>:
 80094ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f0:	4616      	mov	r6, r2
 80094f2:	4699      	mov	r9, r3
 80094f4:	688a      	ldr	r2, [r1, #8]
 80094f6:	690b      	ldr	r3, [r1, #16]
 80094f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094fc:	4293      	cmp	r3, r2
 80094fe:	bfb8      	it	lt
 8009500:	4613      	movlt	r3, r2
 8009502:	6033      	str	r3, [r6, #0]
 8009504:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009508:	4607      	mov	r7, r0
 800950a:	460c      	mov	r4, r1
 800950c:	b10a      	cbz	r2, 8009512 <_printf_common+0x26>
 800950e:	3301      	adds	r3, #1
 8009510:	6033      	str	r3, [r6, #0]
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	0699      	lsls	r1, r3, #26
 8009516:	bf42      	ittt	mi
 8009518:	6833      	ldrmi	r3, [r6, #0]
 800951a:	3302      	addmi	r3, #2
 800951c:	6033      	strmi	r3, [r6, #0]
 800951e:	6825      	ldr	r5, [r4, #0]
 8009520:	f015 0506 	ands.w	r5, r5, #6
 8009524:	d106      	bne.n	8009534 <_printf_common+0x48>
 8009526:	f104 0a19 	add.w	sl, r4, #25
 800952a:	68e3      	ldr	r3, [r4, #12]
 800952c:	6832      	ldr	r2, [r6, #0]
 800952e:	1a9b      	subs	r3, r3, r2
 8009530:	42ab      	cmp	r3, r5
 8009532:	dc26      	bgt.n	8009582 <_printf_common+0x96>
 8009534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009538:	1e13      	subs	r3, r2, #0
 800953a:	6822      	ldr	r2, [r4, #0]
 800953c:	bf18      	it	ne
 800953e:	2301      	movne	r3, #1
 8009540:	0692      	lsls	r2, r2, #26
 8009542:	d42b      	bmi.n	800959c <_printf_common+0xb0>
 8009544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009548:	4649      	mov	r1, r9
 800954a:	4638      	mov	r0, r7
 800954c:	47c0      	blx	r8
 800954e:	3001      	adds	r0, #1
 8009550:	d01e      	beq.n	8009590 <_printf_common+0xa4>
 8009552:	6823      	ldr	r3, [r4, #0]
 8009554:	6922      	ldr	r2, [r4, #16]
 8009556:	f003 0306 	and.w	r3, r3, #6
 800955a:	2b04      	cmp	r3, #4
 800955c:	bf02      	ittt	eq
 800955e:	68e5      	ldreq	r5, [r4, #12]
 8009560:	6833      	ldreq	r3, [r6, #0]
 8009562:	1aed      	subeq	r5, r5, r3
 8009564:	68a3      	ldr	r3, [r4, #8]
 8009566:	bf0c      	ite	eq
 8009568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800956c:	2500      	movne	r5, #0
 800956e:	4293      	cmp	r3, r2
 8009570:	bfc4      	itt	gt
 8009572:	1a9b      	subgt	r3, r3, r2
 8009574:	18ed      	addgt	r5, r5, r3
 8009576:	2600      	movs	r6, #0
 8009578:	341a      	adds	r4, #26
 800957a:	42b5      	cmp	r5, r6
 800957c:	d11a      	bne.n	80095b4 <_printf_common+0xc8>
 800957e:	2000      	movs	r0, #0
 8009580:	e008      	b.n	8009594 <_printf_common+0xa8>
 8009582:	2301      	movs	r3, #1
 8009584:	4652      	mov	r2, sl
 8009586:	4649      	mov	r1, r9
 8009588:	4638      	mov	r0, r7
 800958a:	47c0      	blx	r8
 800958c:	3001      	adds	r0, #1
 800958e:	d103      	bne.n	8009598 <_printf_common+0xac>
 8009590:	f04f 30ff 	mov.w	r0, #4294967295
 8009594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009598:	3501      	adds	r5, #1
 800959a:	e7c6      	b.n	800952a <_printf_common+0x3e>
 800959c:	18e1      	adds	r1, r4, r3
 800959e:	1c5a      	adds	r2, r3, #1
 80095a0:	2030      	movs	r0, #48	; 0x30
 80095a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095a6:	4422      	add	r2, r4
 80095a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095b0:	3302      	adds	r3, #2
 80095b2:	e7c7      	b.n	8009544 <_printf_common+0x58>
 80095b4:	2301      	movs	r3, #1
 80095b6:	4622      	mov	r2, r4
 80095b8:	4649      	mov	r1, r9
 80095ba:	4638      	mov	r0, r7
 80095bc:	47c0      	blx	r8
 80095be:	3001      	adds	r0, #1
 80095c0:	d0e6      	beq.n	8009590 <_printf_common+0xa4>
 80095c2:	3601      	adds	r6, #1
 80095c4:	e7d9      	b.n	800957a <_printf_common+0x8e>
	...

080095c8 <_printf_i>:
 80095c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095cc:	7e0f      	ldrb	r7, [r1, #24]
 80095ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095d0:	2f78      	cmp	r7, #120	; 0x78
 80095d2:	4691      	mov	r9, r2
 80095d4:	4680      	mov	r8, r0
 80095d6:	460c      	mov	r4, r1
 80095d8:	469a      	mov	sl, r3
 80095da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095de:	d807      	bhi.n	80095f0 <_printf_i+0x28>
 80095e0:	2f62      	cmp	r7, #98	; 0x62
 80095e2:	d80a      	bhi.n	80095fa <_printf_i+0x32>
 80095e4:	2f00      	cmp	r7, #0
 80095e6:	f000 80d4 	beq.w	8009792 <_printf_i+0x1ca>
 80095ea:	2f58      	cmp	r7, #88	; 0x58
 80095ec:	f000 80c0 	beq.w	8009770 <_printf_i+0x1a8>
 80095f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095f8:	e03a      	b.n	8009670 <_printf_i+0xa8>
 80095fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095fe:	2b15      	cmp	r3, #21
 8009600:	d8f6      	bhi.n	80095f0 <_printf_i+0x28>
 8009602:	a101      	add	r1, pc, #4	; (adr r1, 8009608 <_printf_i+0x40>)
 8009604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009608:	08009661 	.word	0x08009661
 800960c:	08009675 	.word	0x08009675
 8009610:	080095f1 	.word	0x080095f1
 8009614:	080095f1 	.word	0x080095f1
 8009618:	080095f1 	.word	0x080095f1
 800961c:	080095f1 	.word	0x080095f1
 8009620:	08009675 	.word	0x08009675
 8009624:	080095f1 	.word	0x080095f1
 8009628:	080095f1 	.word	0x080095f1
 800962c:	080095f1 	.word	0x080095f1
 8009630:	080095f1 	.word	0x080095f1
 8009634:	08009779 	.word	0x08009779
 8009638:	080096a1 	.word	0x080096a1
 800963c:	08009733 	.word	0x08009733
 8009640:	080095f1 	.word	0x080095f1
 8009644:	080095f1 	.word	0x080095f1
 8009648:	0800979b 	.word	0x0800979b
 800964c:	080095f1 	.word	0x080095f1
 8009650:	080096a1 	.word	0x080096a1
 8009654:	080095f1 	.word	0x080095f1
 8009658:	080095f1 	.word	0x080095f1
 800965c:	0800973b 	.word	0x0800973b
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	1d1a      	adds	r2, r3, #4
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	602a      	str	r2, [r5, #0]
 8009668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800966c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009670:	2301      	movs	r3, #1
 8009672:	e09f      	b.n	80097b4 <_printf_i+0x1ec>
 8009674:	6820      	ldr	r0, [r4, #0]
 8009676:	682b      	ldr	r3, [r5, #0]
 8009678:	0607      	lsls	r7, r0, #24
 800967a:	f103 0104 	add.w	r1, r3, #4
 800967e:	6029      	str	r1, [r5, #0]
 8009680:	d501      	bpl.n	8009686 <_printf_i+0xbe>
 8009682:	681e      	ldr	r6, [r3, #0]
 8009684:	e003      	b.n	800968e <_printf_i+0xc6>
 8009686:	0646      	lsls	r6, r0, #25
 8009688:	d5fb      	bpl.n	8009682 <_printf_i+0xba>
 800968a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800968e:	2e00      	cmp	r6, #0
 8009690:	da03      	bge.n	800969a <_printf_i+0xd2>
 8009692:	232d      	movs	r3, #45	; 0x2d
 8009694:	4276      	negs	r6, r6
 8009696:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800969a:	485a      	ldr	r0, [pc, #360]	; (8009804 <_printf_i+0x23c>)
 800969c:	230a      	movs	r3, #10
 800969e:	e012      	b.n	80096c6 <_printf_i+0xfe>
 80096a0:	682b      	ldr	r3, [r5, #0]
 80096a2:	6820      	ldr	r0, [r4, #0]
 80096a4:	1d19      	adds	r1, r3, #4
 80096a6:	6029      	str	r1, [r5, #0]
 80096a8:	0605      	lsls	r5, r0, #24
 80096aa:	d501      	bpl.n	80096b0 <_printf_i+0xe8>
 80096ac:	681e      	ldr	r6, [r3, #0]
 80096ae:	e002      	b.n	80096b6 <_printf_i+0xee>
 80096b0:	0641      	lsls	r1, r0, #25
 80096b2:	d5fb      	bpl.n	80096ac <_printf_i+0xe4>
 80096b4:	881e      	ldrh	r6, [r3, #0]
 80096b6:	4853      	ldr	r0, [pc, #332]	; (8009804 <_printf_i+0x23c>)
 80096b8:	2f6f      	cmp	r7, #111	; 0x6f
 80096ba:	bf0c      	ite	eq
 80096bc:	2308      	moveq	r3, #8
 80096be:	230a      	movne	r3, #10
 80096c0:	2100      	movs	r1, #0
 80096c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096c6:	6865      	ldr	r5, [r4, #4]
 80096c8:	60a5      	str	r5, [r4, #8]
 80096ca:	2d00      	cmp	r5, #0
 80096cc:	bfa2      	ittt	ge
 80096ce:	6821      	ldrge	r1, [r4, #0]
 80096d0:	f021 0104 	bicge.w	r1, r1, #4
 80096d4:	6021      	strge	r1, [r4, #0]
 80096d6:	b90e      	cbnz	r6, 80096dc <_printf_i+0x114>
 80096d8:	2d00      	cmp	r5, #0
 80096da:	d04b      	beq.n	8009774 <_printf_i+0x1ac>
 80096dc:	4615      	mov	r5, r2
 80096de:	fbb6 f1f3 	udiv	r1, r6, r3
 80096e2:	fb03 6711 	mls	r7, r3, r1, r6
 80096e6:	5dc7      	ldrb	r7, [r0, r7]
 80096e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096ec:	4637      	mov	r7, r6
 80096ee:	42bb      	cmp	r3, r7
 80096f0:	460e      	mov	r6, r1
 80096f2:	d9f4      	bls.n	80096de <_printf_i+0x116>
 80096f4:	2b08      	cmp	r3, #8
 80096f6:	d10b      	bne.n	8009710 <_printf_i+0x148>
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	07de      	lsls	r6, r3, #31
 80096fc:	d508      	bpl.n	8009710 <_printf_i+0x148>
 80096fe:	6923      	ldr	r3, [r4, #16]
 8009700:	6861      	ldr	r1, [r4, #4]
 8009702:	4299      	cmp	r1, r3
 8009704:	bfde      	ittt	le
 8009706:	2330      	movle	r3, #48	; 0x30
 8009708:	f805 3c01 	strble.w	r3, [r5, #-1]
 800970c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009710:	1b52      	subs	r2, r2, r5
 8009712:	6122      	str	r2, [r4, #16]
 8009714:	f8cd a000 	str.w	sl, [sp]
 8009718:	464b      	mov	r3, r9
 800971a:	aa03      	add	r2, sp, #12
 800971c:	4621      	mov	r1, r4
 800971e:	4640      	mov	r0, r8
 8009720:	f7ff fee4 	bl	80094ec <_printf_common>
 8009724:	3001      	adds	r0, #1
 8009726:	d14a      	bne.n	80097be <_printf_i+0x1f6>
 8009728:	f04f 30ff 	mov.w	r0, #4294967295
 800972c:	b004      	add	sp, #16
 800972e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009732:	6823      	ldr	r3, [r4, #0]
 8009734:	f043 0320 	orr.w	r3, r3, #32
 8009738:	6023      	str	r3, [r4, #0]
 800973a:	4833      	ldr	r0, [pc, #204]	; (8009808 <_printf_i+0x240>)
 800973c:	2778      	movs	r7, #120	; 0x78
 800973e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	6829      	ldr	r1, [r5, #0]
 8009746:	061f      	lsls	r7, r3, #24
 8009748:	f851 6b04 	ldr.w	r6, [r1], #4
 800974c:	d402      	bmi.n	8009754 <_printf_i+0x18c>
 800974e:	065f      	lsls	r7, r3, #25
 8009750:	bf48      	it	mi
 8009752:	b2b6      	uxthmi	r6, r6
 8009754:	07df      	lsls	r7, r3, #31
 8009756:	bf48      	it	mi
 8009758:	f043 0320 	orrmi.w	r3, r3, #32
 800975c:	6029      	str	r1, [r5, #0]
 800975e:	bf48      	it	mi
 8009760:	6023      	strmi	r3, [r4, #0]
 8009762:	b91e      	cbnz	r6, 800976c <_printf_i+0x1a4>
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	f023 0320 	bic.w	r3, r3, #32
 800976a:	6023      	str	r3, [r4, #0]
 800976c:	2310      	movs	r3, #16
 800976e:	e7a7      	b.n	80096c0 <_printf_i+0xf8>
 8009770:	4824      	ldr	r0, [pc, #144]	; (8009804 <_printf_i+0x23c>)
 8009772:	e7e4      	b.n	800973e <_printf_i+0x176>
 8009774:	4615      	mov	r5, r2
 8009776:	e7bd      	b.n	80096f4 <_printf_i+0x12c>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	6826      	ldr	r6, [r4, #0]
 800977c:	6961      	ldr	r1, [r4, #20]
 800977e:	1d18      	adds	r0, r3, #4
 8009780:	6028      	str	r0, [r5, #0]
 8009782:	0635      	lsls	r5, r6, #24
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	d501      	bpl.n	800978c <_printf_i+0x1c4>
 8009788:	6019      	str	r1, [r3, #0]
 800978a:	e002      	b.n	8009792 <_printf_i+0x1ca>
 800978c:	0670      	lsls	r0, r6, #25
 800978e:	d5fb      	bpl.n	8009788 <_printf_i+0x1c0>
 8009790:	8019      	strh	r1, [r3, #0]
 8009792:	2300      	movs	r3, #0
 8009794:	6123      	str	r3, [r4, #16]
 8009796:	4615      	mov	r5, r2
 8009798:	e7bc      	b.n	8009714 <_printf_i+0x14c>
 800979a:	682b      	ldr	r3, [r5, #0]
 800979c:	1d1a      	adds	r2, r3, #4
 800979e:	602a      	str	r2, [r5, #0]
 80097a0:	681d      	ldr	r5, [r3, #0]
 80097a2:	6862      	ldr	r2, [r4, #4]
 80097a4:	2100      	movs	r1, #0
 80097a6:	4628      	mov	r0, r5
 80097a8:	f7f6 fd1a 	bl	80001e0 <memchr>
 80097ac:	b108      	cbz	r0, 80097b2 <_printf_i+0x1ea>
 80097ae:	1b40      	subs	r0, r0, r5
 80097b0:	6060      	str	r0, [r4, #4]
 80097b2:	6863      	ldr	r3, [r4, #4]
 80097b4:	6123      	str	r3, [r4, #16]
 80097b6:	2300      	movs	r3, #0
 80097b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097bc:	e7aa      	b.n	8009714 <_printf_i+0x14c>
 80097be:	6923      	ldr	r3, [r4, #16]
 80097c0:	462a      	mov	r2, r5
 80097c2:	4649      	mov	r1, r9
 80097c4:	4640      	mov	r0, r8
 80097c6:	47d0      	blx	sl
 80097c8:	3001      	adds	r0, #1
 80097ca:	d0ad      	beq.n	8009728 <_printf_i+0x160>
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	079b      	lsls	r3, r3, #30
 80097d0:	d413      	bmi.n	80097fa <_printf_i+0x232>
 80097d2:	68e0      	ldr	r0, [r4, #12]
 80097d4:	9b03      	ldr	r3, [sp, #12]
 80097d6:	4298      	cmp	r0, r3
 80097d8:	bfb8      	it	lt
 80097da:	4618      	movlt	r0, r3
 80097dc:	e7a6      	b.n	800972c <_printf_i+0x164>
 80097de:	2301      	movs	r3, #1
 80097e0:	4632      	mov	r2, r6
 80097e2:	4649      	mov	r1, r9
 80097e4:	4640      	mov	r0, r8
 80097e6:	47d0      	blx	sl
 80097e8:	3001      	adds	r0, #1
 80097ea:	d09d      	beq.n	8009728 <_printf_i+0x160>
 80097ec:	3501      	adds	r5, #1
 80097ee:	68e3      	ldr	r3, [r4, #12]
 80097f0:	9903      	ldr	r1, [sp, #12]
 80097f2:	1a5b      	subs	r3, r3, r1
 80097f4:	42ab      	cmp	r3, r5
 80097f6:	dcf2      	bgt.n	80097de <_printf_i+0x216>
 80097f8:	e7eb      	b.n	80097d2 <_printf_i+0x20a>
 80097fa:	2500      	movs	r5, #0
 80097fc:	f104 0619 	add.w	r6, r4, #25
 8009800:	e7f5      	b.n	80097ee <_printf_i+0x226>
 8009802:	bf00      	nop
 8009804:	08009fe1 	.word	0x08009fe1
 8009808:	08009ff2 	.word	0x08009ff2

0800980c <__sflush_r>:
 800980c:	898a      	ldrh	r2, [r1, #12]
 800980e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009812:	4605      	mov	r5, r0
 8009814:	0710      	lsls	r0, r2, #28
 8009816:	460c      	mov	r4, r1
 8009818:	d458      	bmi.n	80098cc <__sflush_r+0xc0>
 800981a:	684b      	ldr	r3, [r1, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	dc05      	bgt.n	800982c <__sflush_r+0x20>
 8009820:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009822:	2b00      	cmp	r3, #0
 8009824:	dc02      	bgt.n	800982c <__sflush_r+0x20>
 8009826:	2000      	movs	r0, #0
 8009828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800982c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800982e:	2e00      	cmp	r6, #0
 8009830:	d0f9      	beq.n	8009826 <__sflush_r+0x1a>
 8009832:	2300      	movs	r3, #0
 8009834:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009838:	682f      	ldr	r7, [r5, #0]
 800983a:	6a21      	ldr	r1, [r4, #32]
 800983c:	602b      	str	r3, [r5, #0]
 800983e:	d032      	beq.n	80098a6 <__sflush_r+0x9a>
 8009840:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	075a      	lsls	r2, r3, #29
 8009846:	d505      	bpl.n	8009854 <__sflush_r+0x48>
 8009848:	6863      	ldr	r3, [r4, #4]
 800984a:	1ac0      	subs	r0, r0, r3
 800984c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800984e:	b10b      	cbz	r3, 8009854 <__sflush_r+0x48>
 8009850:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009852:	1ac0      	subs	r0, r0, r3
 8009854:	2300      	movs	r3, #0
 8009856:	4602      	mov	r2, r0
 8009858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800985a:	6a21      	ldr	r1, [r4, #32]
 800985c:	4628      	mov	r0, r5
 800985e:	47b0      	blx	r6
 8009860:	1c43      	adds	r3, r0, #1
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	d106      	bne.n	8009874 <__sflush_r+0x68>
 8009866:	6829      	ldr	r1, [r5, #0]
 8009868:	291d      	cmp	r1, #29
 800986a:	d82b      	bhi.n	80098c4 <__sflush_r+0xb8>
 800986c:	4a29      	ldr	r2, [pc, #164]	; (8009914 <__sflush_r+0x108>)
 800986e:	410a      	asrs	r2, r1
 8009870:	07d6      	lsls	r6, r2, #31
 8009872:	d427      	bmi.n	80098c4 <__sflush_r+0xb8>
 8009874:	2200      	movs	r2, #0
 8009876:	6062      	str	r2, [r4, #4]
 8009878:	04d9      	lsls	r1, r3, #19
 800987a:	6922      	ldr	r2, [r4, #16]
 800987c:	6022      	str	r2, [r4, #0]
 800987e:	d504      	bpl.n	800988a <__sflush_r+0x7e>
 8009880:	1c42      	adds	r2, r0, #1
 8009882:	d101      	bne.n	8009888 <__sflush_r+0x7c>
 8009884:	682b      	ldr	r3, [r5, #0]
 8009886:	b903      	cbnz	r3, 800988a <__sflush_r+0x7e>
 8009888:	6560      	str	r0, [r4, #84]	; 0x54
 800988a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800988c:	602f      	str	r7, [r5, #0]
 800988e:	2900      	cmp	r1, #0
 8009890:	d0c9      	beq.n	8009826 <__sflush_r+0x1a>
 8009892:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009896:	4299      	cmp	r1, r3
 8009898:	d002      	beq.n	80098a0 <__sflush_r+0x94>
 800989a:	4628      	mov	r0, r5
 800989c:	f7ff fa8a 	bl	8008db4 <_free_r>
 80098a0:	2000      	movs	r0, #0
 80098a2:	6360      	str	r0, [r4, #52]	; 0x34
 80098a4:	e7c0      	b.n	8009828 <__sflush_r+0x1c>
 80098a6:	2301      	movs	r3, #1
 80098a8:	4628      	mov	r0, r5
 80098aa:	47b0      	blx	r6
 80098ac:	1c41      	adds	r1, r0, #1
 80098ae:	d1c8      	bne.n	8009842 <__sflush_r+0x36>
 80098b0:	682b      	ldr	r3, [r5, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0c5      	beq.n	8009842 <__sflush_r+0x36>
 80098b6:	2b1d      	cmp	r3, #29
 80098b8:	d001      	beq.n	80098be <__sflush_r+0xb2>
 80098ba:	2b16      	cmp	r3, #22
 80098bc:	d101      	bne.n	80098c2 <__sflush_r+0xb6>
 80098be:	602f      	str	r7, [r5, #0]
 80098c0:	e7b1      	b.n	8009826 <__sflush_r+0x1a>
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098c8:	81a3      	strh	r3, [r4, #12]
 80098ca:	e7ad      	b.n	8009828 <__sflush_r+0x1c>
 80098cc:	690f      	ldr	r7, [r1, #16]
 80098ce:	2f00      	cmp	r7, #0
 80098d0:	d0a9      	beq.n	8009826 <__sflush_r+0x1a>
 80098d2:	0793      	lsls	r3, r2, #30
 80098d4:	680e      	ldr	r6, [r1, #0]
 80098d6:	bf08      	it	eq
 80098d8:	694b      	ldreq	r3, [r1, #20]
 80098da:	600f      	str	r7, [r1, #0]
 80098dc:	bf18      	it	ne
 80098de:	2300      	movne	r3, #0
 80098e0:	eba6 0807 	sub.w	r8, r6, r7
 80098e4:	608b      	str	r3, [r1, #8]
 80098e6:	f1b8 0f00 	cmp.w	r8, #0
 80098ea:	dd9c      	ble.n	8009826 <__sflush_r+0x1a>
 80098ec:	6a21      	ldr	r1, [r4, #32]
 80098ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098f0:	4643      	mov	r3, r8
 80098f2:	463a      	mov	r2, r7
 80098f4:	4628      	mov	r0, r5
 80098f6:	47b0      	blx	r6
 80098f8:	2800      	cmp	r0, #0
 80098fa:	dc06      	bgt.n	800990a <__sflush_r+0xfe>
 80098fc:	89a3      	ldrh	r3, [r4, #12]
 80098fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009902:	81a3      	strh	r3, [r4, #12]
 8009904:	f04f 30ff 	mov.w	r0, #4294967295
 8009908:	e78e      	b.n	8009828 <__sflush_r+0x1c>
 800990a:	4407      	add	r7, r0
 800990c:	eba8 0800 	sub.w	r8, r8, r0
 8009910:	e7e9      	b.n	80098e6 <__sflush_r+0xda>
 8009912:	bf00      	nop
 8009914:	dfbffffe 	.word	0xdfbffffe

08009918 <_fflush_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	690b      	ldr	r3, [r1, #16]
 800991c:	4605      	mov	r5, r0
 800991e:	460c      	mov	r4, r1
 8009920:	b913      	cbnz	r3, 8009928 <_fflush_r+0x10>
 8009922:	2500      	movs	r5, #0
 8009924:	4628      	mov	r0, r5
 8009926:	bd38      	pop	{r3, r4, r5, pc}
 8009928:	b118      	cbz	r0, 8009932 <_fflush_r+0x1a>
 800992a:	6a03      	ldr	r3, [r0, #32]
 800992c:	b90b      	cbnz	r3, 8009932 <_fflush_r+0x1a>
 800992e:	f7fe ff65 	bl	80087fc <__sinit>
 8009932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d0f3      	beq.n	8009922 <_fflush_r+0xa>
 800993a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800993c:	07d0      	lsls	r0, r2, #31
 800993e:	d404      	bmi.n	800994a <_fflush_r+0x32>
 8009940:	0599      	lsls	r1, r3, #22
 8009942:	d402      	bmi.n	800994a <_fflush_r+0x32>
 8009944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009946:	f7ff fa24 	bl	8008d92 <__retarget_lock_acquire_recursive>
 800994a:	4628      	mov	r0, r5
 800994c:	4621      	mov	r1, r4
 800994e:	f7ff ff5d 	bl	800980c <__sflush_r>
 8009952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009954:	07da      	lsls	r2, r3, #31
 8009956:	4605      	mov	r5, r0
 8009958:	d4e4      	bmi.n	8009924 <_fflush_r+0xc>
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	059b      	lsls	r3, r3, #22
 800995e:	d4e1      	bmi.n	8009924 <_fflush_r+0xc>
 8009960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009962:	f7ff fa17 	bl	8008d94 <__retarget_lock_release_recursive>
 8009966:	e7dd      	b.n	8009924 <_fflush_r+0xc>

08009968 <__swhatbuf_r>:
 8009968:	b570      	push	{r4, r5, r6, lr}
 800996a:	460c      	mov	r4, r1
 800996c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009970:	2900      	cmp	r1, #0
 8009972:	b096      	sub	sp, #88	; 0x58
 8009974:	4615      	mov	r5, r2
 8009976:	461e      	mov	r6, r3
 8009978:	da0d      	bge.n	8009996 <__swhatbuf_r+0x2e>
 800997a:	89a3      	ldrh	r3, [r4, #12]
 800997c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009980:	f04f 0100 	mov.w	r1, #0
 8009984:	bf0c      	ite	eq
 8009986:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800998a:	2340      	movne	r3, #64	; 0x40
 800998c:	2000      	movs	r0, #0
 800998e:	6031      	str	r1, [r6, #0]
 8009990:	602b      	str	r3, [r5, #0]
 8009992:	b016      	add	sp, #88	; 0x58
 8009994:	bd70      	pop	{r4, r5, r6, pc}
 8009996:	466a      	mov	r2, sp
 8009998:	f000 f862 	bl	8009a60 <_fstat_r>
 800999c:	2800      	cmp	r0, #0
 800999e:	dbec      	blt.n	800997a <__swhatbuf_r+0x12>
 80099a0:	9901      	ldr	r1, [sp, #4]
 80099a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80099a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80099aa:	4259      	negs	r1, r3
 80099ac:	4159      	adcs	r1, r3
 80099ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099b2:	e7eb      	b.n	800998c <__swhatbuf_r+0x24>

080099b4 <__smakebuf_r>:
 80099b4:	898b      	ldrh	r3, [r1, #12]
 80099b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099b8:	079d      	lsls	r5, r3, #30
 80099ba:	4606      	mov	r6, r0
 80099bc:	460c      	mov	r4, r1
 80099be:	d507      	bpl.n	80099d0 <__smakebuf_r+0x1c>
 80099c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	6123      	str	r3, [r4, #16]
 80099c8:	2301      	movs	r3, #1
 80099ca:	6163      	str	r3, [r4, #20]
 80099cc:	b002      	add	sp, #8
 80099ce:	bd70      	pop	{r4, r5, r6, pc}
 80099d0:	ab01      	add	r3, sp, #4
 80099d2:	466a      	mov	r2, sp
 80099d4:	f7ff ffc8 	bl	8009968 <__swhatbuf_r>
 80099d8:	9900      	ldr	r1, [sp, #0]
 80099da:	4605      	mov	r5, r0
 80099dc:	4630      	mov	r0, r6
 80099de:	f7ff fa5d 	bl	8008e9c <_malloc_r>
 80099e2:	b948      	cbnz	r0, 80099f8 <__smakebuf_r+0x44>
 80099e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099e8:	059a      	lsls	r2, r3, #22
 80099ea:	d4ef      	bmi.n	80099cc <__smakebuf_r+0x18>
 80099ec:	f023 0303 	bic.w	r3, r3, #3
 80099f0:	f043 0302 	orr.w	r3, r3, #2
 80099f4:	81a3      	strh	r3, [r4, #12]
 80099f6:	e7e3      	b.n	80099c0 <__smakebuf_r+0xc>
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	6020      	str	r0, [r4, #0]
 80099fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a00:	81a3      	strh	r3, [r4, #12]
 8009a02:	9b00      	ldr	r3, [sp, #0]
 8009a04:	6163      	str	r3, [r4, #20]
 8009a06:	9b01      	ldr	r3, [sp, #4]
 8009a08:	6120      	str	r0, [r4, #16]
 8009a0a:	b15b      	cbz	r3, 8009a24 <__smakebuf_r+0x70>
 8009a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a10:	4630      	mov	r0, r6
 8009a12:	f000 f837 	bl	8009a84 <_isatty_r>
 8009a16:	b128      	cbz	r0, 8009a24 <__smakebuf_r+0x70>
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	f023 0303 	bic.w	r3, r3, #3
 8009a1e:	f043 0301 	orr.w	r3, r3, #1
 8009a22:	81a3      	strh	r3, [r4, #12]
 8009a24:	89a3      	ldrh	r3, [r4, #12]
 8009a26:	431d      	orrs	r5, r3
 8009a28:	81a5      	strh	r5, [r4, #12]
 8009a2a:	e7cf      	b.n	80099cc <__smakebuf_r+0x18>

08009a2c <memmove>:
 8009a2c:	4288      	cmp	r0, r1
 8009a2e:	b510      	push	{r4, lr}
 8009a30:	eb01 0402 	add.w	r4, r1, r2
 8009a34:	d902      	bls.n	8009a3c <memmove+0x10>
 8009a36:	4284      	cmp	r4, r0
 8009a38:	4623      	mov	r3, r4
 8009a3a:	d807      	bhi.n	8009a4c <memmove+0x20>
 8009a3c:	1e43      	subs	r3, r0, #1
 8009a3e:	42a1      	cmp	r1, r4
 8009a40:	d008      	beq.n	8009a54 <memmove+0x28>
 8009a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a4a:	e7f8      	b.n	8009a3e <memmove+0x12>
 8009a4c:	4402      	add	r2, r0
 8009a4e:	4601      	mov	r1, r0
 8009a50:	428a      	cmp	r2, r1
 8009a52:	d100      	bne.n	8009a56 <memmove+0x2a>
 8009a54:	bd10      	pop	{r4, pc}
 8009a56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a5e:	e7f7      	b.n	8009a50 <memmove+0x24>

08009a60 <_fstat_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4d07      	ldr	r5, [pc, #28]	; (8009a80 <_fstat_r+0x20>)
 8009a64:	2300      	movs	r3, #0
 8009a66:	4604      	mov	r4, r0
 8009a68:	4608      	mov	r0, r1
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	602b      	str	r3, [r5, #0]
 8009a6e:	f7fa ffff 	bl	8004a70 <_fstat>
 8009a72:	1c43      	adds	r3, r0, #1
 8009a74:	d102      	bne.n	8009a7c <_fstat_r+0x1c>
 8009a76:	682b      	ldr	r3, [r5, #0]
 8009a78:	b103      	cbz	r3, 8009a7c <_fstat_r+0x1c>
 8009a7a:	6023      	str	r3, [r4, #0]
 8009a7c:	bd38      	pop	{r3, r4, r5, pc}
 8009a7e:	bf00      	nop
 8009a80:	20004378 	.word	0x20004378

08009a84 <_isatty_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4d06      	ldr	r5, [pc, #24]	; (8009aa0 <_isatty_r+0x1c>)
 8009a88:	2300      	movs	r3, #0
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	4608      	mov	r0, r1
 8009a8e:	602b      	str	r3, [r5, #0]
 8009a90:	f7fa fffe 	bl	8004a90 <_isatty>
 8009a94:	1c43      	adds	r3, r0, #1
 8009a96:	d102      	bne.n	8009a9e <_isatty_r+0x1a>
 8009a98:	682b      	ldr	r3, [r5, #0]
 8009a9a:	b103      	cbz	r3, 8009a9e <_isatty_r+0x1a>
 8009a9c:	6023      	str	r3, [r4, #0]
 8009a9e:	bd38      	pop	{r3, r4, r5, pc}
 8009aa0:	20004378 	.word	0x20004378

08009aa4 <_sbrk_r>:
 8009aa4:	b538      	push	{r3, r4, r5, lr}
 8009aa6:	4d06      	ldr	r5, [pc, #24]	; (8009ac0 <_sbrk_r+0x1c>)
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	4604      	mov	r4, r0
 8009aac:	4608      	mov	r0, r1
 8009aae:	602b      	str	r3, [r5, #0]
 8009ab0:	f7fb f806 	bl	8004ac0 <_sbrk>
 8009ab4:	1c43      	adds	r3, r0, #1
 8009ab6:	d102      	bne.n	8009abe <_sbrk_r+0x1a>
 8009ab8:	682b      	ldr	r3, [r5, #0]
 8009aba:	b103      	cbz	r3, 8009abe <_sbrk_r+0x1a>
 8009abc:	6023      	str	r3, [r4, #0]
 8009abe:	bd38      	pop	{r3, r4, r5, pc}
 8009ac0:	20004378 	.word	0x20004378

08009ac4 <_realloc_r>:
 8009ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac8:	4680      	mov	r8, r0
 8009aca:	4614      	mov	r4, r2
 8009acc:	460e      	mov	r6, r1
 8009ace:	b921      	cbnz	r1, 8009ada <_realloc_r+0x16>
 8009ad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	f7ff b9e1 	b.w	8008e9c <_malloc_r>
 8009ada:	b92a      	cbnz	r2, 8009ae8 <_realloc_r+0x24>
 8009adc:	f7ff f96a 	bl	8008db4 <_free_r>
 8009ae0:	4625      	mov	r5, r4
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae8:	f000 f81b 	bl	8009b22 <_malloc_usable_size_r>
 8009aec:	4284      	cmp	r4, r0
 8009aee:	4607      	mov	r7, r0
 8009af0:	d802      	bhi.n	8009af8 <_realloc_r+0x34>
 8009af2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009af6:	d812      	bhi.n	8009b1e <_realloc_r+0x5a>
 8009af8:	4621      	mov	r1, r4
 8009afa:	4640      	mov	r0, r8
 8009afc:	f7ff f9ce 	bl	8008e9c <_malloc_r>
 8009b00:	4605      	mov	r5, r0
 8009b02:	2800      	cmp	r0, #0
 8009b04:	d0ed      	beq.n	8009ae2 <_realloc_r+0x1e>
 8009b06:	42bc      	cmp	r4, r7
 8009b08:	4622      	mov	r2, r4
 8009b0a:	4631      	mov	r1, r6
 8009b0c:	bf28      	it	cs
 8009b0e:	463a      	movcs	r2, r7
 8009b10:	f7ff f941 	bl	8008d96 <memcpy>
 8009b14:	4631      	mov	r1, r6
 8009b16:	4640      	mov	r0, r8
 8009b18:	f7ff f94c 	bl	8008db4 <_free_r>
 8009b1c:	e7e1      	b.n	8009ae2 <_realloc_r+0x1e>
 8009b1e:	4635      	mov	r5, r6
 8009b20:	e7df      	b.n	8009ae2 <_realloc_r+0x1e>

08009b22 <_malloc_usable_size_r>:
 8009b22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b26:	1f18      	subs	r0, r3, #4
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	bfbc      	itt	lt
 8009b2c:	580b      	ldrlt	r3, [r1, r0]
 8009b2e:	18c0      	addlt	r0, r0, r3
 8009b30:	4770      	bx	lr
	...

08009b34 <_init>:
 8009b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b36:	bf00      	nop
 8009b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b3a:	bc08      	pop	{r3}
 8009b3c:	469e      	mov	lr, r3
 8009b3e:	4770      	bx	lr

08009b40 <_fini>:
 8009b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b42:	bf00      	nop
 8009b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b46:	bc08      	pop	{r3}
 8009b48:	469e      	mov	lr, r3
 8009b4a:	4770      	bx	lr
