
SOFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08008fc4  08008fc4  00018fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009210  08009210  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08009210  08009210  00019210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009218  08009218  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009218  08009218  00019218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800921c  0800921c  0001921c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08009220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00004288  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000431c  2000431c  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018900  00000000  00000000  00020107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f9c  00000000  00000000  00038a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001780  00000000  00000000  0003c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000123f  00000000  00000000  0003e128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025ce7  00000000  00000000  0003f367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bb66  00000000  00000000  0006504e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6c16  00000000  00000000  00080bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000684c  00000000  00000000  001677cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0016e018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008fac 	.word	0x08008fac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08008fac 	.word	0x08008fac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <HAL_Init+0x40>)
 8000d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_Init+0x40>)
 8000d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <HAL_Init+0x40>)
 8000d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 fd0d 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	200f      	movs	r0, #15
 8000d88:	f000 f808 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8c:	f006 f914 	bl	8006fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023c00 	.word	0x40023c00

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_InitTick+0x54>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_InitTick+0x58>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fd17 	bl	80017ee <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00e      	b.n	8000de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d80a      	bhi.n	8000de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f000 fced 	bl	80017b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ddc:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <HAL_InitTick+0x5c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000010 	.word	0x20000010
 8000df4:	20000004 	.word	0x20000004
 8000df8:	20000000 	.word	0x20000000

08000dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000004 	.word	0x20000004
 8000e20:	200000b0 	.word	0x200000b0

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	200000b0 	.word	0x200000b0

08000e3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e033      	b.n	8000eba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d109      	bne.n	8000e6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f005 fc00 	bl	8006660 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f003 0310 	and.w	r3, r3, #16
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d118      	bne.n	8000eac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e82:	f023 0302 	bic.w	r3, r3, #2
 8000e86:	f043 0202 	orr.w	r2, r3, #2
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f000 fad8 	bl	8001444 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f023 0303 	bic.w	r3, r3, #3
 8000ea2:	f043 0201 	orr.w	r2, r3, #1
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	641a      	str	r2, [r3, #64]	; 0x40
 8000eaa:	e001      	b.n	8000eb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d101      	bne.n	8000ede <HAL_ADC_Start+0x1a>
 8000eda:	2302      	movs	r3, #2
 8000edc:	e0b2      	b.n	8001044 <HAL_ADC_Start+0x180>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d018      	beq.n	8000f26 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0201 	orr.w	r2, r2, #1
 8000f02:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f04:	4b52      	ldr	r3, [pc, #328]	; (8001050 <HAL_ADC_Start+0x18c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a52      	ldr	r2, [pc, #328]	; (8001054 <HAL_ADC_Start+0x190>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	0c9a      	lsrs	r2, r3, #18
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f18:	e002      	b.n	8000f20 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f9      	bne.n	8000f1a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d17a      	bne.n	800102a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f3c:	f023 0301 	bic.w	r3, r3, #1
 8000f40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f72:	d106      	bne.n	8000f82 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f78:	f023 0206 	bic.w	r2, r3, #6
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	645a      	str	r2, [r3, #68]	; 0x44
 8000f80:	e002      	b.n	8000f88 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f90:	4b31      	ldr	r3, [pc, #196]	; (8001058 <HAL_ADC_Start+0x194>)
 8000f92:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f9c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 031f 	and.w	r3, r3, #31
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d12a      	bne.n	8001000 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a2b      	ldr	r2, [pc, #172]	; (800105c <HAL_ADC_Start+0x198>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d015      	beq.n	8000fe0 <HAL_ADC_Start+0x11c>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a29      	ldr	r2, [pc, #164]	; (8001060 <HAL_ADC_Start+0x19c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d105      	bne.n	8000fca <HAL_ADC_Start+0x106>
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <HAL_ADC_Start+0x194>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 031f 	and.w	r3, r3, #31
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00a      	beq.n	8000fe0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a25      	ldr	r2, [pc, #148]	; (8001064 <HAL_ADC_Start+0x1a0>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d136      	bne.n	8001042 <HAL_ADC_Start+0x17e>
 8000fd4:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_ADC_Start+0x194>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0310 	and.w	r3, r3, #16
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d130      	bne.n	8001042 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d129      	bne.n	8001042 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	e020      	b.n	8001042 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a15      	ldr	r2, [pc, #84]	; (800105c <HAL_ADC_Start+0x198>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d11b      	bne.n	8001042 <HAL_ADC_Start+0x17e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d114      	bne.n	8001042 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	e00b      	b.n	8001042 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f043 0210 	orr.w	r2, r3, #16
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f043 0201 	orr.w	r2, r3, #1
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	20000010 	.word	0x20000010
 8001054:	431bde83 	.word	0x431bde83
 8001058:	40012300 	.word	0x40012300
 800105c:	40012000 	.word	0x40012000
 8001060:	40012100 	.word	0x40012100
 8001064:	40012200 	.word	0x40012200

08001068 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_ADC_Stop+0x16>
 800107a:	2302      	movs	r3, #2
 800107c:	e021      	b.n	80010c2 <HAL_ADC_Stop+0x5a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f022 0201 	bic.w	r2, r2, #1
 8001094:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d109      	bne.n	80010b8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	f043 0201 	orr.w	r2, r3, #1
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ea:	d113      	bne.n	8001114 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010fa:	d10b      	bne.n	8001114 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f043 0220 	orr.w	r2, r3, #32
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e063      	b.n	80011dc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001114:	f7ff fe86 	bl	8000e24 <HAL_GetTick>
 8001118:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800111a:	e021      	b.n	8001160 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001122:	d01d      	beq.n	8001160 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <HAL_ADC_PollForConversion+0x6c>
 800112a:	f7ff fe7b 	bl	8000e24 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d212      	bcs.n	8001160 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b02      	cmp	r3, #2
 8001146:	d00b      	beq.n	8001160 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f043 0204 	orr.w	r2, r3, #4
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e03d      	b.n	80011dc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b02      	cmp	r3, #2
 800116c:	d1d6      	bne.n	800111c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f06f 0212 	mvn.w	r2, #18
 8001176:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d123      	bne.n	80011da <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001196:	2b00      	cmp	r3, #0
 8001198:	d11f      	bne.n	80011da <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d111      	bne.n	80011da <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d105      	bne.n	80011da <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f043 0201 	orr.w	r2, r3, #1
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_ADC_ConfigChannel+0x1c>
 8001218:	2302      	movs	r3, #2
 800121a:	e105      	b.n	8001428 <HAL_ADC_ConfigChannel+0x228>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b09      	cmp	r3, #9
 800122a:	d925      	bls.n	8001278 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68d9      	ldr	r1, [r3, #12]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	3b1e      	subs	r3, #30
 8001242:	2207      	movs	r2, #7
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43da      	mvns	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	400a      	ands	r2, r1
 8001250:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68d9      	ldr	r1, [r3, #12]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	b29b      	uxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	4603      	mov	r3, r0
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4403      	add	r3, r0
 800126a:	3b1e      	subs	r3, #30
 800126c:	409a      	lsls	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	e022      	b.n	80012be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6919      	ldr	r1, [r3, #16]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	2207      	movs	r2, #7
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	400a      	ands	r2, r1
 800129a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6919      	ldr	r1, [r3, #16]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	4603      	mov	r3, r0
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4403      	add	r3, r0
 80012b4:	409a      	lsls	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d824      	bhi.n	8001310 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	3b05      	subs	r3, #5
 80012d8:	221f      	movs	r2, #31
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	400a      	ands	r2, r1
 80012e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	3b05      	subs	r3, #5
 8001302:	fa00 f203 	lsl.w	r2, r0, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	635a      	str	r2, [r3, #52]	; 0x34
 800130e:	e04c      	b.n	80013aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b0c      	cmp	r3, #12
 8001316:	d824      	bhi.n	8001362 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	3b23      	subs	r3, #35	; 0x23
 800132a:	221f      	movs	r2, #31
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43da      	mvns	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	400a      	ands	r2, r1
 8001338:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	b29b      	uxth	r3, r3
 8001346:	4618      	mov	r0, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	3b23      	subs	r3, #35	; 0x23
 8001354:	fa00 f203 	lsl.w	r2, r0, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	631a      	str	r2, [r3, #48]	; 0x30
 8001360:	e023      	b.n	80013aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	3b41      	subs	r3, #65	; 0x41
 8001374:	221f      	movs	r2, #31
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	400a      	ands	r2, r1
 8001382:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	4618      	mov	r0, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	3b41      	subs	r3, #65	; 0x41
 800139e:	fa00 f203 	lsl.w	r2, r0, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013aa:	4b22      	ldr	r3, [pc, #136]	; (8001434 <HAL_ADC_ConfigChannel+0x234>)
 80013ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a21      	ldr	r2, [pc, #132]	; (8001438 <HAL_ADC_ConfigChannel+0x238>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d109      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1cc>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b12      	cmp	r3, #18
 80013be:	d105      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a19      	ldr	r2, [pc, #100]	; (8001438 <HAL_ADC_ConfigChannel+0x238>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d123      	bne.n	800141e <HAL_ADC_ConfigChannel+0x21e>
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b10      	cmp	r3, #16
 80013dc:	d003      	beq.n	80013e6 <HAL_ADC_ConfigChannel+0x1e6>
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b11      	cmp	r3, #17
 80013e4:	d11b      	bne.n	800141e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b10      	cmp	r3, #16
 80013f8:	d111      	bne.n	800141e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <HAL_ADC_ConfigChannel+0x23c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a10      	ldr	r2, [pc, #64]	; (8001440 <HAL_ADC_ConfigChannel+0x240>)
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
 8001404:	0c9a      	lsrs	r2, r3, #18
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001410:	e002      	b.n	8001418 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	3b01      	subs	r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f9      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	40012300 	.word	0x40012300
 8001438:	40012000 	.word	0x40012000
 800143c:	20000010 	.word	0x20000010
 8001440:	431bde83 	.word	0x431bde83

08001444 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800144c:	4b79      	ldr	r3, [pc, #484]	; (8001634 <ADC_Init+0x1f0>)
 800144e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	431a      	orrs	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001478:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6859      	ldr	r1, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	021a      	lsls	r2, r3, #8
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800149c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6899      	ldr	r1, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	4a58      	ldr	r2, [pc, #352]	; (8001638 <ADC_Init+0x1f4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d022      	beq.n	8001522 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6899      	ldr	r1, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800150c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6899      	ldr	r1, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	e00f      	b.n	8001542 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001540:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0202 	bic.w	r2, r2, #2
 8001550:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6899      	ldr	r1, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7e1b      	ldrb	r3, [r3, #24]
 800155c:	005a      	lsls	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01b      	beq.n	80015a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800157e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800158e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6859      	ldr	r1, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	3b01      	subs	r3, #1
 800159c:	035a      	lsls	r2, r3, #13
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	e007      	b.n	80015b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	051a      	lsls	r2, r3, #20
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6899      	ldr	r1, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015fa:	025a      	lsls	r2, r3, #9
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6899      	ldr	r1, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	029a      	lsls	r2, r3, #10
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	609a      	str	r2, [r3, #8]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40012300 	.word	0x40012300
 8001638:	0f000001 	.word	0x0f000001

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	; (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	; 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
         );
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800176c:	d301      	bcc.n	8001772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176e:	2301      	movs	r3, #1
 8001770:	e00f      	b.n	8001792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <SysTick_Config+0x40>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177a:	210f      	movs	r1, #15
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f7ff ff8e 	bl	80016a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <SysTick_Config+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <SysTick_Config+0x40>)
 800178c:	2207      	movs	r2, #7
 800178e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	e000e010 	.word	0xe000e010

080017a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff47 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c8:	f7ff ff5c 	bl	8001684 <__NVIC_GetPriorityGrouping>
 80017cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7ff ff8e 	bl	80016f4 <NVIC_EncodePriority>
 80017d8:	4602      	mov	r2, r0
 80017da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff5d 	bl	80016a0 <__NVIC_SetPriority>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffb0 	bl	800175c <SysTick_Config>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	; 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	e16b      	b.n	8001afc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001824:	2201      	movs	r2, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	f040 815a 	bne.w	8001af6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b01      	cmp	r3, #1
 800184c:	d005      	beq.n	800185a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001856:	2b02      	cmp	r3, #2
 8001858:	d130      	bne.n	80018bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001890:	2201      	movs	r2, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 0201 	and.w	r2, r3, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d017      	beq.n	80018f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d123      	bne.n	800194c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	08da      	lsrs	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3208      	adds	r2, #8
 800190c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	08da      	lsrs	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3208      	adds	r2, #8
 8001946:	69b9      	ldr	r1, [r7, #24]
 8001948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80b4 	beq.w	8001af6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b60      	ldr	r3, [pc, #384]	; (8001b14 <HAL_GPIO_Init+0x30c>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a5f      	ldr	r2, [pc, #380]	; (8001b14 <HAL_GPIO_Init+0x30c>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b5d      	ldr	r3, [pc, #372]	; (8001b14 <HAL_GPIO_Init+0x30c>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019aa:	4a5b      	ldr	r2, [pc, #364]	; (8001b18 <HAL_GPIO_Init+0x310>)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	220f      	movs	r2, #15
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a52      	ldr	r2, [pc, #328]	; (8001b1c <HAL_GPIO_Init+0x314>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d02b      	beq.n	8001a2e <HAL_GPIO_Init+0x226>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a51      	ldr	r2, [pc, #324]	; (8001b20 <HAL_GPIO_Init+0x318>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d025      	beq.n	8001a2a <HAL_GPIO_Init+0x222>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a50      	ldr	r2, [pc, #320]	; (8001b24 <HAL_GPIO_Init+0x31c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d01f      	beq.n	8001a26 <HAL_GPIO_Init+0x21e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4f      	ldr	r2, [pc, #316]	; (8001b28 <HAL_GPIO_Init+0x320>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d019      	beq.n	8001a22 <HAL_GPIO_Init+0x21a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4e      	ldr	r2, [pc, #312]	; (8001b2c <HAL_GPIO_Init+0x324>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d013      	beq.n	8001a1e <HAL_GPIO_Init+0x216>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4d      	ldr	r2, [pc, #308]	; (8001b30 <HAL_GPIO_Init+0x328>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00d      	beq.n	8001a1a <HAL_GPIO_Init+0x212>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4c      	ldr	r2, [pc, #304]	; (8001b34 <HAL_GPIO_Init+0x32c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d007      	beq.n	8001a16 <HAL_GPIO_Init+0x20e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4b      	ldr	r2, [pc, #300]	; (8001b38 <HAL_GPIO_Init+0x330>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <HAL_GPIO_Init+0x20a>
 8001a0e:	2307      	movs	r3, #7
 8001a10:	e00e      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a12:	2308      	movs	r3, #8
 8001a14:	e00c      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a16:	2306      	movs	r3, #6
 8001a18:	e00a      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a1a:	2305      	movs	r3, #5
 8001a1c:	e008      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a1e:	2304      	movs	r3, #4
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a22:	2303      	movs	r3, #3
 8001a24:	e004      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e002      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_GPIO_Init+0x228>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	69fa      	ldr	r2, [r7, #28]
 8001a32:	f002 0203 	and.w	r2, r2, #3
 8001a36:	0092      	lsls	r2, r2, #2
 8001a38:	4093      	lsls	r3, r2
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a40:	4935      	ldr	r1, [pc, #212]	; (8001b18 <HAL_GPIO_Init+0x310>)
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3302      	adds	r3, #2
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a4e:	4b3b      	ldr	r3, [pc, #236]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a72:	4a32      	ldr	r2, [pc, #200]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a78:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a9c:	4a27      	ldr	r2, [pc, #156]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ac6:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001af0:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3301      	adds	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	2b0f      	cmp	r3, #15
 8001b00:	f67f ae90 	bls.w	8001824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b04:	bf00      	nop
 8001b06:	bf00      	nop
 8001b08:	3724      	adds	r7, #36	; 0x24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40013800 	.word	0x40013800
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40020400 	.word	0x40020400
 8001b24:	40020800 	.word	0x40020800
 8001b28:	40020c00 	.word	0x40020c00
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40021400 	.word	0x40021400
 8001b34:	40021800 	.word	0x40021800
 8001b38:	40021c00 	.word	0x40021c00
 8001b3c:	40013c00 	.word	0x40013c00

08001b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b50:	787b      	ldrb	r3, [r7, #1]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b5c:	e003      	b.n	8001b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b5e:	887b      	ldrh	r3, [r7, #2]
 8001b60:	041a      	lsls	r2, r3, #16
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	619a      	str	r2, [r3, #24]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e267      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d075      	beq.n	8001c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b92:	4b88      	ldr	r3, [pc, #544]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d00c      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9e:	4b85      	ldr	r3, [pc, #532]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d112      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001baa:	4b82      	ldr	r3, [pc, #520]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bb6:	d10b      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	4b7e      	ldr	r3, [pc, #504]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d05b      	beq.n	8001c7c <HAL_RCC_OscConfig+0x108>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d157      	bne.n	8001c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e242      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd8:	d106      	bne.n	8001be8 <HAL_RCC_OscConfig+0x74>
 8001bda:	4b76      	ldr	r3, [pc, #472]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a75      	ldr	r2, [pc, #468]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e01d      	b.n	8001c24 <HAL_RCC_OscConfig+0xb0>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x98>
 8001bf2:	4b70      	ldr	r3, [pc, #448]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a6f      	ldr	r2, [pc, #444]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b6d      	ldr	r3, [pc, #436]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a6c      	ldr	r2, [pc, #432]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e00b      	b.n	8001c24 <HAL_RCC_OscConfig+0xb0>
 8001c0c:	4b69      	ldr	r3, [pc, #420]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a68      	ldr	r2, [pc, #416]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b66      	ldr	r3, [pc, #408]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a65      	ldr	r2, [pc, #404]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d013      	beq.n	8001c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f8fa 	bl	8000e24 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c34:	f7ff f8f6 	bl	8000e24 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e207      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	4b5b      	ldr	r3, [pc, #364]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0xc0>
 8001c52:	e014      	b.n	8001c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff f8e6 	bl	8000e24 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff f8e2 	bl	8000e24 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e1f3      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6e:	4b51      	ldr	r3, [pc, #324]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0xe8>
 8001c7a:	e000      	b.n	8001c7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d063      	beq.n	8001d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c8a:	4b4a      	ldr	r3, [pc, #296]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00b      	beq.n	8001cae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c96:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d11c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ca2:	4b44      	ldr	r3, [pc, #272]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d116      	bne.n	8001cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cae:	4b41      	ldr	r3, [pc, #260]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x152>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e1c7      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc6:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4937      	ldr	r1, [pc, #220]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cda:	e03a      	b.n	8001d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d020      	beq.n	8001d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce4:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <HAL_RCC_OscConfig+0x244>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cea:	f7ff f89b 	bl	8000e24 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf2:	f7ff f897 	bl	8000e24 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e1a8      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d10:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4925      	ldr	r1, [pc, #148]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
 8001d24:	e015      	b.n	8001d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d26:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <HAL_RCC_OscConfig+0x244>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7ff f87a 	bl	8000e24 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d34:	f7ff f876 	bl	8000e24 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e187      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d46:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d036      	beq.n	8001dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d016      	beq.n	8001d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <HAL_RCC_OscConfig+0x248>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6c:	f7ff f85a 	bl	8000e24 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d74:	f7ff f856 	bl	8000e24 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e167      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_OscConfig+0x240>)
 8001d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x200>
 8001d92:	e01b      	b.n	8001dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_RCC_OscConfig+0x248>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff f843 	bl	8000e24 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da0:	e00e      	b.n	8001dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da2:	f7ff f83f 	bl	8000e24 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d907      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e150      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
 8001db4:	40023800 	.word	0x40023800
 8001db8:	42470000 	.word	0x42470000
 8001dbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc0:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1ea      	bne.n	8001da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 8097 	beq.w	8001f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dde:	4b81      	ldr	r3, [pc, #516]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10f      	bne.n	8001e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	4b7d      	ldr	r3, [pc, #500]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a7c      	ldr	r2, [pc, #496]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b7a      	ldr	r3, [pc, #488]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e06:	2301      	movs	r3, #1
 8001e08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0a:	4b77      	ldr	r3, [pc, #476]	; (8001fe8 <HAL_RCC_OscConfig+0x474>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d118      	bne.n	8001e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e16:	4b74      	ldr	r3, [pc, #464]	; (8001fe8 <HAL_RCC_OscConfig+0x474>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a73      	ldr	r2, [pc, #460]	; (8001fe8 <HAL_RCC_OscConfig+0x474>)
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e22:	f7fe ffff 	bl	8000e24 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2a:	f7fe fffb 	bl	8000e24 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e10c      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3c:	4b6a      	ldr	r3, [pc, #424]	; (8001fe8 <HAL_RCC_OscConfig+0x474>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d106      	bne.n	8001e5e <HAL_RCC_OscConfig+0x2ea>
 8001e50:	4b64      	ldr	r3, [pc, #400]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	4a63      	ldr	r2, [pc, #396]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5c:	e01c      	b.n	8001e98 <HAL_RCC_OscConfig+0x324>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d10c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x30c>
 8001e66:	4b5f      	ldr	r3, [pc, #380]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6a:	4a5e      	ldr	r2, [pc, #376]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6713      	str	r3, [r2, #112]	; 0x70
 8001e72:	4b5c      	ldr	r3, [pc, #368]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	4a5b      	ldr	r2, [pc, #364]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7e:	e00b      	b.n	8001e98 <HAL_RCC_OscConfig+0x324>
 8001e80:	4b58      	ldr	r3, [pc, #352]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e84:	4a57      	ldr	r2, [pc, #348]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e86:	f023 0301 	bic.w	r3, r3, #1
 8001e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8c:	4b55      	ldr	r3, [pc, #340]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e90:	4a54      	ldr	r2, [pc, #336]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001e92:	f023 0304 	bic.w	r3, r3, #4
 8001e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d015      	beq.n	8001ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea0:	f7fe ffc0 	bl	8000e24 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea6:	e00a      	b.n	8001ebe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea8:	f7fe ffbc 	bl	8000e24 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e0cb      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebe:	4b49      	ldr	r3, [pc, #292]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0ee      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x334>
 8001eca:	e014      	b.n	8001ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ecc:	f7fe ffaa 	bl	8000e24 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed4:	f7fe ffa6 	bl	8000e24 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e0b5      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eea:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1ee      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ef6:	7dfb      	ldrb	r3, [r7, #23]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d105      	bne.n	8001f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efc:	4b39      	ldr	r3, [pc, #228]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	4a38      	ldr	r2, [pc, #224]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80a1 	beq.w	8002054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f12:	4b34      	ldr	r3, [pc, #208]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d05c      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d141      	bne.n	8001faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f26:	4b31      	ldr	r3, [pc, #196]	; (8001fec <HAL_RCC_OscConfig+0x478>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe ff7a 	bl	8000e24 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f34:	f7fe ff76 	bl	8000e24 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e087      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f46:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	019b      	lsls	r3, r3, #6
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	085b      	lsrs	r3, r3, #1
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	041b      	lsls	r3, r3, #16
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	061b      	lsls	r3, r3, #24
 8001f76:	491b      	ldr	r1, [pc, #108]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCC_OscConfig+0x478>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7fe ff4f 	bl	8000e24 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7fe ff4b 	bl	8000e24 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e05c      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x416>
 8001fa8:	e054      	b.n	8002054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <HAL_RCC_OscConfig+0x478>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7fe ff38 	bl	8000e24 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7fe ff34 	bl	8000e24 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e045      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x444>
 8001fd6:	e03d      	b.n	8002054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d107      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e038      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <HAL_RCC_OscConfig+0x4ec>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d028      	beq.n	8002050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d121      	bne.n	8002050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d11a      	bne.n	8002050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002020:	4013      	ands	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002028:	4293      	cmp	r3, r2
 800202a:	d111      	bne.n	8002050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	3b01      	subs	r3, #1
 800203a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800203c:	429a      	cmp	r2, r3
 800203e:	d107      	bne.n	8002050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0cc      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002078:	4b68      	ldr	r3, [pc, #416]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d90c      	bls.n	80020a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	4b65      	ldr	r3, [pc, #404]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b63      	ldr	r3, [pc, #396]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0b8      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d020      	beq.n	80020ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b8:	4b59      	ldr	r3, [pc, #356]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4a58      	ldr	r2, [pc, #352]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d0:	4b53      	ldr	r3, [pc, #332]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a52      	ldr	r2, [pc, #328]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020dc:	4b50      	ldr	r3, [pc, #320]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	494d      	ldr	r1, [pc, #308]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d044      	beq.n	8002184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	4b47      	ldr	r3, [pc, #284]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d119      	bne.n	8002142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e07f      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d003      	beq.n	8002122 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800211e:	2b03      	cmp	r3, #3
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002122:	4b3f      	ldr	r3, [pc, #252]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e06f      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002132:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e067      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002142:	4b37      	ldr	r3, [pc, #220]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f023 0203 	bic.w	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4934      	ldr	r1, [pc, #208]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	4313      	orrs	r3, r2
 8002152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002154:	f7fe fe66 	bl	8000e24 <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	e00a      	b.n	8002172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215c:	f7fe fe62 	bl	8000e24 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	; 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e04f      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 020c 	and.w	r2, r3, #12
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	429a      	cmp	r2, r3
 8002182:	d1eb      	bne.n	800215c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002184:	4b25      	ldr	r3, [pc, #148]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d20c      	bcs.n	80021ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b22      	ldr	r3, [pc, #136]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_RCC_ClockConfig+0x1b8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e032      	b.n	8002212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4916      	ldr	r1, [pc, #88]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d009      	beq.n	80021ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	490e      	ldr	r1, [pc, #56]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ea:	f000 f821 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80021ee:	4602      	mov	r2, r0
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	490a      	ldr	r1, [pc, #40]	; (8002224 <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	5ccb      	ldrb	r3, [r1, r3]
 80021fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002202:	4a09      	ldr	r2, [pc, #36]	; (8002228 <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x1c8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fdc6 	bl	8000d9c <HAL_InitTick>

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023c00 	.word	0x40023c00
 8002220:	40023800 	.word	0x40023800
 8002224:	080090c4 	.word	0x080090c4
 8002228:	20000010 	.word	0x20000010
 800222c:	20000000 	.word	0x20000000

08002230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002234:	b090      	sub	sp, #64	; 0x40
 8002236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002248:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b08      	cmp	r3, #8
 8002252:	d00d      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x40>
 8002254:	2b08      	cmp	r3, #8
 8002256:	f200 80a1 	bhi.w	800239c <HAL_RCC_GetSysClockFreq+0x16c>
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x34>
 800225e:	2b04      	cmp	r3, #4
 8002260:	d003      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0x3a>
 8002262:	e09b      	b.n	800239c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002264:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002266:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002268:	e09b      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800226a:	4b53      	ldr	r3, [pc, #332]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800226c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800226e:	e098      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002270:	4b4f      	ldr	r3, [pc, #316]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800227a:	4b4d      	ldr	r3, [pc, #308]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d028      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002286:	4b4a      	ldr	r3, [pc, #296]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	099b      	lsrs	r3, r3, #6
 800228c:	2200      	movs	r2, #0
 800228e:	623b      	str	r3, [r7, #32]
 8002290:	627a      	str	r2, [r7, #36]	; 0x24
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002298:	2100      	movs	r1, #0
 800229a:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800229c:	fb03 f201 	mul.w	r2, r3, r1
 80022a0:	2300      	movs	r3, #0
 80022a2:	fb00 f303 	mul.w	r3, r0, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	4a43      	ldr	r2, [pc, #268]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80022aa:	fba0 1202 	umull	r1, r2, r0, r2
 80022ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022b0:	460a      	mov	r2, r1
 80022b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80022b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b6:	4413      	add	r3, r2
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022bc:	2200      	movs	r2, #0
 80022be:	61bb      	str	r3, [r7, #24]
 80022c0:	61fa      	str	r2, [r7, #28]
 80022c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022ca:	f7fe fbc7 	bl	8000a5c <__aeabi_uldivmod>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4613      	mov	r3, r2
 80022d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d6:	e053      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d8:	4b35      	ldr	r3, [pc, #212]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	099b      	lsrs	r3, r3, #6
 80022de:	2200      	movs	r2, #0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	617a      	str	r2, [r7, #20]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022ea:	f04f 0b00 	mov.w	fp, #0
 80022ee:	4652      	mov	r2, sl
 80022f0:	465b      	mov	r3, fp
 80022f2:	f04f 0000 	mov.w	r0, #0
 80022f6:	f04f 0100 	mov.w	r1, #0
 80022fa:	0159      	lsls	r1, r3, #5
 80022fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002300:	0150      	lsls	r0, r2, #5
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	ebb2 080a 	subs.w	r8, r2, sl
 800230a:	eb63 090b 	sbc.w	r9, r3, fp
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800231a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800231e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002322:	ebb2 0408 	subs.w	r4, r2, r8
 8002326:	eb63 0509 	sbc.w	r5, r3, r9
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	00eb      	lsls	r3, r5, #3
 8002334:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002338:	00e2      	lsls	r2, r4, #3
 800233a:	4614      	mov	r4, r2
 800233c:	461d      	mov	r5, r3
 800233e:	eb14 030a 	adds.w	r3, r4, sl
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	eb45 030b 	adc.w	r3, r5, fp
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002356:	4629      	mov	r1, r5
 8002358:	028b      	lsls	r3, r1, #10
 800235a:	4621      	mov	r1, r4
 800235c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002360:	4621      	mov	r1, r4
 8002362:	028a      	lsls	r2, r1, #10
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236a:	2200      	movs	r2, #0
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	60fa      	str	r2, [r7, #12]
 8002370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002374:	f7fe fb72 	bl	8000a5c <__aeabi_uldivmod>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4613      	mov	r3, r2
 800237e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002390:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800239a:	e002      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3740      	adds	r7, #64	; 0x40
 80023a8:	46bd      	mov	sp, r7
 80023aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	00f42400 	.word	0x00f42400
 80023b8:	017d7840 	.word	0x017d7840

080023bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000010 	.word	0x20000010

080023d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023d8:	f7ff fff0 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	0a9b      	lsrs	r3, r3, #10
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	4903      	ldr	r1, [pc, #12]	; (80023f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40023800 	.word	0x40023800
 80023f8:	080090d4 	.word	0x080090d4

080023fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002400:	f7ff ffdc 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	0b5b      	lsrs	r3, r3, #13
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4903      	ldr	r1, [pc, #12]	; (8002420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40023800 	.word	0x40023800
 8002420:	080090d4 	.word	0x080090d4

08002424 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07b      	b.n	800252e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	2b00      	cmp	r3, #0
 800243c:	d108      	bne.n	8002450 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002446:	d009      	beq.n	800245c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
 800244e:	e005      	b.n	800245c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f004 fd56 	bl	8006f28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002492:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e0:	ea42 0103 	orr.w	r1, r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	f003 0104 	and.w	r1, r3, #4
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	f003 0210 	and.w	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b088      	sub	sp, #32
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	4613      	mov	r3, r2
 8002544:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002546:	f7fe fc6d 	bl	8000e24 <HAL_GetTick>
 800254a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d001      	beq.n	8002560 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800255c:	2302      	movs	r3, #2
 800255e:	e12a      	b.n	80027b6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <HAL_SPI_Transmit+0x36>
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e122      	b.n	80027b6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_SPI_Transmit+0x48>
 800257a:	2302      	movs	r3, #2
 800257c:	e11b      	b.n	80027b6 <HAL_SPI_Transmit+0x280>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2203      	movs	r2, #3
 800258a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	88fa      	ldrh	r2, [r7, #6]
 800259e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	88fa      	ldrh	r2, [r7, #6]
 80025a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025cc:	d10f      	bne.n	80025ee <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f8:	2b40      	cmp	r3, #64	; 0x40
 80025fa:	d007      	beq.n	800260c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800260a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002614:	d152      	bne.n	80026bc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <HAL_SPI_Transmit+0xee>
 800261e:	8b7b      	ldrh	r3, [r7, #26]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d145      	bne.n	80026b0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	881a      	ldrh	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	1c9a      	adds	r2, r3, #2
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002648:	e032      	b.n	80026b0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b02      	cmp	r3, #2
 8002656:	d112      	bne.n	800267e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	881a      	ldrh	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	1c9a      	adds	r2, r3, #2
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	86da      	strh	r2, [r3, #54]	; 0x36
 800267c:	e018      	b.n	80026b0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800267e:	f7fe fbd1 	bl	8000e24 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d803      	bhi.n	8002696 <HAL_SPI_Transmit+0x160>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002694:	d102      	bne.n	800269c <HAL_SPI_Transmit+0x166>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d109      	bne.n	80026b0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e082      	b.n	80027b6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1c7      	bne.n	800264a <HAL_SPI_Transmit+0x114>
 80026ba:	e053      	b.n	8002764 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <HAL_SPI_Transmit+0x194>
 80026c4:	8b7b      	ldrh	r3, [r7, #26]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d147      	bne.n	800275a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	330c      	adds	r3, #12
 80026d4:	7812      	ldrb	r2, [r2, #0]
 80026d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026f0:	e033      	b.n	800275a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d113      	bne.n	8002728 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	330c      	adds	r3, #12
 800270a:	7812      	ldrb	r2, [r2, #0]
 800270c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	86da      	strh	r2, [r3, #54]	; 0x36
 8002726:	e018      	b.n	800275a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002728:	f7fe fb7c 	bl	8000e24 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d803      	bhi.n	8002740 <HAL_SPI_Transmit+0x20a>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273e:	d102      	bne.n	8002746 <HAL_SPI_Transmit+0x210>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e02d      	b.n	80027b6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1c6      	bne.n	80026f2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	6839      	ldr	r1, [r7, #0]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fbd9 	bl	8002f20 <SPI_EndRxTxTransaction>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10a      	bne.n	8002798 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80027b4:	2300      	movs	r3, #0
  }
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3720      	adds	r7, #32
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b088      	sub	sp, #32
 80027c2:	af02      	add	r7, sp, #8
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	603b      	str	r3, [r7, #0]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d001      	beq.n	80027de <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80027da:	2302      	movs	r3, #2
 80027dc:	e104      	b.n	80029e8 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <HAL_SPI_Receive+0x2c>
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e0fc      	b.n	80029e8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027f6:	d112      	bne.n	800281e <HAL_SPI_Receive+0x60>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10e      	bne.n	800281e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2204      	movs	r2, #4
 8002804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002808:	88fa      	ldrh	r2, [r7, #6]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	4613      	mov	r3, r2
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	68b9      	ldr	r1, [r7, #8]
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f8eb 	bl	80029f0 <HAL_SPI_TransmitReceive>
 800281a:	4603      	mov	r3, r0
 800281c:	e0e4      	b.n	80029e8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800281e:	f7fe fb01 	bl	8000e24 <HAL_GetTick>
 8002822:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_SPI_Receive+0x74>
 800282e:	2302      	movs	r3, #2
 8002830:	e0da      	b.n	80029e8 <HAL_SPI_Receive+0x22a>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2204      	movs	r2, #4
 800283e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	88fa      	ldrh	r2, [r7, #6]
 8002852:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	88fa      	ldrh	r2, [r7, #6]
 8002858:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002880:	d10f      	bne.n	80028a2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002890:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d007      	beq.n	80028c0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d170      	bne.n	80029aa <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028c8:	e035      	b.n	8002936 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d115      	bne.n	8002904 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f103 020c 	add.w	r2, r3, #12
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	7812      	ldrb	r2, [r2, #0]
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002902:	e018      	b.n	8002936 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002904:	f7fe fa8e 	bl	8000e24 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d803      	bhi.n	800291c <HAL_SPI_Receive+0x15e>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291a:	d102      	bne.n	8002922 <HAL_SPI_Receive+0x164>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e058      	b.n	80029e8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1c4      	bne.n	80028ca <HAL_SPI_Receive+0x10c>
 8002940:	e038      	b.n	80029b4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b01      	cmp	r3, #1
 800294e:	d113      	bne.n	8002978 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	b292      	uxth	r2, r2
 800295c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	1c9a      	adds	r2, r3, #2
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002976:	e018      	b.n	80029aa <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002978:	f7fe fa54 	bl	8000e24 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d803      	bhi.n	8002990 <HAL_SPI_Receive+0x1d2>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298e:	d102      	bne.n	8002996 <HAL_SPI_Receive+0x1d8>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e01e      	b.n	80029e8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1c6      	bne.n	8002942 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	6839      	ldr	r1, [r7, #0]
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fa4b 	bl	8002e54 <SPI_EndRxTransaction>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80029e6:	2300      	movs	r3, #0
  }
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029fe:	2301      	movs	r3, #1
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a02:	f7fe fa0f 	bl	8000e24 <HAL_GetTick>
 8002a06:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a0e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002a16:	887b      	ldrh	r3, [r7, #2]
 8002a18:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a1a:	7ffb      	ldrb	r3, [r7, #31]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d00c      	beq.n	8002a3a <HAL_SPI_TransmitReceive+0x4a>
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a26:	d106      	bne.n	8002a36 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <HAL_SPI_TransmitReceive+0x46>
 8002a30:	7ffb      	ldrb	r3, [r7, #31]
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d001      	beq.n	8002a3a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
 8002a38:	e17f      	b.n	8002d3a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_SPI_TransmitReceive+0x5c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <HAL_SPI_TransmitReceive+0x5c>
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e174      	b.n	8002d3a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_SPI_TransmitReceive+0x6e>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e16d      	b.n	8002d3a <HAL_SPI_TransmitReceive+0x34a>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d003      	beq.n	8002a7a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2205      	movs	r2, #5
 8002a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	887a      	ldrh	r2, [r7, #2]
 8002a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	887a      	ldrh	r2, [r7, #2]
 8002aa2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aba:	2b40      	cmp	r3, #64	; 0x40
 8002abc:	d007      	beq.n	8002ace <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002acc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad6:	d17e      	bne.n	8002bd6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <HAL_SPI_TransmitReceive+0xf6>
 8002ae0:	8afb      	ldrh	r3, [r7, #22]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d16c      	bne.n	8002bc0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	881a      	ldrh	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	1c9a      	adds	r2, r3, #2
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b0a:	e059      	b.n	8002bc0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d11b      	bne.n	8002b52 <HAL_SPI_TransmitReceive+0x162>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d016      	beq.n	8002b52 <HAL_SPI_TransmitReceive+0x162>
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d113      	bne.n	8002b52 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	881a      	ldrh	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	1c9a      	adds	r2, r3, #2
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d119      	bne.n	8002b94 <HAL_SPI_TransmitReceive+0x1a4>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d014      	beq.n	8002b94 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	b292      	uxth	r2, r2
 8002b76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	1c9a      	adds	r2, r3, #2
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b90:	2301      	movs	r3, #1
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b94:	f7fe f946 	bl	8000e24 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d80d      	bhi.n	8002bc0 <HAL_SPI_TransmitReceive+0x1d0>
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002baa:	d009      	beq.n	8002bc0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e0bc      	b.n	8002d3a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1a0      	bne.n	8002b0c <HAL_SPI_TransmitReceive+0x11c>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d19b      	bne.n	8002b0c <HAL_SPI_TransmitReceive+0x11c>
 8002bd4:	e082      	b.n	8002cdc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_SPI_TransmitReceive+0x1f4>
 8002bde:	8afb      	ldrh	r3, [r7, #22]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d171      	bne.n	8002cc8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	330c      	adds	r3, #12
 8002bee:	7812      	ldrb	r2, [r2, #0]
 8002bf0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c0a:	e05d      	b.n	8002cc8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d11c      	bne.n	8002c54 <HAL_SPI_TransmitReceive+0x264>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d017      	beq.n	8002c54 <HAL_SPI_TransmitReceive+0x264>
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d114      	bne.n	8002c54 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	330c      	adds	r3, #12
 8002c34:	7812      	ldrb	r2, [r2, #0]
 8002c36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d119      	bne.n	8002c96 <HAL_SPI_TransmitReceive+0x2a6>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d014      	beq.n	8002c96 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c92:	2301      	movs	r3, #1
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c96:	f7fe f8c5 	bl	8000e24 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d803      	bhi.n	8002cae <HAL_SPI_TransmitReceive+0x2be>
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d102      	bne.n	8002cb4 <HAL_SPI_TransmitReceive+0x2c4>
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e038      	b.n	8002d3a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d19c      	bne.n	8002c0c <HAL_SPI_TransmitReceive+0x21c>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d197      	bne.n	8002c0c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cdc:	6a3a      	ldr	r2, [r7, #32]
 8002cde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f91d 	bl	8002f20 <SPI_EndRxTxTransaction>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e01d      	b.n	8002d3a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10a      	bne.n	8002d1c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002d38:	2300      	movs	r3, #0
  }
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3728      	adds	r7, #40	; 0x28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d54:	f7fe f866 	bl	8000e24 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	4413      	add	r3, r2
 8002d62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d64:	f7fe f85e 	bl	8000e24 <HAL_GetTick>
 8002d68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d6a:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	015b      	lsls	r3, r3, #5
 8002d70:	0d1b      	lsrs	r3, r3, #20
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	fb02 f303 	mul.w	r3, r2, r3
 8002d78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d7a:	e055      	b.n	8002e28 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d82:	d051      	beq.n	8002e28 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d84:	f7fe f84e 	bl	8000e24 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d902      	bls.n	8002d9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d13d      	bne.n	8002e16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002da8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002db2:	d111      	bne.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dbc:	d004      	beq.n	8002dc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc6:	d107      	bne.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de0:	d10f      	bne.n	8002e02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e018      	b.n	8002e48 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61fb      	str	r3, [r7, #28]
 8002e20:	e002      	b.n	8002e28 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4013      	ands	r3, r2
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d19a      	bne.n	8002d7c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3720      	adds	r7, #32
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20000010 	.word	0x20000010

08002e54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e68:	d111      	bne.n	8002e8e <SPI_EndRxTransaction+0x3a>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e72:	d004      	beq.n	8002e7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7c:	d107      	bne.n	8002e8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e8c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e96:	d12a      	bne.n	8002eee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea0:	d012      	beq.n	8002ec8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2180      	movs	r1, #128	; 0x80
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f7ff ff49 	bl	8002d44 <SPI_WaitFlagStateUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d02d      	beq.n	8002f14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebc:	f043 0220 	orr.w	r2, r3, #32
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e026      	b.n	8002f16 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f7ff ff36 	bl	8002d44 <SPI_WaitFlagStateUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d01a      	beq.n	8002f14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	f043 0220 	orr.w	r2, r3, #32
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e013      	b.n	8002f16 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f7ff ff23 	bl	8002d44 <SPI_WaitFlagStateUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e000      	b.n	8002f16 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2201      	movs	r2, #1
 8002f34:	2102      	movs	r1, #2
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff ff04 	bl	8002d44 <SPI_WaitFlagStateUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f46:	f043 0220 	orr.w	r2, r3, #32
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e032      	b.n	8002fb8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f52:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <SPI_EndRxTxTransaction+0xa0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a1b      	ldr	r2, [pc, #108]	; (8002fc4 <SPI_EndRxTxTransaction+0xa4>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	0d5b      	lsrs	r3, r3, #21
 8002f5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f70:	d112      	bne.n	8002f98 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2180      	movs	r1, #128	; 0x80
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7ff fee1 	bl	8002d44 <SPI_WaitFlagStateUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d016      	beq.n	8002fb6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e00f      	b.n	8002fb8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fae:	2b80      	cmp	r3, #128	; 0x80
 8002fb0:	d0f2      	beq.n	8002f98 <SPI_EndRxTxTransaction+0x78>
 8002fb2:	e000      	b.n	8002fb6 <SPI_EndRxTxTransaction+0x96>
        break;
 8002fb4:	bf00      	nop
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20000010 	.word	0x20000010
 8002fc4:	165e9f81 	.word	0x165e9f81

08002fc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e041      	b.n	800305e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f004 f8d2 	bl	8007198 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3304      	adds	r3, #4
 8003004:	4619      	mov	r1, r3
 8003006:	4610      	mov	r0, r2
 8003008:	f000 f9b8 	bl	800337c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d109      	bne.n	800308c <HAL_TIM_PWM_Start+0x24>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	bf14      	ite	ne
 8003084:	2301      	movne	r3, #1
 8003086:	2300      	moveq	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	e022      	b.n	80030d2 <HAL_TIM_PWM_Start+0x6a>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b04      	cmp	r3, #4
 8003090:	d109      	bne.n	80030a6 <HAL_TIM_PWM_Start+0x3e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b01      	cmp	r3, #1
 800309c:	bf14      	ite	ne
 800309e:	2301      	movne	r3, #1
 80030a0:	2300      	moveq	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	e015      	b.n	80030d2 <HAL_TIM_PWM_Start+0x6a>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d109      	bne.n	80030c0 <HAL_TIM_PWM_Start+0x58>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e008      	b.n	80030d2 <HAL_TIM_PWM_Start+0x6a>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e07c      	b.n	80031d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d104      	bne.n	80030ea <HAL_TIM_PWM_Start+0x82>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030e8:	e013      	b.n	8003112 <HAL_TIM_PWM_Start+0xaa>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d104      	bne.n	80030fa <HAL_TIM_PWM_Start+0x92>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030f8:	e00b      	b.n	8003112 <HAL_TIM_PWM_Start+0xaa>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d104      	bne.n	800310a <HAL_TIM_PWM_Start+0xa2>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003108:	e003      	b.n	8003112 <HAL_TIM_PWM_Start+0xaa>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2202      	movs	r2, #2
 800310e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2201      	movs	r2, #1
 8003118:	6839      	ldr	r1, [r7, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fb84 	bl	8003828 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a2d      	ldr	r2, [pc, #180]	; (80031dc <HAL_TIM_PWM_Start+0x174>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d004      	beq.n	8003134 <HAL_TIM_PWM_Start+0xcc>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a2c      	ldr	r2, [pc, #176]	; (80031e0 <HAL_TIM_PWM_Start+0x178>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d101      	bne.n	8003138 <HAL_TIM_PWM_Start+0xd0>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <HAL_TIM_PWM_Start+0xd2>
 8003138:	2300      	movs	r3, #0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800314c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a22      	ldr	r2, [pc, #136]	; (80031dc <HAL_TIM_PWM_Start+0x174>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d022      	beq.n	800319e <HAL_TIM_PWM_Start+0x136>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003160:	d01d      	beq.n	800319e <HAL_TIM_PWM_Start+0x136>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1f      	ldr	r2, [pc, #124]	; (80031e4 <HAL_TIM_PWM_Start+0x17c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d018      	beq.n	800319e <HAL_TIM_PWM_Start+0x136>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1d      	ldr	r2, [pc, #116]	; (80031e8 <HAL_TIM_PWM_Start+0x180>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d013      	beq.n	800319e <HAL_TIM_PWM_Start+0x136>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1c      	ldr	r2, [pc, #112]	; (80031ec <HAL_TIM_PWM_Start+0x184>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00e      	beq.n	800319e <HAL_TIM_PWM_Start+0x136>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a16      	ldr	r2, [pc, #88]	; (80031e0 <HAL_TIM_PWM_Start+0x178>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d009      	beq.n	800319e <HAL_TIM_PWM_Start+0x136>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a18      	ldr	r2, [pc, #96]	; (80031f0 <HAL_TIM_PWM_Start+0x188>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d004      	beq.n	800319e <HAL_TIM_PWM_Start+0x136>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a16      	ldr	r2, [pc, #88]	; (80031f4 <HAL_TIM_PWM_Start+0x18c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d111      	bne.n	80031c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b06      	cmp	r3, #6
 80031ae:	d010      	beq.n	80031d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c0:	e007      	b.n	80031d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0201 	orr.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40010000 	.word	0x40010000
 80031e0:	40010400 	.word	0x40010400
 80031e4:	40000400 	.word	0x40000400
 80031e8:	40000800 	.word	0x40000800
 80031ec:	40000c00 	.word	0x40000c00
 80031f0:	40014000 	.word	0x40014000
 80031f4:	40001800 	.word	0x40001800

080031f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003212:	2302      	movs	r3, #2
 8003214:	e0ae      	b.n	8003374 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b0c      	cmp	r3, #12
 8003222:	f200 809f 	bhi.w	8003364 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003226:	a201      	add	r2, pc, #4	; (adr r2, 800322c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322c:	08003261 	.word	0x08003261
 8003230:	08003365 	.word	0x08003365
 8003234:	08003365 	.word	0x08003365
 8003238:	08003365 	.word	0x08003365
 800323c:	080032a1 	.word	0x080032a1
 8003240:	08003365 	.word	0x08003365
 8003244:	08003365 	.word	0x08003365
 8003248:	08003365 	.word	0x08003365
 800324c:	080032e3 	.word	0x080032e3
 8003250:	08003365 	.word	0x08003365
 8003254:	08003365 	.word	0x08003365
 8003258:	08003365 	.word	0x08003365
 800325c:	08003323 	.word	0x08003323
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f92e 	bl	80034c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0208 	orr.w	r2, r2, #8
 800327a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0204 	bic.w	r2, r2, #4
 800328a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6999      	ldr	r1, [r3, #24]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	619a      	str	r2, [r3, #24]
      break;
 800329e:	e064      	b.n	800336a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f97e 	bl	80035a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6999      	ldr	r1, [r3, #24]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	021a      	lsls	r2, r3, #8
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	619a      	str	r2, [r3, #24]
      break;
 80032e0:	e043      	b.n	800336a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 f9d3 	bl	8003694 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0208 	orr.w	r2, r2, #8
 80032fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0204 	bic.w	r2, r2, #4
 800330c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69d9      	ldr	r1, [r3, #28]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	61da      	str	r2, [r3, #28]
      break;
 8003320:	e023      	b.n	800336a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fa27 	bl	800377c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800333c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69da      	ldr	r2, [r3, #28]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69d9      	ldr	r1, [r3, #28]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	021a      	lsls	r2, r3, #8
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	61da      	str	r2, [r3, #28]
      break;
 8003362:	e002      	b.n	800336a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	75fb      	strb	r3, [r7, #23]
      break;
 8003368:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003372:	7dfb      	ldrb	r3, [r7, #23]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a43      	ldr	r2, [pc, #268]	; (800349c <TIM_Base_SetConfig+0x120>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d013      	beq.n	80033bc <TIM_Base_SetConfig+0x40>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d00f      	beq.n	80033bc <TIM_Base_SetConfig+0x40>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a40      	ldr	r2, [pc, #256]	; (80034a0 <TIM_Base_SetConfig+0x124>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00b      	beq.n	80033bc <TIM_Base_SetConfig+0x40>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3f      	ldr	r2, [pc, #252]	; (80034a4 <TIM_Base_SetConfig+0x128>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d007      	beq.n	80033bc <TIM_Base_SetConfig+0x40>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a3e      	ldr	r2, [pc, #248]	; (80034a8 <TIM_Base_SetConfig+0x12c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d003      	beq.n	80033bc <TIM_Base_SetConfig+0x40>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a3d      	ldr	r2, [pc, #244]	; (80034ac <TIM_Base_SetConfig+0x130>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d108      	bne.n	80033ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a32      	ldr	r2, [pc, #200]	; (800349c <TIM_Base_SetConfig+0x120>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d02b      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033dc:	d027      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a2f      	ldr	r2, [pc, #188]	; (80034a0 <TIM_Base_SetConfig+0x124>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d023      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a2e      	ldr	r2, [pc, #184]	; (80034a4 <TIM_Base_SetConfig+0x128>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01f      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a2d      	ldr	r2, [pc, #180]	; (80034a8 <TIM_Base_SetConfig+0x12c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01b      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a2c      	ldr	r2, [pc, #176]	; (80034ac <TIM_Base_SetConfig+0x130>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d017      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a2b      	ldr	r2, [pc, #172]	; (80034b0 <TIM_Base_SetConfig+0x134>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a2a      	ldr	r2, [pc, #168]	; (80034b4 <TIM_Base_SetConfig+0x138>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00f      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a29      	ldr	r2, [pc, #164]	; (80034b8 <TIM_Base_SetConfig+0x13c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00b      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a28      	ldr	r2, [pc, #160]	; (80034bc <TIM_Base_SetConfig+0x140>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d007      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a27      	ldr	r2, [pc, #156]	; (80034c0 <TIM_Base_SetConfig+0x144>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d003      	beq.n	800342e <TIM_Base_SetConfig+0xb2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a26      	ldr	r2, [pc, #152]	; (80034c4 <TIM_Base_SetConfig+0x148>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d108      	bne.n	8003440 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a0e      	ldr	r2, [pc, #56]	; (800349c <TIM_Base_SetConfig+0x120>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d003      	beq.n	800346e <TIM_Base_SetConfig+0xf2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a10      	ldr	r2, [pc, #64]	; (80034ac <TIM_Base_SetConfig+0x130>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d103      	bne.n	8003476 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f043 0204 	orr.w	r2, r3, #4
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	601a      	str	r2, [r3, #0]
}
 800348e:	bf00      	nop
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40010000 	.word	0x40010000
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800
 80034a8:	40000c00 	.word	0x40000c00
 80034ac:	40010400 	.word	0x40010400
 80034b0:	40014000 	.word	0x40014000
 80034b4:	40014400 	.word	0x40014400
 80034b8:	40014800 	.word	0x40014800
 80034bc:	40001800 	.word	0x40001800
 80034c0:	40001c00 	.word	0x40001c00
 80034c4:	40002000 	.word	0x40002000

080034c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f023 0201 	bic.w	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0303 	bic.w	r3, r3, #3
 80034fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f023 0302 	bic.w	r3, r3, #2
 8003510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a20      	ldr	r2, [pc, #128]	; (80035a0 <TIM_OC1_SetConfig+0xd8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d003      	beq.n	800352c <TIM_OC1_SetConfig+0x64>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a1f      	ldr	r2, [pc, #124]	; (80035a4 <TIM_OC1_SetConfig+0xdc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d10c      	bne.n	8003546 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f023 0308 	bic.w	r3, r3, #8
 8003532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f023 0304 	bic.w	r3, r3, #4
 8003544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a15      	ldr	r2, [pc, #84]	; (80035a0 <TIM_OC1_SetConfig+0xd8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d003      	beq.n	8003556 <TIM_OC1_SetConfig+0x8e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <TIM_OC1_SetConfig+0xdc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d111      	bne.n	800357a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800355c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	621a      	str	r2, [r3, #32]
}
 8003594:	bf00      	nop
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	40010000 	.word	0x40010000
 80035a4:	40010400 	.word	0x40010400

080035a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f023 0210 	bic.w	r2, r3, #16
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f023 0320 	bic.w	r3, r3, #32
 80035f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a22      	ldr	r2, [pc, #136]	; (800368c <TIM_OC2_SetConfig+0xe4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d003      	beq.n	8003610 <TIM_OC2_SetConfig+0x68>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a21      	ldr	r2, [pc, #132]	; (8003690 <TIM_OC2_SetConfig+0xe8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d10d      	bne.n	800362c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800362a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a17      	ldr	r2, [pc, #92]	; (800368c <TIM_OC2_SetConfig+0xe4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d003      	beq.n	800363c <TIM_OC2_SetConfig+0x94>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a16      	ldr	r2, [pc, #88]	; (8003690 <TIM_OC2_SetConfig+0xe8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d113      	bne.n	8003664 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003642:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800364a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	621a      	str	r2, [r3, #32]
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40010000 	.word	0x40010000
 8003690:	40010400 	.word	0x40010400

08003694 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0303 	bic.w	r3, r3, #3
 80036ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a21      	ldr	r2, [pc, #132]	; (8003774 <TIM_OC3_SetConfig+0xe0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d003      	beq.n	80036fa <TIM_OC3_SetConfig+0x66>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a20      	ldr	r2, [pc, #128]	; (8003778 <TIM_OC3_SetConfig+0xe4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d10d      	bne.n	8003716 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003700:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a16      	ldr	r2, [pc, #88]	; (8003774 <TIM_OC3_SetConfig+0xe0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d003      	beq.n	8003726 <TIM_OC3_SetConfig+0x92>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a15      	ldr	r2, [pc, #84]	; (8003778 <TIM_OC3_SetConfig+0xe4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d113      	bne.n	800374e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800372c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	621a      	str	r2, [r3, #32]
}
 8003768:	bf00      	nop
 800376a:	371c      	adds	r7, #28
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	40010000 	.word	0x40010000
 8003778:	40010400 	.word	0x40010400

0800377c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	031b      	lsls	r3, r3, #12
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a12      	ldr	r2, [pc, #72]	; (8003820 <TIM_OC4_SetConfig+0xa4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d003      	beq.n	80037e4 <TIM_OC4_SetConfig+0x68>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a11      	ldr	r2, [pc, #68]	; (8003824 <TIM_OC4_SetConfig+0xa8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d109      	bne.n	80037f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	019b      	lsls	r3, r3, #6
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	621a      	str	r2, [r3, #32]
}
 8003812:	bf00      	nop
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40010000 	.word	0x40010000
 8003824:	40010400 	.word	0x40010400

08003828 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 031f 	and.w	r3, r3, #31
 800383a:	2201      	movs	r2, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a1a      	ldr	r2, [r3, #32]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	43db      	mvns	r3, r3
 800384a:	401a      	ands	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a1a      	ldr	r2, [r3, #32]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	fa01 f303 	lsl.w	r3, r1, r3
 8003860:	431a      	orrs	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	621a      	str	r2, [r3, #32]
}
 8003866:	bf00      	nop
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003888:	2302      	movs	r3, #2
 800388a:	e05a      	b.n	8003942 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a21      	ldr	r2, [pc, #132]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d022      	beq.n	8003916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d8:	d01d      	beq.n	8003916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d018      	beq.n	8003916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a1b      	ldr	r2, [pc, #108]	; (8003958 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d013      	beq.n	8003916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a1a      	ldr	r2, [pc, #104]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00e      	beq.n	8003916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a18      	ldr	r2, [pc, #96]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d009      	beq.n	8003916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a17      	ldr	r2, [pc, #92]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d004      	beq.n	8003916 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a15      	ldr	r2, [pc, #84]	; (8003968 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d10c      	bne.n	8003930 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800391c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	4313      	orrs	r3, r2
 8003926:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40010000 	.word	0x40010000
 8003954:	40000400 	.word	0x40000400
 8003958:	40000800 	.word	0x40000800
 800395c:	40000c00 	.word	0x40000c00
 8003960:	40010400 	.word	0x40010400
 8003964:	40014000 	.word	0x40014000
 8003968:	40001800 	.word	0x40001800

0800396c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e042      	b.n	8003a04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f003 fc82 	bl	800729c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2224      	movs	r2, #36	; 0x24
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f973 	bl	8003c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695a      	ldr	r2, [r3, #20]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08a      	sub	sp, #40	; 0x28
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d175      	bne.n	8003b18 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_UART_Transmit+0x2c>
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e06e      	b.n	8003b1a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2221      	movs	r2, #33	; 0x21
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a4a:	f7fd f9eb 	bl	8000e24 <HAL_GetTick>
 8003a4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	88fa      	ldrh	r2, [r7, #6]
 8003a54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a64:	d108      	bne.n	8003a78 <HAL_UART_Transmit+0x6c>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d104      	bne.n	8003a78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e003      	b.n	8003a80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a80:	e02e      	b.n	8003ae0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2180      	movs	r1, #128	; 0x80
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f848 	bl	8003b22 <UART_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e03a      	b.n	8003b1a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10b      	bne.n	8003ac2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	3302      	adds	r3, #2
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	e007      	b.n	8003ad2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	781a      	ldrb	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1cb      	bne.n	8003a82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2200      	movs	r2, #0
 8003af2:	2140      	movs	r1, #64	; 0x40
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f814 	bl	8003b22 <UART_WaitOnFlagUntilTimeout>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e006      	b.n	8003b1a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	e000      	b.n	8003b1a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
  }
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b086      	sub	sp, #24
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b32:	e03b      	b.n	8003bac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3a:	d037      	beq.n	8003bac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3c:	f7fd f972 	bl	8000e24 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	6a3a      	ldr	r2, [r7, #32]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d302      	bcc.n	8003b52 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e03a      	b.n	8003bcc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d023      	beq.n	8003bac <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b80      	cmp	r3, #128	; 0x80
 8003b68:	d020      	beq.n	8003bac <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b40      	cmp	r3, #64	; 0x40
 8003b6e:	d01d      	beq.n	8003bac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d116      	bne.n	8003bac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 f81d 	bl	8003bd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e00f      	b.n	8003bcc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	bf0c      	ite	eq
 8003bbc:	2301      	moveq	r3, #1
 8003bbe:	2300      	movne	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d0b4      	beq.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b095      	sub	sp, #84	; 0x54
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	330c      	adds	r3, #12
 8003be2:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be6:	e853 3f00 	ldrex	r3, [r3]
 8003bea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	330c      	adds	r3, #12
 8003bfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bfc:	643a      	str	r2, [r7, #64]	; 0x40
 8003bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c04:	e841 2300 	strex	r3, r2, [r1]
 8003c08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e5      	bne.n	8003bdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3314      	adds	r3, #20
 8003c16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	e853 3f00 	ldrex	r3, [r3]
 8003c1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3314      	adds	r3, #20
 8003c2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c38:	e841 2300 	strex	r3, r2, [r1]
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1e5      	bne.n	8003c10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d119      	bne.n	8003c80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	330c      	adds	r3, #12
 8003c52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f023 0310 	bic.w	r3, r3, #16
 8003c62:	647b      	str	r3, [r7, #68]	; 0x44
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	330c      	adds	r3, #12
 8003c6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c6c:	61ba      	str	r2, [r7, #24]
 8003c6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c70:	6979      	ldr	r1, [r7, #20]
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	e841 2300 	strex	r3, r2, [r1]
 8003c78:	613b      	str	r3, [r7, #16]
   return(result);
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e5      	bne.n	8003c4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c8e:	bf00      	nop
 8003c90:	3754      	adds	r7, #84	; 0x54
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
	...

08003c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca0:	b0c0      	sub	sp, #256	; 0x100
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb8:	68d9      	ldr	r1, [r3, #12]
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	ea40 0301 	orr.w	r3, r0, r1
 8003cc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003cf4:	f021 010c 	bic.w	r1, r1, #12
 8003cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d02:	430b      	orrs	r3, r1
 8003d04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d16:	6999      	ldr	r1, [r3, #24]
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	ea40 0301 	orr.w	r3, r0, r1
 8003d22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4b8f      	ldr	r3, [pc, #572]	; (8003f68 <UART_SetConfig+0x2cc>)
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d005      	beq.n	8003d3c <UART_SetConfig+0xa0>
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4b8d      	ldr	r3, [pc, #564]	; (8003f6c <UART_SetConfig+0x2d0>)
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d104      	bne.n	8003d46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d3c:	f7fe fb5e 	bl	80023fc <HAL_RCC_GetPCLK2Freq>
 8003d40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d44:	e003      	b.n	8003d4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d46:	f7fe fb45 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 8003d4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d58:	f040 810c 	bne.w	8003f74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d60:	2200      	movs	r2, #0
 8003d62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d6e:	4622      	mov	r2, r4
 8003d70:	462b      	mov	r3, r5
 8003d72:	1891      	adds	r1, r2, r2
 8003d74:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d76:	415b      	adcs	r3, r3
 8003d78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d7e:	4621      	mov	r1, r4
 8003d80:	eb12 0801 	adds.w	r8, r2, r1
 8003d84:	4629      	mov	r1, r5
 8003d86:	eb43 0901 	adc.w	r9, r3, r1
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d9e:	4690      	mov	r8, r2
 8003da0:	4699      	mov	r9, r3
 8003da2:	4623      	mov	r3, r4
 8003da4:	eb18 0303 	adds.w	r3, r8, r3
 8003da8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003dac:	462b      	mov	r3, r5
 8003dae:	eb49 0303 	adc.w	r3, r9, r3
 8003db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003dc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003dca:	460b      	mov	r3, r1
 8003dcc:	18db      	adds	r3, r3, r3
 8003dce:	653b      	str	r3, [r7, #80]	; 0x50
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	eb42 0303 	adc.w	r3, r2, r3
 8003dd6:	657b      	str	r3, [r7, #84]	; 0x54
 8003dd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ddc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003de0:	f7fc fe3c 	bl	8000a5c <__aeabi_uldivmod>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4b61      	ldr	r3, [pc, #388]	; (8003f70 <UART_SetConfig+0x2d4>)
 8003dea:	fba3 2302 	umull	r2, r3, r3, r2
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	011c      	lsls	r4, r3, #4
 8003df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e04:	4642      	mov	r2, r8
 8003e06:	464b      	mov	r3, r9
 8003e08:	1891      	adds	r1, r2, r2
 8003e0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e0c:	415b      	adcs	r3, r3
 8003e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e14:	4641      	mov	r1, r8
 8003e16:	eb12 0a01 	adds.w	sl, r2, r1
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	eb43 0b01 	adc.w	fp, r3, r1
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e34:	4692      	mov	sl, r2
 8003e36:	469b      	mov	fp, r3
 8003e38:	4643      	mov	r3, r8
 8003e3a:	eb1a 0303 	adds.w	r3, sl, r3
 8003e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e42:	464b      	mov	r3, r9
 8003e44:	eb4b 0303 	adc.w	r3, fp, r3
 8003e48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e60:	460b      	mov	r3, r1
 8003e62:	18db      	adds	r3, r3, r3
 8003e64:	643b      	str	r3, [r7, #64]	; 0x40
 8003e66:	4613      	mov	r3, r2
 8003e68:	eb42 0303 	adc.w	r3, r2, r3
 8003e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e76:	f7fc fdf1 	bl	8000a5c <__aeabi_uldivmod>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <UART_SetConfig+0x2d4>)
 8003e82:	fba3 2301 	umull	r2, r3, r3, r1
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	2264      	movs	r2, #100	; 0x64
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	1acb      	subs	r3, r1, r3
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e96:	4b36      	ldr	r3, [pc, #216]	; (8003f70 <UART_SetConfig+0x2d4>)
 8003e98:	fba3 2302 	umull	r2, r3, r3, r2
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ea4:	441c      	add	r4, r3
 8003ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003eb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003eb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003eb8:	4642      	mov	r2, r8
 8003eba:	464b      	mov	r3, r9
 8003ebc:	1891      	adds	r1, r2, r2
 8003ebe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ec0:	415b      	adcs	r3, r3
 8003ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ec8:	4641      	mov	r1, r8
 8003eca:	1851      	adds	r1, r2, r1
 8003ecc:	6339      	str	r1, [r7, #48]	; 0x30
 8003ece:	4649      	mov	r1, r9
 8003ed0:	414b      	adcs	r3, r1
 8003ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	00cb      	lsls	r3, r1, #3
 8003ee4:	4651      	mov	r1, sl
 8003ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eea:	4651      	mov	r1, sl
 8003eec:	00ca      	lsls	r2, r1, #3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	189b      	adds	r3, r3, r2
 8003ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003efc:	464b      	mov	r3, r9
 8003efe:	460a      	mov	r2, r1
 8003f00:	eb42 0303 	adc.w	r3, r2, r3
 8003f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	18db      	adds	r3, r3, r3
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f22:	4613      	mov	r3, r2
 8003f24:	eb42 0303 	adc.w	r3, r2, r3
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f32:	f7fc fd93 	bl	8000a5c <__aeabi_uldivmod>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <UART_SetConfig+0x2d4>)
 8003f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	2164      	movs	r1, #100	; 0x64
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	3332      	adds	r3, #50	; 0x32
 8003f4e:	4a08      	ldr	r2, [pc, #32]	; (8003f70 <UART_SetConfig+0x2d4>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	f003 0207 	and.w	r2, r3, #7
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4422      	add	r2, r4
 8003f62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f64:	e106      	b.n	8004174 <UART_SetConfig+0x4d8>
 8003f66:	bf00      	nop
 8003f68:	40011000 	.word	0x40011000
 8003f6c:	40011400 	.word	0x40011400
 8003f70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f86:	4642      	mov	r2, r8
 8003f88:	464b      	mov	r3, r9
 8003f8a:	1891      	adds	r1, r2, r2
 8003f8c:	6239      	str	r1, [r7, #32]
 8003f8e:	415b      	adcs	r3, r3
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
 8003f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f96:	4641      	mov	r1, r8
 8003f98:	1854      	adds	r4, r2, r1
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	eb43 0501 	adc.w	r5, r3, r1
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	00eb      	lsls	r3, r5, #3
 8003faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fae:	00e2      	lsls	r2, r4, #3
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	461d      	mov	r5, r3
 8003fb4:	4643      	mov	r3, r8
 8003fb6:	18e3      	adds	r3, r4, r3
 8003fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fbc:	464b      	mov	r3, r9
 8003fbe:	eb45 0303 	adc.w	r3, r5, r3
 8003fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	008b      	lsls	r3, r1, #2
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fec:	4621      	mov	r1, r4
 8003fee:	008a      	lsls	r2, r1, #2
 8003ff0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ff4:	f7fc fd32 	bl	8000a5c <__aeabi_uldivmod>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4b60      	ldr	r3, [pc, #384]	; (8004180 <UART_SetConfig+0x4e4>)
 8003ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	011c      	lsls	r4, r3, #4
 8004006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800400a:	2200      	movs	r2, #0
 800400c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004010:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004014:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004018:	4642      	mov	r2, r8
 800401a:	464b      	mov	r3, r9
 800401c:	1891      	adds	r1, r2, r2
 800401e:	61b9      	str	r1, [r7, #24]
 8004020:	415b      	adcs	r3, r3
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004028:	4641      	mov	r1, r8
 800402a:	1851      	adds	r1, r2, r1
 800402c:	6139      	str	r1, [r7, #16]
 800402e:	4649      	mov	r1, r9
 8004030:	414b      	adcs	r3, r1
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004040:	4659      	mov	r1, fp
 8004042:	00cb      	lsls	r3, r1, #3
 8004044:	4651      	mov	r1, sl
 8004046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800404a:	4651      	mov	r1, sl
 800404c:	00ca      	lsls	r2, r1, #3
 800404e:	4610      	mov	r0, r2
 8004050:	4619      	mov	r1, r3
 8004052:	4603      	mov	r3, r0
 8004054:	4642      	mov	r2, r8
 8004056:	189b      	adds	r3, r3, r2
 8004058:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800405c:	464b      	mov	r3, r9
 800405e:	460a      	mov	r2, r1
 8004060:	eb42 0303 	adc.w	r3, r2, r3
 8004064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	67bb      	str	r3, [r7, #120]	; 0x78
 8004072:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004080:	4649      	mov	r1, r9
 8004082:	008b      	lsls	r3, r1, #2
 8004084:	4641      	mov	r1, r8
 8004086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800408a:	4641      	mov	r1, r8
 800408c:	008a      	lsls	r2, r1, #2
 800408e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004092:	f7fc fce3 	bl	8000a5c <__aeabi_uldivmod>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4611      	mov	r1, r2
 800409c:	4b38      	ldr	r3, [pc, #224]	; (8004180 <UART_SetConfig+0x4e4>)
 800409e:	fba3 2301 	umull	r2, r3, r3, r1
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	2264      	movs	r2, #100	; 0x64
 80040a6:	fb02 f303 	mul.w	r3, r2, r3
 80040aa:	1acb      	subs	r3, r1, r3
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	3332      	adds	r3, #50	; 0x32
 80040b0:	4a33      	ldr	r2, [pc, #204]	; (8004180 <UART_SetConfig+0x4e4>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040bc:	441c      	add	r4, r3
 80040be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040c2:	2200      	movs	r2, #0
 80040c4:	673b      	str	r3, [r7, #112]	; 0x70
 80040c6:	677a      	str	r2, [r7, #116]	; 0x74
 80040c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80040cc:	4642      	mov	r2, r8
 80040ce:	464b      	mov	r3, r9
 80040d0:	1891      	adds	r1, r2, r2
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	415b      	adcs	r3, r3
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040dc:	4641      	mov	r1, r8
 80040de:	1851      	adds	r1, r2, r1
 80040e0:	6039      	str	r1, [r7, #0]
 80040e2:	4649      	mov	r1, r9
 80040e4:	414b      	adcs	r3, r1
 80040e6:	607b      	str	r3, [r7, #4]
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040f4:	4659      	mov	r1, fp
 80040f6:	00cb      	lsls	r3, r1, #3
 80040f8:	4651      	mov	r1, sl
 80040fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040fe:	4651      	mov	r1, sl
 8004100:	00ca      	lsls	r2, r1, #3
 8004102:	4610      	mov	r0, r2
 8004104:	4619      	mov	r1, r3
 8004106:	4603      	mov	r3, r0
 8004108:	4642      	mov	r2, r8
 800410a:	189b      	adds	r3, r3, r2
 800410c:	66bb      	str	r3, [r7, #104]	; 0x68
 800410e:	464b      	mov	r3, r9
 8004110:	460a      	mov	r2, r1
 8004112:	eb42 0303 	adc.w	r3, r2, r3
 8004116:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	663b      	str	r3, [r7, #96]	; 0x60
 8004122:	667a      	str	r2, [r7, #100]	; 0x64
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004130:	4649      	mov	r1, r9
 8004132:	008b      	lsls	r3, r1, #2
 8004134:	4641      	mov	r1, r8
 8004136:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800413a:	4641      	mov	r1, r8
 800413c:	008a      	lsls	r2, r1, #2
 800413e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004142:	f7fc fc8b 	bl	8000a5c <__aeabi_uldivmod>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4b0d      	ldr	r3, [pc, #52]	; (8004180 <UART_SetConfig+0x4e4>)
 800414c:	fba3 1302 	umull	r1, r3, r3, r2
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	2164      	movs	r1, #100	; 0x64
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	3332      	adds	r3, #50	; 0x32
 800415e:	4a08      	ldr	r2, [pc, #32]	; (8004180 <UART_SetConfig+0x4e4>)
 8004160:	fba2 2303 	umull	r2, r3, r2, r3
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	f003 020f 	and.w	r2, r3, #15
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4422      	add	r2, r4
 8004172:	609a      	str	r2, [r3, #8]
}
 8004174:	bf00      	nop
 8004176:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800417a:	46bd      	mov	sp, r7
 800417c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004180:	51eb851f 	.word	0x51eb851f

08004184 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004196:	2b84      	cmp	r3, #132	; 0x84
 8004198:	d005      	beq.n	80041a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800419a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4413      	add	r3, r2
 80041a2:	3303      	adds	r3, #3
 80041a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80041a6:	68fb      	ldr	r3, [r7, #12]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80041b8:	f000 ffe6 	bl	8005188 <vTaskStartScheduler>
  
  return osOK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80041c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c4:	b089      	sub	sp, #36	; 0x24
 80041c6:	af04      	add	r7, sp, #16
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d020      	beq.n	8004216 <osThreadCreate+0x54>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01c      	beq.n	8004216 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685c      	ldr	r4, [r3, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691e      	ldr	r6, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff ffc8 	bl	8004184 <makeFreeRtosPriority>
 80041f4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041fe:	9202      	str	r2, [sp, #8]
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	9100      	str	r1, [sp, #0]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	4632      	mov	r2, r6
 8004208:	4629      	mov	r1, r5
 800420a:	4620      	mov	r0, r4
 800420c:	f000 fdf4 	bl	8004df8 <xTaskCreateStatic>
 8004210:	4603      	mov	r3, r0
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	e01c      	b.n	8004250 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685c      	ldr	r4, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004222:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff ffaa 	bl	8004184 <makeFreeRtosPriority>
 8004230:	4602      	mov	r2, r0
 8004232:	f107 030c 	add.w	r3, r7, #12
 8004236:	9301      	str	r3, [sp, #4]
 8004238:	9200      	str	r2, [sp, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	4632      	mov	r2, r6
 800423e:	4629      	mov	r1, r5
 8004240:	4620      	mov	r0, r4
 8004242:	f000 fe36 	bl	8004eb2 <xTaskCreate>
 8004246:	4603      	mov	r3, r0
 8004248:	2b01      	cmp	r3, #1
 800424a:	d001      	beq.n	8004250 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800424c:	2300      	movs	r3, #0
 800424e:	e000      	b.n	8004252 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004250:	68fb      	ldr	r3, [r7, #12]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800425a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <osDelay+0x16>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	e000      	b.n	8004272 <osDelay+0x18>
 8004270:	2301      	movs	r3, #1
 8004272:	4618      	mov	r0, r3
 8004274:	f000 ff54 	bl	8005120 <vTaskDelay>
  
  return osOK;
 8004278:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f103 0208 	add.w	r2, r3, #8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f04f 32ff 	mov.w	r2, #4294967295
 800429a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f103 0208 	add.w	r2, r3, #8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f103 0208 	add.w	r2, r3, #8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	601a      	str	r2, [r3, #0]
}
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433a:	d103      	bne.n	8004344 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	e00c      	b.n	800435e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3308      	adds	r3, #8
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	e002      	b.n	8004352 <vListInsert+0x2e>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	429a      	cmp	r2, r3
 800435c:	d2f6      	bcs.n	800434c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	601a      	str	r2, [r3, #0]
}
 800438a:	bf00      	nop
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004396:	b480      	push	{r7}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6892      	ldr	r2, [r2, #8]
 80043ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6852      	ldr	r2, [r2, #4]
 80043b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d103      	bne.n	80043ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	1e5a      	subs	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004416:	f001 fe05 	bl	8006024 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	68f9      	ldr	r1, [r7, #12]
 8004424:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004426:	fb01 f303 	mul.w	r3, r1, r3
 800442a:	441a      	add	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004446:	3b01      	subs	r3, #1
 8004448:	68f9      	ldr	r1, [r7, #12]
 800444a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	441a      	add	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	22ff      	movs	r2, #255	; 0xff
 800445a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	22ff      	movs	r2, #255	; 0xff
 8004462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d114      	bne.n	8004496 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01a      	beq.n	80044aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3310      	adds	r3, #16
 8004478:	4618      	mov	r0, r3
 800447a:	f001 f8c7 	bl	800560c <xTaskRemoveFromEventList>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d012      	beq.n	80044aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004484:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <xQueueGenericReset+0xcc>)
 8004486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	e009      	b.n	80044aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3310      	adds	r3, #16
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fef1 	bl	8004282 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3324      	adds	r3, #36	; 0x24
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff feec 	bl	8004282 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044aa:	f001 fdeb 	bl	8006084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044ae:	2301      	movs	r3, #1
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08a      	sub	sp, #40	; 0x28
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	4613      	mov	r3, r2
 80044c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10a      	bne.n	80044e6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	613b      	str	r3, [r7, #16]
}
 80044e2:	bf00      	nop
 80044e4:	e7fe      	b.n	80044e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	3348      	adds	r3, #72	; 0x48
 80044f4:	4618      	mov	r0, r3
 80044f6:	f001 fe77 	bl	80061e8 <pvPortMalloc>
 80044fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d011      	beq.n	8004526 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	3348      	adds	r3, #72	; 0x48
 800450a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004514:	79fa      	ldrb	r2, [r7, #7]
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	4613      	mov	r3, r2
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	68b9      	ldr	r1, [r7, #8]
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f805 	bl	8004530 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004526:	69bb      	ldr	r3, [r7, #24]
	}
 8004528:	4618      	mov	r0, r3
 800452a:	3720      	adds	r7, #32
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d103      	bne.n	800454c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	e002      	b.n	8004552 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800455e:	2101      	movs	r1, #1
 8004560:	69b8      	ldr	r0, [r7, #24]
 8004562:	f7ff ff43 	bl	80043ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00e      	beq.n	800459a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800458e:	2300      	movs	r3, #0
 8004590:	2200      	movs	r2, #0
 8004592:	2100      	movs	r1, #0
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f81d 	bl	80045d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800459a:	bf00      	nop
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b086      	sub	sp, #24
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	4603      	mov	r3, r0
 80045aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80045ac:	2301      	movs	r3, #1
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	2300      	movs	r3, #0
 80045b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80045b4:	79fb      	ldrb	r3, [r7, #7]
 80045b6:	461a      	mov	r2, r3
 80045b8:	6939      	ldr	r1, [r7, #16]
 80045ba:	6978      	ldr	r0, [r7, #20]
 80045bc:	f7ff ff7e 	bl	80044bc <xQueueGenericCreate>
 80045c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f7ff ffd3 	bl	800456e <prvInitialiseMutex>

		return xNewQueue;
 80045c8:	68fb      	ldr	r3, [r7, #12]
	}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08e      	sub	sp, #56	; 0x38
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045e2:	2300      	movs	r3, #0
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <xQueueGenericSend+0x32>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d103      	bne.n	8004614 <xQueueGenericSend+0x40>
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <xQueueGenericSend+0x44>
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <xQueueGenericSend+0x46>
 8004618:	2300      	movs	r3, #0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10a      	bne.n	8004634 <xQueueGenericSend+0x60>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004630:	bf00      	nop
 8004632:	e7fe      	b.n	8004632 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d103      	bne.n	8004642 <xQueueGenericSend+0x6e>
 800463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <xQueueGenericSend+0x72>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <xQueueGenericSend+0x74>
 8004646:	2300      	movs	r3, #0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <xQueueGenericSend+0x8e>
	__asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	623b      	str	r3, [r7, #32]
}
 800465e:	bf00      	nop
 8004660:	e7fe      	b.n	8004660 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004662:	f001 f98f 	bl	8005984 <xTaskGetSchedulerState>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d102      	bne.n	8004672 <xQueueGenericSend+0x9e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <xQueueGenericSend+0xa2>
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <xQueueGenericSend+0xa4>
 8004676:	2300      	movs	r3, #0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10a      	bne.n	8004692 <xQueueGenericSend+0xbe>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	61fb      	str	r3, [r7, #28]
}
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004692:	f001 fcc7 	bl	8006024 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	429a      	cmp	r2, r3
 80046a0:	d302      	bcc.n	80046a8 <xQueueGenericSend+0xd4>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d129      	bne.n	80046fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ae:	f000 fa93 	bl	8004bd8 <prvCopyDataToQueue>
 80046b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d010      	beq.n	80046de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	3324      	adds	r3, #36	; 0x24
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 ffa3 	bl	800560c <xTaskRemoveFromEventList>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d013      	beq.n	80046f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046cc:	4b3f      	ldr	r3, [pc, #252]	; (80047cc <xQueueGenericSend+0x1f8>)
 80046ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	e00a      	b.n	80046f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046e4:	4b39      	ldr	r3, [pc, #228]	; (80047cc <xQueueGenericSend+0x1f8>)
 80046e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046f4:	f001 fcc6 	bl	8006084 <vPortExitCritical>
				return pdPASS;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e063      	b.n	80047c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004702:	f001 fcbf 	bl	8006084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004706:	2300      	movs	r3, #0
 8004708:	e05c      	b.n	80047c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800470a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470c:	2b00      	cmp	r3, #0
 800470e:	d106      	bne.n	800471e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004710:	f107 0314 	add.w	r3, r7, #20
 8004714:	4618      	mov	r0, r3
 8004716:	f000 ffdb 	bl	80056d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800471a:	2301      	movs	r3, #1
 800471c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800471e:	f001 fcb1 	bl	8006084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004722:	f000 fd91 	bl	8005248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004726:	f001 fc7d 	bl	8006024 <vPortEnterCritical>
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004730:	b25b      	sxtb	r3, r3
 8004732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004736:	d103      	bne.n	8004740 <xQueueGenericSend+0x16c>
 8004738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004746:	b25b      	sxtb	r3, r3
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d103      	bne.n	8004756 <xQueueGenericSend+0x182>
 800474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004756:	f001 fc95 	bl	8006084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800475a:	1d3a      	adds	r2, r7, #4
 800475c:	f107 0314 	add.w	r3, r7, #20
 8004760:	4611      	mov	r1, r2
 8004762:	4618      	mov	r0, r3
 8004764:	f000 ffca 	bl	80056fc <xTaskCheckForTimeOut>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d124      	bne.n	80047b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800476e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004770:	f000 fb2a 	bl	8004dc8 <prvIsQueueFull>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d018      	beq.n	80047ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	3310      	adds	r3, #16
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	4611      	mov	r1, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f000 ff1e 	bl	80055c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800478a:	f000 fab5 	bl	8004cf8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800478e:	f000 fd69 	bl	8005264 <xTaskResumeAll>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	f47f af7c 	bne.w	8004692 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800479a:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <xQueueGenericSend+0x1f8>)
 800479c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	e772      	b.n	8004692 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ae:	f000 faa3 	bl	8004cf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047b2:	f000 fd57 	bl	8005264 <xTaskResumeAll>
 80047b6:	e76c      	b.n	8004692 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ba:	f000 fa9d 	bl	8004cf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047be:	f000 fd51 	bl	8005264 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3738      	adds	r7, #56	; 0x38
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	e000ed04 	.word	0xe000ed04

080047d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08c      	sub	sp, #48	; 0x30
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80047dc:	2300      	movs	r3, #0
 80047de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <xQueueReceive+0x30>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	623b      	str	r3, [r7, #32]
}
 80047fc:	bf00      	nop
 80047fe:	e7fe      	b.n	80047fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d103      	bne.n	800480e <xQueueReceive+0x3e>
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <xQueueReceive+0x42>
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <xQueueReceive+0x44>
 8004812:	2300      	movs	r3, #0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10a      	bne.n	800482e <xQueueReceive+0x5e>
	__asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	61fb      	str	r3, [r7, #28]
}
 800482a:	bf00      	nop
 800482c:	e7fe      	b.n	800482c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800482e:	f001 f8a9 	bl	8005984 <xTaskGetSchedulerState>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d102      	bne.n	800483e <xQueueReceive+0x6e>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <xQueueReceive+0x72>
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <xQueueReceive+0x74>
 8004842:	2300      	movs	r3, #0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10a      	bne.n	800485e <xQueueReceive+0x8e>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	61bb      	str	r3, [r7, #24]
}
 800485a:	bf00      	nop
 800485c:	e7fe      	b.n	800485c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800485e:	f001 fbe1 	bl	8006024 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01f      	beq.n	80048ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004872:	f000 fa1b 	bl	8004cac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	1e5a      	subs	r2, r3, #1
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00f      	beq.n	80048a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004888:	3310      	adds	r3, #16
 800488a:	4618      	mov	r0, r3
 800488c:	f000 febe 	bl	800560c <xTaskRemoveFromEventList>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004896:	4b3d      	ldr	r3, [pc, #244]	; (800498c <xQueueReceive+0x1bc>)
 8004898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048a6:	f001 fbed 	bl	8006084 <vPortExitCritical>
				return pdPASS;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e069      	b.n	8004982 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d103      	bne.n	80048bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048b4:	f001 fbe6 	bl	8006084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048b8:	2300      	movs	r3, #0
 80048ba:	e062      	b.n	8004982 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048c2:	f107 0310 	add.w	r3, r7, #16
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 ff02 	bl	80056d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048cc:	2301      	movs	r3, #1
 80048ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048d0:	f001 fbd8 	bl	8006084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048d4:	f000 fcb8 	bl	8005248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048d8:	f001 fba4 	bl	8006024 <vPortEnterCritical>
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048e2:	b25b      	sxtb	r3, r3
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e8:	d103      	bne.n	80048f2 <xQueueReceive+0x122>
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048f8:	b25b      	sxtb	r3, r3
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fe:	d103      	bne.n	8004908 <xQueueReceive+0x138>
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004908:	f001 fbbc 	bl	8006084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800490c:	1d3a      	adds	r2, r7, #4
 800490e:	f107 0310 	add.w	r3, r7, #16
 8004912:	4611      	mov	r1, r2
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fef1 	bl	80056fc <xTaskCheckForTimeOut>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d123      	bne.n	8004968 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004922:	f000 fa3b 	bl	8004d9c <prvIsQueueEmpty>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d017      	beq.n	800495c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	3324      	adds	r3, #36	; 0x24
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	4611      	mov	r1, r2
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fe45 	bl	80055c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800493a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800493c:	f000 f9dc 	bl	8004cf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004940:	f000 fc90 	bl	8005264 <xTaskResumeAll>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d189      	bne.n	800485e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <xQueueReceive+0x1bc>)
 800494c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	e780      	b.n	800485e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800495c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800495e:	f000 f9cb 	bl	8004cf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004962:	f000 fc7f 	bl	8005264 <xTaskResumeAll>
 8004966:	e77a      	b.n	800485e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800496a:	f000 f9c5 	bl	8004cf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800496e:	f000 fc79 	bl	8005264 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004974:	f000 fa12 	bl	8004d9c <prvIsQueueEmpty>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	f43f af6f 	beq.w	800485e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004980:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004982:	4618      	mov	r0, r3
 8004984:	3730      	adds	r7, #48	; 0x30
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	e000ed04 	.word	0xe000ed04

08004990 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08e      	sub	sp, #56	; 0x38
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800499a:	2300      	movs	r3, #0
 800499c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80049a2:	2300      	movs	r3, #0
 80049a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	623b      	str	r3, [r7, #32]
}
 80049be:	bf00      	nop
 80049c0:	e7fe      	b.n	80049c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	61fb      	str	r3, [r7, #28]
}
 80049dc:	bf00      	nop
 80049de:	e7fe      	b.n	80049de <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049e0:	f000 ffd0 	bl	8005984 <xTaskGetSchedulerState>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <xQueueSemaphoreTake+0x60>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <xQueueSemaphoreTake+0x64>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <xQueueSemaphoreTake+0x66>
 80049f4:	2300      	movs	r3, #0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10a      	bne.n	8004a10 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	61bb      	str	r3, [r7, #24]
}
 8004a0c:	bf00      	nop
 8004a0e:	e7fe      	b.n	8004a0e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a10:	f001 fb08 	bl	8006024 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d024      	beq.n	8004a6a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	1e5a      	subs	r2, r3, #1
 8004a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004a30:	f001 f950 	bl	8005cd4 <pvTaskIncrementMutexHeldCount>
 8004a34:	4602      	mov	r2, r0
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00f      	beq.n	8004a62 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	3310      	adds	r3, #16
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fde0 	bl	800560c <xTaskRemoveFromEventList>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a52:	4b54      	ldr	r3, [pc, #336]	; (8004ba4 <xQueueSemaphoreTake+0x214>)
 8004a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a62:	f001 fb0f 	bl	8006084 <vPortExitCritical>
				return pdPASS;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e097      	b.n	8004b9a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d111      	bne.n	8004a94 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	617b      	str	r3, [r7, #20]
}
 8004a88:	bf00      	nop
 8004a8a:	e7fe      	b.n	8004a8a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004a8c:	f001 fafa 	bl	8006084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a90:	2300      	movs	r3, #0
 8004a92:	e082      	b.n	8004b9a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a9a:	f107 030c 	add.w	r3, r7, #12
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fe16 	bl	80056d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004aa8:	f001 faec 	bl	8006084 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004aac:	f000 fbcc 	bl	8005248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ab0:	f001 fab8 	bl	8006024 <vPortEnterCritical>
 8004ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aba:	b25b      	sxtb	r3, r3
 8004abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac0:	d103      	bne.n	8004aca <xQueueSemaphoreTake+0x13a>
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ad0:	b25b      	sxtb	r3, r3
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad6:	d103      	bne.n	8004ae0 <xQueueSemaphoreTake+0x150>
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ae0:	f001 fad0 	bl	8006084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ae4:	463a      	mov	r2, r7
 8004ae6:	f107 030c 	add.w	r3, r7, #12
 8004aea:	4611      	mov	r1, r2
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fe05 	bl	80056fc <xTaskCheckForTimeOut>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d132      	bne.n	8004b5e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004af8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004afa:	f000 f94f 	bl	8004d9c <prvIsQueueEmpty>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d026      	beq.n	8004b52 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d109      	bne.n	8004b20 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004b0c:	f001 fa8a 	bl	8006024 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 ff53 	bl	80059c0 <xTaskPriorityInherit>
 8004b1a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004b1c:	f001 fab2 	bl	8006084 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	3324      	adds	r3, #36	; 0x24
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	4611      	mov	r1, r2
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fd4b 	bl	80055c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b30:	f000 f8e2 	bl	8004cf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b34:	f000 fb96 	bl	8005264 <xTaskResumeAll>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f47f af68 	bne.w	8004a10 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004b40:	4b18      	ldr	r3, [pc, #96]	; (8004ba4 <xQueueSemaphoreTake+0x214>)
 8004b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	e75e      	b.n	8004a10 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004b52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b54:	f000 f8d0 	bl	8004cf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b58:	f000 fb84 	bl	8005264 <xTaskResumeAll>
 8004b5c:	e758      	b.n	8004a10 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004b5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b60:	f000 f8ca 	bl	8004cf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b64:	f000 fb7e 	bl	8005264 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b6a:	f000 f917 	bl	8004d9c <prvIsQueueEmpty>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f43f af4d 	beq.w	8004a10 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00d      	beq.n	8004b98 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004b7c:	f001 fa52 	bl	8006024 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004b80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b82:	f000 f811 	bl	8004ba8 <prvGetDisinheritPriorityAfterTimeout>
 8004b86:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f001 f812 	bl	8005bb8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004b94:	f001 fa76 	bl	8006084 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3738      	adds	r7, #56	; 0x38
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	e000ed04 	.word	0xe000ed04

08004ba8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d006      	beq.n	8004bc6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f1c3 0307 	rsb	r3, r3, #7
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e001      	b.n	8004bca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004bca:	68fb      	ldr	r3, [r7, #12]
	}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10d      	bne.n	8004c12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d14d      	bne.n	8004c9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 ff52 	bl	8005aac <xTaskPriorityDisinherit>
 8004c08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	609a      	str	r2, [r3, #8]
 8004c10:	e043      	b.n	8004c9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d119      	bne.n	8004c4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6858      	ldr	r0, [r3, #4]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	461a      	mov	r2, r3
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	f003 fd72 	bl	800870c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c30:	441a      	add	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d32b      	bcc.n	8004c9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	605a      	str	r2, [r3, #4]
 8004c4a:	e026      	b.n	8004c9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	68d8      	ldr	r0, [r3, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	461a      	mov	r2, r3
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	f003 fd58 	bl	800870c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	425b      	negs	r3, r3
 8004c66:	441a      	add	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d207      	bcs.n	8004c88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	425b      	negs	r3, r3
 8004c82:	441a      	add	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d105      	bne.n	8004c9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ca2:	697b      	ldr	r3, [r7, #20]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d018      	beq.n	8004cf0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	441a      	add	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d303      	bcc.n	8004ce0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68d9      	ldr	r1, [r3, #12]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6838      	ldr	r0, [r7, #0]
 8004cec:	f003 fd0e 	bl	800870c <memcpy>
	}
}
 8004cf0:	bf00      	nop
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d00:	f001 f990 	bl	8006024 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d0c:	e011      	b.n	8004d32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d012      	beq.n	8004d3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3324      	adds	r3, #36	; 0x24
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fc76 	bl	800560c <xTaskRemoveFromEventList>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d26:	f000 fd4b 	bl	80057c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	dce9      	bgt.n	8004d0e <prvUnlockQueue+0x16>
 8004d3a:	e000      	b.n	8004d3e <prvUnlockQueue+0x46>
					break;
 8004d3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	22ff      	movs	r2, #255	; 0xff
 8004d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d46:	f001 f99d 	bl	8006084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d4a:	f001 f96b 	bl	8006024 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d56:	e011      	b.n	8004d7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d012      	beq.n	8004d86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3310      	adds	r3, #16
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 fc51 	bl	800560c <xTaskRemoveFromEventList>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d70:	f000 fd26 	bl	80057c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d74:	7bbb      	ldrb	r3, [r7, #14]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	dce9      	bgt.n	8004d58 <prvUnlockQueue+0x60>
 8004d84:	e000      	b.n	8004d88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	22ff      	movs	r2, #255	; 0xff
 8004d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d90:	f001 f978 	bl	8006084 <vPortExitCritical>
}
 8004d94:	bf00      	nop
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004da4:	f001 f93e 	bl	8006024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004db0:	2301      	movs	r3, #1
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	e001      	b.n	8004dba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dba:	f001 f963 	bl	8006084 <vPortExitCritical>

	return xReturn;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004dd0:	f001 f928 	bl	8006024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d102      	bne.n	8004de6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004de0:	2301      	movs	r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	e001      	b.n	8004dea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dea:	f001 f94b 	bl	8006084 <vPortExitCritical>

	return xReturn;
 8004dee:	68fb      	ldr	r3, [r7, #12]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08e      	sub	sp, #56	; 0x38
 8004dfc:	af04      	add	r7, sp, #16
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	623b      	str	r3, [r7, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	e7fe      	b.n	8004e20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <xTaskCreateStatic+0x46>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	61fb      	str	r3, [r7, #28]
}
 8004e3a:	bf00      	nop
 8004e3c:	e7fe      	b.n	8004e3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e3e:	2354      	movs	r3, #84	; 0x54
 8004e40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b54      	cmp	r3, #84	; 0x54
 8004e46:	d00a      	beq.n	8004e5e <xTaskCreateStatic+0x66>
	__asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	61bb      	str	r3, [r7, #24]
}
 8004e5a:	bf00      	nop
 8004e5c:	e7fe      	b.n	8004e5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01e      	beq.n	8004ea4 <xTaskCreateStatic+0xac>
 8004e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01b      	beq.n	8004ea4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	2202      	movs	r2, #2
 8004e7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e7e:	2300      	movs	r3, #0
 8004e80:	9303      	str	r3, [sp, #12]
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	9302      	str	r3, [sp, #8]
 8004e86:	f107 0314 	add.w	r3, r7, #20
 8004e8a:	9301      	str	r3, [sp, #4]
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f850 	bl	8004f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e9e:	f000 f8d5 	bl	800504c <prvAddNewTaskToReadyList>
 8004ea2:	e001      	b.n	8004ea8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ea8:	697b      	ldr	r3, [r7, #20]
	}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3728      	adds	r7, #40	; 0x28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b08c      	sub	sp, #48	; 0x30
 8004eb6:	af04      	add	r7, sp, #16
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	603b      	str	r3, [r7, #0]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f001 f98e 	bl	80061e8 <pvPortMalloc>
 8004ecc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00e      	beq.n	8004ef2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ed4:	2054      	movs	r0, #84	; 0x54
 8004ed6:	f001 f987 	bl	80061e8 <pvPortMalloc>
 8004eda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ee8:	e005      	b.n	8004ef6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004eea:	6978      	ldr	r0, [r7, #20]
 8004eec:	f001 fa48 	bl	8006380 <vPortFree>
 8004ef0:	e001      	b.n	8004ef6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d017      	beq.n	8004f2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f04:	88fa      	ldrh	r2, [r7, #6]
 8004f06:	2300      	movs	r3, #0
 8004f08:	9303      	str	r3, [sp, #12]
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	9302      	str	r3, [sp, #8]
 8004f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f80e 	bl	8004f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f20:	69f8      	ldr	r0, [r7, #28]
 8004f22:	f000 f893 	bl	800504c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f26:	2301      	movs	r3, #1
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	e002      	b.n	8004f32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f32:	69bb      	ldr	r3, [r7, #24]
	}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f54:	3b01      	subs	r3, #1
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f023 0307 	bic.w	r3, r3, #7
 8004f62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	617b      	str	r3, [r7, #20]
}
 8004f80:	bf00      	nop
 8004f82:	e7fe      	b.n	8004f82 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d01f      	beq.n	8004fca <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61fb      	str	r3, [r7, #28]
 8004f8e:	e012      	b.n	8004fb6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4413      	add	r3, r2
 8004f96:	7819      	ldrb	r1, [r3, #0]
 8004f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	3334      	adds	r3, #52	; 0x34
 8004fa0:	460a      	mov	r2, r1
 8004fa2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d006      	beq.n	8004fbe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	2b0f      	cmp	r3, #15
 8004fba:	d9e9      	bls.n	8004f90 <prvInitialiseNewTask+0x54>
 8004fbc:	e000      	b.n	8004fc0 <prvInitialiseNewTask+0x84>
			{
				break;
 8004fbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fc8:	e003      	b.n	8004fd2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	2b06      	cmp	r3, #6
 8004fd6:	d901      	bls.n	8004fdc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fd8:	2306      	movs	r3, #6
 8004fda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fe0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fe6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	2200      	movs	r2, #0
 8004fec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7ff f965 	bl	80042c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	3318      	adds	r3, #24
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff f960 	bl	80042c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005006:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500a:	f1c3 0207 	rsb	r2, r3, #7
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005016:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	2200      	movs	r2, #0
 800501c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	68f9      	ldr	r1, [r7, #12]
 800502a:	69b8      	ldr	r0, [r7, #24]
 800502c:	f000 fecc 	bl	8005dc8 <pxPortInitialiseStack>
 8005030:	4602      	mov	r2, r0
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005040:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005042:	bf00      	nop
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005054:	f000 ffe6 	bl	8006024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005058:	4b2a      	ldr	r3, [pc, #168]	; (8005104 <prvAddNewTaskToReadyList+0xb8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3301      	adds	r3, #1
 800505e:	4a29      	ldr	r2, [pc, #164]	; (8005104 <prvAddNewTaskToReadyList+0xb8>)
 8005060:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005062:	4b29      	ldr	r3, [pc, #164]	; (8005108 <prvAddNewTaskToReadyList+0xbc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800506a:	4a27      	ldr	r2, [pc, #156]	; (8005108 <prvAddNewTaskToReadyList+0xbc>)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005070:	4b24      	ldr	r3, [pc, #144]	; (8005104 <prvAddNewTaskToReadyList+0xb8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d110      	bne.n	800509a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005078:	f000 fbc6 	bl	8005808 <prvInitialiseTaskLists>
 800507c:	e00d      	b.n	800509a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800507e:	4b23      	ldr	r3, [pc, #140]	; (800510c <prvAddNewTaskToReadyList+0xc0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005086:	4b20      	ldr	r3, [pc, #128]	; (8005108 <prvAddNewTaskToReadyList+0xbc>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	429a      	cmp	r2, r3
 8005092:	d802      	bhi.n	800509a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005094:	4a1c      	ldr	r2, [pc, #112]	; (8005108 <prvAddNewTaskToReadyList+0xbc>)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800509a:	4b1d      	ldr	r3, [pc, #116]	; (8005110 <prvAddNewTaskToReadyList+0xc4>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3301      	adds	r3, #1
 80050a0:	4a1b      	ldr	r2, [pc, #108]	; (8005110 <prvAddNewTaskToReadyList+0xc4>)
 80050a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	2201      	movs	r2, #1
 80050aa:	409a      	lsls	r2, r3
 80050ac:	4b19      	ldr	r3, [pc, #100]	; (8005114 <prvAddNewTaskToReadyList+0xc8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	4a18      	ldr	r2, [pc, #96]	; (8005114 <prvAddNewTaskToReadyList+0xc8>)
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4a15      	ldr	r2, [pc, #84]	; (8005118 <prvAddNewTaskToReadyList+0xcc>)
 80050c4:	441a      	add	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3304      	adds	r3, #4
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f7ff f905 	bl	80042dc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050d2:	f000 ffd7 	bl	8006084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050d6:	4b0d      	ldr	r3, [pc, #52]	; (800510c <prvAddNewTaskToReadyList+0xc0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00e      	beq.n	80050fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050de:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <prvAddNewTaskToReadyList+0xbc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d207      	bcs.n	80050fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <prvAddNewTaskToReadyList+0xd0>)
 80050ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050fc:	bf00      	nop
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	200001b4 	.word	0x200001b4
 8005108:	200000b4 	.word	0x200000b4
 800510c:	200001c0 	.word	0x200001c0
 8005110:	200001d0 	.word	0x200001d0
 8005114:	200001bc 	.word	0x200001bc
 8005118:	200000b8 	.word	0x200000b8
 800511c:	e000ed04 	.word	0xe000ed04

08005120 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d017      	beq.n	8005162 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005132:	4b13      	ldr	r3, [pc, #76]	; (8005180 <vTaskDelay+0x60>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <vTaskDelay+0x30>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	60bb      	str	r3, [r7, #8]
}
 800514c:	bf00      	nop
 800514e:	e7fe      	b.n	800514e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005150:	f000 f87a 	bl	8005248 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005154:	2100      	movs	r1, #0
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fdd0 	bl	8005cfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800515c:	f000 f882 	bl	8005264 <xTaskResumeAll>
 8005160:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d107      	bne.n	8005178 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005168:	4b06      	ldr	r3, [pc, #24]	; (8005184 <vTaskDelay+0x64>)
 800516a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005178:	bf00      	nop
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	200001dc 	.word	0x200001dc
 8005184:	e000ed04 	.word	0xe000ed04

08005188 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800518e:	2300      	movs	r3, #0
 8005190:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005192:	2300      	movs	r3, #0
 8005194:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005196:	463a      	mov	r2, r7
 8005198:	1d39      	adds	r1, r7, #4
 800519a:	f107 0308 	add.w	r3, r7, #8
 800519e:	4618      	mov	r0, r3
 80051a0:	f001 faa2 	bl	80066e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	9202      	str	r2, [sp, #8]
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	2300      	movs	r3, #0
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	2300      	movs	r3, #0
 80051b4:	460a      	mov	r2, r1
 80051b6:	491e      	ldr	r1, [pc, #120]	; (8005230 <vTaskStartScheduler+0xa8>)
 80051b8:	481e      	ldr	r0, [pc, #120]	; (8005234 <vTaskStartScheduler+0xac>)
 80051ba:	f7ff fe1d 	bl	8004df8 <xTaskCreateStatic>
 80051be:	4603      	mov	r3, r0
 80051c0:	4a1d      	ldr	r2, [pc, #116]	; (8005238 <vTaskStartScheduler+0xb0>)
 80051c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051c4:	4b1c      	ldr	r3, [pc, #112]	; (8005238 <vTaskStartScheduler+0xb0>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051cc:	2301      	movs	r3, #1
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	e001      	b.n	80051d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d116      	bne.n	800520a <vTaskStartScheduler+0x82>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	613b      	str	r3, [r7, #16]
}
 80051ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051f0:	4b12      	ldr	r3, [pc, #72]	; (800523c <vTaskStartScheduler+0xb4>)
 80051f2:	f04f 32ff 	mov.w	r2, #4294967295
 80051f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051f8:	4b11      	ldr	r3, [pc, #68]	; (8005240 <vTaskStartScheduler+0xb8>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051fe:	4b11      	ldr	r3, [pc, #68]	; (8005244 <vTaskStartScheduler+0xbc>)
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005204:	f000 fe6c 	bl	8005ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005208:	e00e      	b.n	8005228 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005210:	d10a      	bne.n	8005228 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	60fb      	str	r3, [r7, #12]
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <vTaskStartScheduler+0x9e>
}
 8005228:	bf00      	nop
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	08008fc4 	.word	0x08008fc4
 8005234:	080057d9 	.word	0x080057d9
 8005238:	200001d8 	.word	0x200001d8
 800523c:	200001d4 	.word	0x200001d4
 8005240:	200001c0 	.word	0x200001c0
 8005244:	200001b8 	.word	0x200001b8

08005248 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800524c:	4b04      	ldr	r3, [pc, #16]	; (8005260 <vTaskSuspendAll+0x18>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3301      	adds	r3, #1
 8005252:	4a03      	ldr	r2, [pc, #12]	; (8005260 <vTaskSuspendAll+0x18>)
 8005254:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005256:	bf00      	nop
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	200001dc 	.word	0x200001dc

08005264 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800526e:	2300      	movs	r3, #0
 8005270:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005272:	4b41      	ldr	r3, [pc, #260]	; (8005378 <xTaskResumeAll+0x114>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <xTaskResumeAll+0x2c>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	603b      	str	r3, [r7, #0]
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005290:	f000 fec8 	bl	8006024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005294:	4b38      	ldr	r3, [pc, #224]	; (8005378 <xTaskResumeAll+0x114>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3b01      	subs	r3, #1
 800529a:	4a37      	ldr	r2, [pc, #220]	; (8005378 <xTaskResumeAll+0x114>)
 800529c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800529e:	4b36      	ldr	r3, [pc, #216]	; (8005378 <xTaskResumeAll+0x114>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d161      	bne.n	800536a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052a6:	4b35      	ldr	r3, [pc, #212]	; (800537c <xTaskResumeAll+0x118>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d05d      	beq.n	800536a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052ae:	e02e      	b.n	800530e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b0:	4b33      	ldr	r3, [pc, #204]	; (8005380 <xTaskResumeAll+0x11c>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3318      	adds	r3, #24
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff f86a 	bl	8004396 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3304      	adds	r3, #4
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff f865 	bl	8004396 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	2201      	movs	r2, #1
 80052d2:	409a      	lsls	r2, r3
 80052d4:	4b2b      	ldr	r3, [pc, #172]	; (8005384 <xTaskResumeAll+0x120>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4313      	orrs	r3, r2
 80052da:	4a2a      	ldr	r2, [pc, #168]	; (8005384 <xTaskResumeAll+0x120>)
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4a27      	ldr	r2, [pc, #156]	; (8005388 <xTaskResumeAll+0x124>)
 80052ec:	441a      	add	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4619      	mov	r1, r3
 80052f4:	4610      	mov	r0, r2
 80052f6:	f7fe fff1 	bl	80042dc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fe:	4b23      	ldr	r3, [pc, #140]	; (800538c <xTaskResumeAll+0x128>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	429a      	cmp	r2, r3
 8005306:	d302      	bcc.n	800530e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005308:	4b21      	ldr	r3, [pc, #132]	; (8005390 <xTaskResumeAll+0x12c>)
 800530a:	2201      	movs	r2, #1
 800530c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800530e:	4b1c      	ldr	r3, [pc, #112]	; (8005380 <xTaskResumeAll+0x11c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1cc      	bne.n	80052b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800531c:	f000 fb12 	bl	8005944 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005320:	4b1c      	ldr	r3, [pc, #112]	; (8005394 <xTaskResumeAll+0x130>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d010      	beq.n	800534e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800532c:	f000 f836 	bl	800539c <xTaskIncrementTick>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005336:	4b16      	ldr	r3, [pc, #88]	; (8005390 <xTaskResumeAll+0x12c>)
 8005338:	2201      	movs	r2, #1
 800533a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3b01      	subs	r3, #1
 8005340:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1f1      	bne.n	800532c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005348:	4b12      	ldr	r3, [pc, #72]	; (8005394 <xTaskResumeAll+0x130>)
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800534e:	4b10      	ldr	r3, [pc, #64]	; (8005390 <xTaskResumeAll+0x12c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d009      	beq.n	800536a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005356:	2301      	movs	r3, #1
 8005358:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800535a:	4b0f      	ldr	r3, [pc, #60]	; (8005398 <xTaskResumeAll+0x134>)
 800535c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800536a:	f000 fe8b 	bl	8006084 <vPortExitCritical>

	return xAlreadyYielded;
 800536e:	68bb      	ldr	r3, [r7, #8]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	200001dc 	.word	0x200001dc
 800537c:	200001b4 	.word	0x200001b4
 8005380:	20000174 	.word	0x20000174
 8005384:	200001bc 	.word	0x200001bc
 8005388:	200000b8 	.word	0x200000b8
 800538c:	200000b4 	.word	0x200000b4
 8005390:	200001c8 	.word	0x200001c8
 8005394:	200001c4 	.word	0x200001c4
 8005398:	e000ed04 	.word	0xe000ed04

0800539c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053a2:	2300      	movs	r3, #0
 80053a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a6:	4b4e      	ldr	r3, [pc, #312]	; (80054e0 <xTaskIncrementTick+0x144>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f040 808e 	bne.w	80054cc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053b0:	4b4c      	ldr	r3, [pc, #304]	; (80054e4 <xTaskIncrementTick+0x148>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3301      	adds	r3, #1
 80053b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053b8:	4a4a      	ldr	r2, [pc, #296]	; (80054e4 <xTaskIncrementTick+0x148>)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d120      	bne.n	8005406 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80053c4:	4b48      	ldr	r3, [pc, #288]	; (80054e8 <xTaskIncrementTick+0x14c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	603b      	str	r3, [r7, #0]
}
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <xTaskIncrementTick+0x46>
 80053e4:	4b40      	ldr	r3, [pc, #256]	; (80054e8 <xTaskIncrementTick+0x14c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	4b40      	ldr	r3, [pc, #256]	; (80054ec <xTaskIncrementTick+0x150>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a3e      	ldr	r2, [pc, #248]	; (80054e8 <xTaskIncrementTick+0x14c>)
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	4a3e      	ldr	r2, [pc, #248]	; (80054ec <xTaskIncrementTick+0x150>)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	4b3d      	ldr	r3, [pc, #244]	; (80054f0 <xTaskIncrementTick+0x154>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3301      	adds	r3, #1
 80053fe:	4a3c      	ldr	r2, [pc, #240]	; (80054f0 <xTaskIncrementTick+0x154>)
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	f000 fa9f 	bl	8005944 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005406:	4b3b      	ldr	r3, [pc, #236]	; (80054f4 <xTaskIncrementTick+0x158>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	429a      	cmp	r2, r3
 800540e:	d348      	bcc.n	80054a2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005410:	4b35      	ldr	r3, [pc, #212]	; (80054e8 <xTaskIncrementTick+0x14c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d104      	bne.n	8005424 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800541a:	4b36      	ldr	r3, [pc, #216]	; (80054f4 <xTaskIncrementTick+0x158>)
 800541c:	f04f 32ff 	mov.w	r2, #4294967295
 8005420:	601a      	str	r2, [r3, #0]
					break;
 8005422:	e03e      	b.n	80054a2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005424:	4b30      	ldr	r3, [pc, #192]	; (80054e8 <xTaskIncrementTick+0x14c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	429a      	cmp	r2, r3
 800543a:	d203      	bcs.n	8005444 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800543c:	4a2d      	ldr	r2, [pc, #180]	; (80054f4 <xTaskIncrementTick+0x158>)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005442:	e02e      	b.n	80054a2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	3304      	adds	r3, #4
 8005448:	4618      	mov	r0, r3
 800544a:	f7fe ffa4 	bl	8004396 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005452:	2b00      	cmp	r3, #0
 8005454:	d004      	beq.n	8005460 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	3318      	adds	r3, #24
 800545a:	4618      	mov	r0, r3
 800545c:	f7fe ff9b 	bl	8004396 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	2201      	movs	r2, #1
 8005466:	409a      	lsls	r2, r3
 8005468:	4b23      	ldr	r3, [pc, #140]	; (80054f8 <xTaskIncrementTick+0x15c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4313      	orrs	r3, r2
 800546e:	4a22      	ldr	r2, [pc, #136]	; (80054f8 <xTaskIncrementTick+0x15c>)
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4a1f      	ldr	r2, [pc, #124]	; (80054fc <xTaskIncrementTick+0x160>)
 8005480:	441a      	add	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	3304      	adds	r3, #4
 8005486:	4619      	mov	r1, r3
 8005488:	4610      	mov	r0, r2
 800548a:	f7fe ff27 	bl	80042dc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005492:	4b1b      	ldr	r3, [pc, #108]	; (8005500 <xTaskIncrementTick+0x164>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	429a      	cmp	r2, r3
 800549a:	d3b9      	bcc.n	8005410 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800549c:	2301      	movs	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054a0:	e7b6      	b.n	8005410 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054a2:	4b17      	ldr	r3, [pc, #92]	; (8005500 <xTaskIncrementTick+0x164>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a8:	4914      	ldr	r1, [pc, #80]	; (80054fc <xTaskIncrementTick+0x160>)
 80054aa:	4613      	mov	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	440b      	add	r3, r1
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d901      	bls.n	80054be <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80054ba:	2301      	movs	r3, #1
 80054bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80054be:	4b11      	ldr	r3, [pc, #68]	; (8005504 <xTaskIncrementTick+0x168>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d007      	beq.n	80054d6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80054c6:	2301      	movs	r3, #1
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	e004      	b.n	80054d6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80054cc:	4b0e      	ldr	r3, [pc, #56]	; (8005508 <xTaskIncrementTick+0x16c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3301      	adds	r3, #1
 80054d2:	4a0d      	ldr	r2, [pc, #52]	; (8005508 <xTaskIncrementTick+0x16c>)
 80054d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80054d6:	697b      	ldr	r3, [r7, #20]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	200001dc 	.word	0x200001dc
 80054e4:	200001b8 	.word	0x200001b8
 80054e8:	2000016c 	.word	0x2000016c
 80054ec:	20000170 	.word	0x20000170
 80054f0:	200001cc 	.word	0x200001cc
 80054f4:	200001d4 	.word	0x200001d4
 80054f8:	200001bc 	.word	0x200001bc
 80054fc:	200000b8 	.word	0x200000b8
 8005500:	200000b4 	.word	0x200000b4
 8005504:	200001c8 	.word	0x200001c8
 8005508:	200001c4 	.word	0x200001c4

0800550c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005512:	4b27      	ldr	r3, [pc, #156]	; (80055b0 <vTaskSwitchContext+0xa4>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800551a:	4b26      	ldr	r3, [pc, #152]	; (80055b4 <vTaskSwitchContext+0xa8>)
 800551c:	2201      	movs	r2, #1
 800551e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005520:	e03f      	b.n	80055a2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005522:	4b24      	ldr	r3, [pc, #144]	; (80055b4 <vTaskSwitchContext+0xa8>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005528:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <vTaskSwitchContext+0xac>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	fab3 f383 	clz	r3, r3
 8005534:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005536:	7afb      	ldrb	r3, [r7, #11]
 8005538:	f1c3 031f 	rsb	r3, r3, #31
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	491f      	ldr	r1, [pc, #124]	; (80055bc <vTaskSwitchContext+0xb0>)
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	4613      	mov	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	440b      	add	r3, r1
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10a      	bne.n	8005568 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	607b      	str	r3, [r7, #4]
}
 8005564:	bf00      	nop
 8005566:	e7fe      	b.n	8005566 <vTaskSwitchContext+0x5a>
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4a12      	ldr	r2, [pc, #72]	; (80055bc <vTaskSwitchContext+0xb0>)
 8005574:	4413      	add	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	605a      	str	r2, [r3, #4]
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	3308      	adds	r3, #8
 800558a:	429a      	cmp	r2, r3
 800558c:	d104      	bne.n	8005598 <vTaskSwitchContext+0x8c>
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	605a      	str	r2, [r3, #4]
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	4a08      	ldr	r2, [pc, #32]	; (80055c0 <vTaskSwitchContext+0xb4>)
 80055a0:	6013      	str	r3, [r2, #0]
}
 80055a2:	bf00      	nop
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	200001dc 	.word	0x200001dc
 80055b4:	200001c8 	.word	0x200001c8
 80055b8:	200001bc 	.word	0x200001bc
 80055bc:	200000b8 	.word	0x200000b8
 80055c0:	200000b4 	.word	0x200000b4

080055c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10a      	bne.n	80055ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	60fb      	str	r3, [r7, #12]
}
 80055e6:	bf00      	nop
 80055e8:	e7fe      	b.n	80055e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055ea:	4b07      	ldr	r3, [pc, #28]	; (8005608 <vTaskPlaceOnEventList+0x44>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3318      	adds	r3, #24
 80055f0:	4619      	mov	r1, r3
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fe fe96 	bl	8004324 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055f8:	2101      	movs	r1, #1
 80055fa:	6838      	ldr	r0, [r7, #0]
 80055fc:	f000 fb7e 	bl	8005cfc <prvAddCurrentTaskToDelayedList>
}
 8005600:	bf00      	nop
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	200000b4 	.word	0x200000b4

0800560c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10a      	bne.n	8005638 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	60fb      	str	r3, [r7, #12]
}
 8005634:	bf00      	nop
 8005636:	e7fe      	b.n	8005636 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	3318      	adds	r3, #24
 800563c:	4618      	mov	r0, r3
 800563e:	f7fe feaa 	bl	8004396 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005642:	4b1d      	ldr	r3, [pc, #116]	; (80056b8 <xTaskRemoveFromEventList+0xac>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d11c      	bne.n	8005684 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	3304      	adds	r3, #4
 800564e:	4618      	mov	r0, r3
 8005650:	f7fe fea1 	bl	8004396 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	2201      	movs	r2, #1
 800565a:	409a      	lsls	r2, r3
 800565c:	4b17      	ldr	r3, [pc, #92]	; (80056bc <xTaskRemoveFromEventList+0xb0>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4313      	orrs	r3, r2
 8005662:	4a16      	ldr	r2, [pc, #88]	; (80056bc <xTaskRemoveFromEventList+0xb0>)
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4a13      	ldr	r2, [pc, #76]	; (80056c0 <xTaskRemoveFromEventList+0xb4>)
 8005674:	441a      	add	r2, r3
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	3304      	adds	r3, #4
 800567a:	4619      	mov	r1, r3
 800567c:	4610      	mov	r0, r2
 800567e:	f7fe fe2d 	bl	80042dc <vListInsertEnd>
 8005682:	e005      	b.n	8005690 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	3318      	adds	r3, #24
 8005688:	4619      	mov	r1, r3
 800568a:	480e      	ldr	r0, [pc, #56]	; (80056c4 <xTaskRemoveFromEventList+0xb8>)
 800568c:	f7fe fe26 	bl	80042dc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005694:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <xTaskRemoveFromEventList+0xbc>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	429a      	cmp	r2, r3
 800569c:	d905      	bls.n	80056aa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800569e:	2301      	movs	r3, #1
 80056a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056a2:	4b0a      	ldr	r3, [pc, #40]	; (80056cc <xTaskRemoveFromEventList+0xc0>)
 80056a4:	2201      	movs	r2, #1
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e001      	b.n	80056ae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056ae:	697b      	ldr	r3, [r7, #20]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	200001dc 	.word	0x200001dc
 80056bc:	200001bc 	.word	0x200001bc
 80056c0:	200000b8 	.word	0x200000b8
 80056c4:	20000174 	.word	0x20000174
 80056c8:	200000b4 	.word	0x200000b4
 80056cc:	200001c8 	.word	0x200001c8

080056d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056d8:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <vTaskInternalSetTimeOutState+0x24>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056e0:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <vTaskInternalSetTimeOutState+0x28>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	605a      	str	r2, [r3, #4]
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	200001cc 	.word	0x200001cc
 80056f8:	200001b8 	.word	0x200001b8

080056fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	613b      	str	r3, [r7, #16]
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	60fb      	str	r3, [r7, #12]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800573e:	f000 fc71 	bl	8006024 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005742:	4b1d      	ldr	r3, [pc, #116]	; (80057b8 <xTaskCheckForTimeOut+0xbc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575a:	d102      	bne.n	8005762 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800575c:	2300      	movs	r3, #0
 800575e:	61fb      	str	r3, [r7, #28]
 8005760:	e023      	b.n	80057aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	4b15      	ldr	r3, [pc, #84]	; (80057bc <xTaskCheckForTimeOut+0xc0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d007      	beq.n	800577e <xTaskCheckForTimeOut+0x82>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	429a      	cmp	r2, r3
 8005776:	d302      	bcc.n	800577e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005778:	2301      	movs	r3, #1
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	e015      	b.n	80057aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	429a      	cmp	r2, r3
 8005786:	d20b      	bcs.n	80057a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	1ad2      	subs	r2, r2, r3
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff ff9b 	bl	80056d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800579a:	2300      	movs	r3, #0
 800579c:	61fb      	str	r3, [r7, #28]
 800579e:	e004      	b.n	80057aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057a6:	2301      	movs	r3, #1
 80057a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057aa:	f000 fc6b 	bl	8006084 <vPortExitCritical>

	return xReturn;
 80057ae:	69fb      	ldr	r3, [r7, #28]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3720      	adds	r7, #32
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	200001b8 	.word	0x200001b8
 80057bc:	200001cc 	.word	0x200001cc

080057c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057c4:	4b03      	ldr	r3, [pc, #12]	; (80057d4 <vTaskMissedYield+0x14>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
}
 80057ca:	bf00      	nop
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	200001c8 	.word	0x200001c8

080057d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057e0:	f000 f852 	bl	8005888 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057e4:	4b06      	ldr	r3, [pc, #24]	; (8005800 <prvIdleTask+0x28>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d9f9      	bls.n	80057e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057ec:	4b05      	ldr	r3, [pc, #20]	; (8005804 <prvIdleTask+0x2c>)
 80057ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057fc:	e7f0      	b.n	80057e0 <prvIdleTask+0x8>
 80057fe:	bf00      	nop
 8005800:	200000b8 	.word	0x200000b8
 8005804:	e000ed04 	.word	0xe000ed04

08005808 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800580e:	2300      	movs	r3, #0
 8005810:	607b      	str	r3, [r7, #4]
 8005812:	e00c      	b.n	800582e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4a12      	ldr	r2, [pc, #72]	; (8005868 <prvInitialiseTaskLists+0x60>)
 8005820:	4413      	add	r3, r2
 8005822:	4618      	mov	r0, r3
 8005824:	f7fe fd2d 	bl	8004282 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3301      	adds	r3, #1
 800582c:	607b      	str	r3, [r7, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b06      	cmp	r3, #6
 8005832:	d9ef      	bls.n	8005814 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005834:	480d      	ldr	r0, [pc, #52]	; (800586c <prvInitialiseTaskLists+0x64>)
 8005836:	f7fe fd24 	bl	8004282 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800583a:	480d      	ldr	r0, [pc, #52]	; (8005870 <prvInitialiseTaskLists+0x68>)
 800583c:	f7fe fd21 	bl	8004282 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005840:	480c      	ldr	r0, [pc, #48]	; (8005874 <prvInitialiseTaskLists+0x6c>)
 8005842:	f7fe fd1e 	bl	8004282 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005846:	480c      	ldr	r0, [pc, #48]	; (8005878 <prvInitialiseTaskLists+0x70>)
 8005848:	f7fe fd1b 	bl	8004282 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800584c:	480b      	ldr	r0, [pc, #44]	; (800587c <prvInitialiseTaskLists+0x74>)
 800584e:	f7fe fd18 	bl	8004282 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005852:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <prvInitialiseTaskLists+0x78>)
 8005854:	4a05      	ldr	r2, [pc, #20]	; (800586c <prvInitialiseTaskLists+0x64>)
 8005856:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005858:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <prvInitialiseTaskLists+0x7c>)
 800585a:	4a05      	ldr	r2, [pc, #20]	; (8005870 <prvInitialiseTaskLists+0x68>)
 800585c:	601a      	str	r2, [r3, #0]
}
 800585e:	bf00      	nop
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	200000b8 	.word	0x200000b8
 800586c:	20000144 	.word	0x20000144
 8005870:	20000158 	.word	0x20000158
 8005874:	20000174 	.word	0x20000174
 8005878:	20000188 	.word	0x20000188
 800587c:	200001a0 	.word	0x200001a0
 8005880:	2000016c 	.word	0x2000016c
 8005884:	20000170 	.word	0x20000170

08005888 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800588e:	e019      	b.n	80058c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005890:	f000 fbc8 	bl	8006024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005894:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <prvCheckTasksWaitingTermination+0x50>)
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3304      	adds	r3, #4
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe fd78 	bl	8004396 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058a6:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <prvCheckTasksWaitingTermination+0x54>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	4a0b      	ldr	r2, [pc, #44]	; (80058dc <prvCheckTasksWaitingTermination+0x54>)
 80058ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058b0:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <prvCheckTasksWaitingTermination+0x58>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	4a0a      	ldr	r2, [pc, #40]	; (80058e0 <prvCheckTasksWaitingTermination+0x58>)
 80058b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058ba:	f000 fbe3 	bl	8006084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f810 	bl	80058e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058c4:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <prvCheckTasksWaitingTermination+0x58>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e1      	bne.n	8005890 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058cc:	bf00      	nop
 80058ce:	bf00      	nop
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20000188 	.word	0x20000188
 80058dc:	200001b4 	.word	0x200001b4
 80058e0:	2000019c 	.word	0x2000019c

080058e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d108      	bne.n	8005908 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fd40 	bl	8006380 <vPortFree>
				vPortFree( pxTCB );
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fd3d 	bl	8006380 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005906:	e018      	b.n	800593a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800590e:	2b01      	cmp	r3, #1
 8005910:	d103      	bne.n	800591a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fd34 	bl	8006380 <vPortFree>
	}
 8005918:	e00f      	b.n	800593a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005920:	2b02      	cmp	r3, #2
 8005922:	d00a      	beq.n	800593a <prvDeleteTCB+0x56>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	60fb      	str	r3, [r7, #12]
}
 8005936:	bf00      	nop
 8005938:	e7fe      	b.n	8005938 <prvDeleteTCB+0x54>
	}
 800593a:	bf00      	nop
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800594a:	4b0c      	ldr	r3, [pc, #48]	; (800597c <prvResetNextTaskUnblockTime+0x38>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d104      	bne.n	800595e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005954:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <prvResetNextTaskUnblockTime+0x3c>)
 8005956:	f04f 32ff 	mov.w	r2, #4294967295
 800595a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800595c:	e008      	b.n	8005970 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800595e:	4b07      	ldr	r3, [pc, #28]	; (800597c <prvResetNextTaskUnblockTime+0x38>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	4a04      	ldr	r2, [pc, #16]	; (8005980 <prvResetNextTaskUnblockTime+0x3c>)
 800596e:	6013      	str	r3, [r2, #0]
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	2000016c 	.word	0x2000016c
 8005980:	200001d4 	.word	0x200001d4

08005984 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800598a:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <xTaskGetSchedulerState+0x34>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005992:	2301      	movs	r3, #1
 8005994:	607b      	str	r3, [r7, #4]
 8005996:	e008      	b.n	80059aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005998:	4b08      	ldr	r3, [pc, #32]	; (80059bc <xTaskGetSchedulerState+0x38>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059a0:	2302      	movs	r3, #2
 80059a2:	607b      	str	r3, [r7, #4]
 80059a4:	e001      	b.n	80059aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059a6:	2300      	movs	r3, #0
 80059a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059aa:	687b      	ldr	r3, [r7, #4]
	}
 80059ac:	4618      	mov	r0, r3
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	200001c0 	.word	0x200001c0
 80059bc:	200001dc 	.word	0x200001dc

080059c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d05e      	beq.n	8005a94 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059da:	4b31      	ldr	r3, [pc, #196]	; (8005aa0 <xTaskPriorityInherit+0xe0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d24e      	bcs.n	8005a82 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	db06      	blt.n	80059fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ec:	4b2c      	ldr	r3, [pc, #176]	; (8005aa0 <xTaskPriorityInherit+0xe0>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f2:	f1c3 0207 	rsb	r2, r3, #7
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	6959      	ldr	r1, [r3, #20]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4a26      	ldr	r2, [pc, #152]	; (8005aa4 <xTaskPriorityInherit+0xe4>)
 8005a0c:	4413      	add	r3, r2
 8005a0e:	4299      	cmp	r1, r3
 8005a10:	d12f      	bne.n	8005a72 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	3304      	adds	r3, #4
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fe fcbd 	bl	8004396 <uxListRemove>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10a      	bne.n	8005a38 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a26:	2201      	movs	r2, #1
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	43da      	mvns	r2, r3
 8005a2e:	4b1e      	ldr	r3, [pc, #120]	; (8005aa8 <xTaskPriorityInherit+0xe8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4013      	ands	r3, r2
 8005a34:	4a1c      	ldr	r2, [pc, #112]	; (8005aa8 <xTaskPriorityInherit+0xe8>)
 8005a36:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a38:	4b19      	ldr	r3, [pc, #100]	; (8005aa0 <xTaskPriorityInherit+0xe0>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	2201      	movs	r2, #1
 8005a48:	409a      	lsls	r2, r3
 8005a4a:	4b17      	ldr	r3, [pc, #92]	; (8005aa8 <xTaskPriorityInherit+0xe8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	4a15      	ldr	r2, [pc, #84]	; (8005aa8 <xTaskPriorityInherit+0xe8>)
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4a10      	ldr	r2, [pc, #64]	; (8005aa4 <xTaskPriorityInherit+0xe4>)
 8005a62:	441a      	add	r2, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	3304      	adds	r3, #4
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	f7fe fc36 	bl	80042dc <vListInsertEnd>
 8005a70:	e004      	b.n	8005a7c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a72:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <xTaskPriorityInherit+0xe0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	e008      	b.n	8005a94 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a86:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <xTaskPriorityInherit+0xe0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d201      	bcs.n	8005a94 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005a90:	2301      	movs	r3, #1
 8005a92:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a94:	68fb      	ldr	r3, [r7, #12]
	}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	200000b4 	.word	0x200000b4
 8005aa4:	200000b8 	.word	0x200000b8
 8005aa8:	200001bc 	.word	0x200001bc

08005aac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d06e      	beq.n	8005ba0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ac2:	4b3a      	ldr	r3, [pc, #232]	; (8005bac <xTaskPriorityDisinherit+0x100>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d00a      	beq.n	8005ae2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	60fb      	str	r3, [r7, #12]
}
 8005ade:	bf00      	nop
 8005ae0:	e7fe      	b.n	8005ae0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10a      	bne.n	8005b00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	60bb      	str	r3, [r7, #8]
}
 8005afc:	bf00      	nop
 8005afe:	e7fe      	b.n	8005afe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b04:	1e5a      	subs	r2, r3, #1
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d044      	beq.n	8005ba0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d140      	bne.n	8005ba0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	3304      	adds	r3, #4
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe fc37 	bl	8004396 <uxListRemove>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d115      	bne.n	8005b5a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b32:	491f      	ldr	r1, [pc, #124]	; (8005bb0 <xTaskPriorityDisinherit+0x104>)
 8005b34:	4613      	mov	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10a      	bne.n	8005b5a <xTaskPriorityDisinherit+0xae>
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	2201      	movs	r2, #1
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	43da      	mvns	r2, r3
 8005b50:	4b18      	ldr	r3, [pc, #96]	; (8005bb4 <xTaskPriorityDisinherit+0x108>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4013      	ands	r3, r2
 8005b56:	4a17      	ldr	r2, [pc, #92]	; (8005bb4 <xTaskPriorityDisinherit+0x108>)
 8005b58:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b66:	f1c3 0207 	rsb	r2, r3, #7
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	2201      	movs	r2, #1
 8005b74:	409a      	lsls	r2, r3
 8005b76:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <xTaskPriorityDisinherit+0x108>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	4a0d      	ldr	r2, [pc, #52]	; (8005bb4 <xTaskPriorityDisinherit+0x108>)
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <xTaskPriorityDisinherit+0x104>)
 8005b8e:	441a      	add	r2, r3
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	3304      	adds	r3, #4
 8005b94:	4619      	mov	r1, r3
 8005b96:	4610      	mov	r0, r2
 8005b98:	f7fe fba0 	bl	80042dc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ba0:	697b      	ldr	r3, [r7, #20]
	}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	200000b4 	.word	0x200000b4
 8005bb0:	200000b8 	.word	0x200000b8
 8005bb4:	200001bc 	.word	0x200001bc

08005bb8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d077      	beq.n	8005cc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10a      	bne.n	8005bee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	60fb      	str	r3, [r7, #12]
}
 8005bea:	bf00      	nop
 8005bec:	e7fe      	b.n	8005bec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d902      	bls.n	8005bfe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	e002      	b.n	8005c04 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c02:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d058      	beq.n	8005cc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d153      	bne.n	8005cc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005c18:	4b2b      	ldr	r3, [pc, #172]	; (8005cc8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d10a      	bne.n	8005c38 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	60bb      	str	r3, [r7, #8]
}
 8005c34:	bf00      	nop
 8005c36:	e7fe      	b.n	8005c36 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	69fa      	ldr	r2, [r7, #28]
 8005c42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	db04      	blt.n	8005c56 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	f1c3 0207 	rsb	r2, r3, #7
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	6959      	ldr	r1, [r3, #20]
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4a19      	ldr	r2, [pc, #100]	; (8005ccc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005c66:	4413      	add	r3, r2
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	d129      	bne.n	8005cc0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fe fb90 	bl	8004396 <uxListRemove>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	2201      	movs	r2, #1
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	43da      	mvns	r2, r3
 8005c88:	4b11      	ldr	r3, [pc, #68]	; (8005cd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	4a10      	ldr	r2, [pc, #64]	; (8005cd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005c90:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c96:	2201      	movs	r2, #1
 8005c98:	409a      	lsls	r2, r3
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	4a0b      	ldr	r2, [pc, #44]	; (8005cd0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca8:	4613      	mov	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4a06      	ldr	r2, [pc, #24]	; (8005ccc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005cb2:	441a      	add	r2, r3
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4610      	mov	r0, r2
 8005cbc:	f7fe fb0e 	bl	80042dc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cc0:	bf00      	nop
 8005cc2:	3720      	adds	r7, #32
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	200000b4 	.word	0x200000b4
 8005ccc:	200000b8 	.word	0x200000b8
 8005cd0:	200001bc 	.word	0x200001bc

08005cd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005cd8:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005ce0:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ce6:	3201      	adds	r2, #1
 8005ce8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005cea:	4b03      	ldr	r3, [pc, #12]	; (8005cf8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005cec:	681b      	ldr	r3, [r3, #0]
	}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	200000b4 	.word	0x200000b4

08005cfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d06:	4b29      	ldr	r3, [pc, #164]	; (8005dac <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d0c:	4b28      	ldr	r3, [pc, #160]	; (8005db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3304      	adds	r3, #4
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fe fb3f 	bl	8004396 <uxListRemove>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10b      	bne.n	8005d36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005d1e:	4b24      	ldr	r3, [pc, #144]	; (8005db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	2201      	movs	r2, #1
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	43da      	mvns	r2, r3
 8005d2c:	4b21      	ldr	r3, [pc, #132]	; (8005db4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4013      	ands	r3, r2
 8005d32:	4a20      	ldr	r2, [pc, #128]	; (8005db4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3c:	d10a      	bne.n	8005d54 <prvAddCurrentTaskToDelayedList+0x58>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d44:	4b1a      	ldr	r3, [pc, #104]	; (8005db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	481a      	ldr	r0, [pc, #104]	; (8005db8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d4e:	f7fe fac5 	bl	80042dc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d52:	e026      	b.n	8005da2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4413      	add	r3, r2
 8005d5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d5c:	4b14      	ldr	r3, [pc, #80]	; (8005db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d209      	bcs.n	8005d80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d6c:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3304      	adds	r3, #4
 8005d76:	4619      	mov	r1, r3
 8005d78:	4610      	mov	r0, r2
 8005d7a:	f7fe fad3 	bl	8004324 <vListInsert>
}
 8005d7e:	e010      	b.n	8005da2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d80:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	f7fe fac9 	bl	8004324 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d92:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d202      	bcs.n	8005da2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d9c:	4a09      	ldr	r2, [pc, #36]	; (8005dc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	6013      	str	r3, [r2, #0]
}
 8005da2:	bf00      	nop
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	200001b8 	.word	0x200001b8
 8005db0:	200000b4 	.word	0x200000b4
 8005db4:	200001bc 	.word	0x200001bc
 8005db8:	200001a0 	.word	0x200001a0
 8005dbc:	20000170 	.word	0x20000170
 8005dc0:	2000016c 	.word	0x2000016c
 8005dc4:	200001d4 	.word	0x200001d4

08005dc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3b04      	subs	r3, #4
 8005dd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005de0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3b04      	subs	r3, #4
 8005de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f023 0201 	bic.w	r2, r3, #1
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3b04      	subs	r3, #4
 8005df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005df8:	4a0c      	ldr	r2, [pc, #48]	; (8005e2c <pxPortInitialiseStack+0x64>)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3b14      	subs	r3, #20
 8005e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3b04      	subs	r3, #4
 8005e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f06f 0202 	mvn.w	r2, #2
 8005e16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3b20      	subs	r3, #32
 8005e1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	08005e31 	.word	0x08005e31

08005e30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e3a:	4b12      	ldr	r3, [pc, #72]	; (8005e84 <prvTaskExitError+0x54>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e42:	d00a      	beq.n	8005e5a <prvTaskExitError+0x2a>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	60fb      	str	r3, [r7, #12]
}
 8005e56:	bf00      	nop
 8005e58:	e7fe      	b.n	8005e58 <prvTaskExitError+0x28>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	60bb      	str	r3, [r7, #8]
}
 8005e6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e6e:	bf00      	nop
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0fc      	beq.n	8005e70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e76:	bf00      	nop
 8005e78:	bf00      	nop
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	20000008 	.word	0x20000008
	...

08005e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e90:	4b07      	ldr	r3, [pc, #28]	; (8005eb0 <pxCurrentTCBConst2>)
 8005e92:	6819      	ldr	r1, [r3, #0]
 8005e94:	6808      	ldr	r0, [r1, #0]
 8005e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9a:	f380 8809 	msr	PSP, r0
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f04f 0000 	mov.w	r0, #0
 8005ea6:	f380 8811 	msr	BASEPRI, r0
 8005eaa:	4770      	bx	lr
 8005eac:	f3af 8000 	nop.w

08005eb0 <pxCurrentTCBConst2>:
 8005eb0:	200000b4 	.word	0x200000b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop

08005eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005eb8:	4808      	ldr	r0, [pc, #32]	; (8005edc <prvPortStartFirstTask+0x24>)
 8005eba:	6800      	ldr	r0, [r0, #0]
 8005ebc:	6800      	ldr	r0, [r0, #0]
 8005ebe:	f380 8808 	msr	MSP, r0
 8005ec2:	f04f 0000 	mov.w	r0, #0
 8005ec6:	f380 8814 	msr	CONTROL, r0
 8005eca:	b662      	cpsie	i
 8005ecc:	b661      	cpsie	f
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	df00      	svc	0
 8005ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005eda:	bf00      	nop
 8005edc:	e000ed08 	.word	0xe000ed08

08005ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ee6:	4b46      	ldr	r3, [pc, #280]	; (8006000 <xPortStartScheduler+0x120>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a46      	ldr	r2, [pc, #280]	; (8006004 <xPortStartScheduler+0x124>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d10a      	bne.n	8005f06 <xPortStartScheduler+0x26>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	613b      	str	r3, [r7, #16]
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f06:	4b3e      	ldr	r3, [pc, #248]	; (8006000 <xPortStartScheduler+0x120>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a3f      	ldr	r2, [pc, #252]	; (8006008 <xPortStartScheduler+0x128>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d10a      	bne.n	8005f26 <xPortStartScheduler+0x46>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	60fb      	str	r3, [r7, #12]
}
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f26:	4b39      	ldr	r3, [pc, #228]	; (800600c <xPortStartScheduler+0x12c>)
 8005f28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	22ff      	movs	r2, #255	; 0xff
 8005f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	4b31      	ldr	r3, [pc, #196]	; (8006010 <xPortStartScheduler+0x130>)
 8005f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f4e:	4b31      	ldr	r3, [pc, #196]	; (8006014 <xPortStartScheduler+0x134>)
 8005f50:	2207      	movs	r2, #7
 8005f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f54:	e009      	b.n	8005f6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005f56:	4b2f      	ldr	r3, [pc, #188]	; (8006014 <xPortStartScheduler+0x134>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	4a2d      	ldr	r2, [pc, #180]	; (8006014 <xPortStartScheduler+0x134>)
 8005f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f60:	78fb      	ldrb	r3, [r7, #3]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f72:	2b80      	cmp	r3, #128	; 0x80
 8005f74:	d0ef      	beq.n	8005f56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f76:	4b27      	ldr	r3, [pc, #156]	; (8006014 <xPortStartScheduler+0x134>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f1c3 0307 	rsb	r3, r3, #7
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d00a      	beq.n	8005f98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	60bb      	str	r3, [r7, #8]
}
 8005f94:	bf00      	nop
 8005f96:	e7fe      	b.n	8005f96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f98:	4b1e      	ldr	r3, [pc, #120]	; (8006014 <xPortStartScheduler+0x134>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	021b      	lsls	r3, r3, #8
 8005f9e:	4a1d      	ldr	r2, [pc, #116]	; (8006014 <xPortStartScheduler+0x134>)
 8005fa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005fa2:	4b1c      	ldr	r3, [pc, #112]	; (8006014 <xPortStartScheduler+0x134>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005faa:	4a1a      	ldr	r2, [pc, #104]	; (8006014 <xPortStartScheduler+0x134>)
 8005fac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005fb6:	4b18      	ldr	r3, [pc, #96]	; (8006018 <xPortStartScheduler+0x138>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a17      	ldr	r2, [pc, #92]	; (8006018 <xPortStartScheduler+0x138>)
 8005fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fc2:	4b15      	ldr	r3, [pc, #84]	; (8006018 <xPortStartScheduler+0x138>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a14      	ldr	r2, [pc, #80]	; (8006018 <xPortStartScheduler+0x138>)
 8005fc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005fcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005fce:	f000 f8dd 	bl	800618c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005fd2:	4b12      	ldr	r3, [pc, #72]	; (800601c <xPortStartScheduler+0x13c>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005fd8:	f000 f8fc 	bl	80061d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005fdc:	4b10      	ldr	r3, [pc, #64]	; (8006020 <xPortStartScheduler+0x140>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a0f      	ldr	r2, [pc, #60]	; (8006020 <xPortStartScheduler+0x140>)
 8005fe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005fe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005fe8:	f7ff ff66 	bl	8005eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005fec:	f7ff fa8e 	bl	800550c <vTaskSwitchContext>
	prvTaskExitError();
 8005ff0:	f7ff ff1e 	bl	8005e30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	e000ed00 	.word	0xe000ed00
 8006004:	410fc271 	.word	0x410fc271
 8006008:	410fc270 	.word	0x410fc270
 800600c:	e000e400 	.word	0xe000e400
 8006010:	200001e0 	.word	0x200001e0
 8006014:	200001e4 	.word	0x200001e4
 8006018:	e000ed20 	.word	0xe000ed20
 800601c:	20000008 	.word	0x20000008
 8006020:	e000ef34 	.word	0xe000ef34

08006024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	607b      	str	r3, [r7, #4]
}
 800603c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800603e:	4b0f      	ldr	r3, [pc, #60]	; (800607c <vPortEnterCritical+0x58>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3301      	adds	r3, #1
 8006044:	4a0d      	ldr	r2, [pc, #52]	; (800607c <vPortEnterCritical+0x58>)
 8006046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006048:	4b0c      	ldr	r3, [pc, #48]	; (800607c <vPortEnterCritical+0x58>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d10f      	bne.n	8006070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006050:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <vPortEnterCritical+0x5c>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <vPortEnterCritical+0x4c>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	603b      	str	r3, [r7, #0]
}
 800606c:	bf00      	nop
 800606e:	e7fe      	b.n	800606e <vPortEnterCritical+0x4a>
	}
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	20000008 	.word	0x20000008
 8006080:	e000ed04 	.word	0xe000ed04

08006084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800608a:	4b12      	ldr	r3, [pc, #72]	; (80060d4 <vPortExitCritical+0x50>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10a      	bne.n	80060a8 <vPortExitCritical+0x24>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	607b      	str	r3, [r7, #4]
}
 80060a4:	bf00      	nop
 80060a6:	e7fe      	b.n	80060a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80060a8:	4b0a      	ldr	r3, [pc, #40]	; (80060d4 <vPortExitCritical+0x50>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	4a09      	ldr	r2, [pc, #36]	; (80060d4 <vPortExitCritical+0x50>)
 80060b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80060b2:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <vPortExitCritical+0x50>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d105      	bne.n	80060c6 <vPortExitCritical+0x42>
 80060ba:	2300      	movs	r3, #0
 80060bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	20000008 	.word	0x20000008
	...

080060e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060e0:	f3ef 8009 	mrs	r0, PSP
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	4b15      	ldr	r3, [pc, #84]	; (8006140 <pxCurrentTCBConst>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	f01e 0f10 	tst.w	lr, #16
 80060f0:	bf08      	it	eq
 80060f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fa:	6010      	str	r0, [r2, #0]
 80060fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006104:	f380 8811 	msr	BASEPRI, r0
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f7ff f9fc 	bl	800550c <vTaskSwitchContext>
 8006114:	f04f 0000 	mov.w	r0, #0
 8006118:	f380 8811 	msr	BASEPRI, r0
 800611c:	bc09      	pop	{r0, r3}
 800611e:	6819      	ldr	r1, [r3, #0]
 8006120:	6808      	ldr	r0, [r1, #0]
 8006122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006126:	f01e 0f10 	tst.w	lr, #16
 800612a:	bf08      	it	eq
 800612c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006130:	f380 8809 	msr	PSP, r0
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	f3af 8000 	nop.w

08006140 <pxCurrentTCBConst>:
 8006140:	200000b4 	.word	0x200000b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006144:	bf00      	nop
 8006146:	bf00      	nop

08006148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	607b      	str	r3, [r7, #4]
}
 8006160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006162:	f7ff f91b 	bl	800539c <xTaskIncrementTick>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800616c:	4b06      	ldr	r3, [pc, #24]	; (8006188 <xPortSysTickHandler+0x40>)
 800616e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	2300      	movs	r3, #0
 8006176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	f383 8811 	msr	BASEPRI, r3
}
 800617e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006180:	bf00      	nop
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	e000ed04 	.word	0xe000ed04

0800618c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006190:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <vPortSetupTimerInterrupt+0x34>)
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006196:	4b0b      	ldr	r3, [pc, #44]	; (80061c4 <vPortSetupTimerInterrupt+0x38>)
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800619c:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <vPortSetupTimerInterrupt+0x3c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a0a      	ldr	r2, [pc, #40]	; (80061cc <vPortSetupTimerInterrupt+0x40>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	099b      	lsrs	r3, r3, #6
 80061a8:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <vPortSetupTimerInterrupt+0x44>)
 80061aa:	3b01      	subs	r3, #1
 80061ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80061ae:	4b04      	ldr	r3, [pc, #16]	; (80061c0 <vPortSetupTimerInterrupt+0x34>)
 80061b0:	2207      	movs	r2, #7
 80061b2:	601a      	str	r2, [r3, #0]
}
 80061b4:	bf00      	nop
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	e000e010 	.word	0xe000e010
 80061c4:	e000e018 	.word	0xe000e018
 80061c8:	20000010 	.word	0x20000010
 80061cc:	10624dd3 	.word	0x10624dd3
 80061d0:	e000e014 	.word	0xe000e014

080061d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80061d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80061e4 <vPortEnableVFP+0x10>
 80061d8:	6801      	ldr	r1, [r0, #0]
 80061da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80061de:	6001      	str	r1, [r0, #0]
 80061e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80061e2:	bf00      	nop
 80061e4:	e000ed88 	.word	0xe000ed88

080061e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08a      	sub	sp, #40	; 0x28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061f0:	2300      	movs	r3, #0
 80061f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061f4:	f7ff f828 	bl	8005248 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061f8:	4b5b      	ldr	r3, [pc, #364]	; (8006368 <pvPortMalloc+0x180>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006200:	f000 f920 	bl	8006444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006204:	4b59      	ldr	r3, [pc, #356]	; (800636c <pvPortMalloc+0x184>)
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4013      	ands	r3, r2
 800620c:	2b00      	cmp	r3, #0
 800620e:	f040 8093 	bne.w	8006338 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01d      	beq.n	8006254 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006218:	2208      	movs	r2, #8
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4413      	add	r3, r2
 800621e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	2b00      	cmp	r3, #0
 8006228:	d014      	beq.n	8006254 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f023 0307 	bic.w	r3, r3, #7
 8006230:	3308      	adds	r3, #8
 8006232:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <pvPortMalloc+0x6c>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	617b      	str	r3, [r7, #20]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d06e      	beq.n	8006338 <pvPortMalloc+0x150>
 800625a:	4b45      	ldr	r3, [pc, #276]	; (8006370 <pvPortMalloc+0x188>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	429a      	cmp	r2, r3
 8006262:	d869      	bhi.n	8006338 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006264:	4b43      	ldr	r3, [pc, #268]	; (8006374 <pvPortMalloc+0x18c>)
 8006266:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006268:	4b42      	ldr	r3, [pc, #264]	; (8006374 <pvPortMalloc+0x18c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800626e:	e004      	b.n	800627a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	429a      	cmp	r2, r3
 8006282:	d903      	bls.n	800628c <pvPortMalloc+0xa4>
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1f1      	bne.n	8006270 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800628c:	4b36      	ldr	r3, [pc, #216]	; (8006368 <pvPortMalloc+0x180>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006292:	429a      	cmp	r2, r3
 8006294:	d050      	beq.n	8006338 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2208      	movs	r2, #8
 800629c:	4413      	add	r3, r2
 800629e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	1ad2      	subs	r2, r2, r3
 80062b0:	2308      	movs	r3, #8
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d91f      	bls.n	80062f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4413      	add	r3, r2
 80062be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <pvPortMalloc+0xf8>
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	613b      	str	r3, [r7, #16]
}
 80062dc:	bf00      	nop
 80062de:	e7fe      	b.n	80062de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	1ad2      	subs	r2, r2, r3
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062f2:	69b8      	ldr	r0, [r7, #24]
 80062f4:	f000 f908 	bl	8006508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062f8:	4b1d      	ldr	r3, [pc, #116]	; (8006370 <pvPortMalloc+0x188>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	4a1b      	ldr	r2, [pc, #108]	; (8006370 <pvPortMalloc+0x188>)
 8006304:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006306:	4b1a      	ldr	r3, [pc, #104]	; (8006370 <pvPortMalloc+0x188>)
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	4b1b      	ldr	r3, [pc, #108]	; (8006378 <pvPortMalloc+0x190>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d203      	bcs.n	800631a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006312:	4b17      	ldr	r3, [pc, #92]	; (8006370 <pvPortMalloc+0x188>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a18      	ldr	r2, [pc, #96]	; (8006378 <pvPortMalloc+0x190>)
 8006318:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	4b13      	ldr	r3, [pc, #76]	; (800636c <pvPortMalloc+0x184>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	431a      	orrs	r2, r3
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800632e:	4b13      	ldr	r3, [pc, #76]	; (800637c <pvPortMalloc+0x194>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3301      	adds	r3, #1
 8006334:	4a11      	ldr	r2, [pc, #68]	; (800637c <pvPortMalloc+0x194>)
 8006336:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006338:	f7fe ff94 	bl	8005264 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	f003 0307 	and.w	r3, r3, #7
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <pvPortMalloc+0x174>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	60fb      	str	r3, [r7, #12]
}
 8006358:	bf00      	nop
 800635a:	e7fe      	b.n	800635a <pvPortMalloc+0x172>
	return pvReturn;
 800635c:	69fb      	ldr	r3, [r7, #28]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3728      	adds	r7, #40	; 0x28
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20003df0 	.word	0x20003df0
 800636c:	20003e04 	.word	0x20003e04
 8006370:	20003df4 	.word	0x20003df4
 8006374:	20003de8 	.word	0x20003de8
 8006378:	20003df8 	.word	0x20003df8
 800637c:	20003dfc 	.word	0x20003dfc

08006380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d04d      	beq.n	800642e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006392:	2308      	movs	r3, #8
 8006394:	425b      	negs	r3, r3
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	4413      	add	r3, r2
 800639a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	4b24      	ldr	r3, [pc, #144]	; (8006438 <vPortFree+0xb8>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10a      	bne.n	80063c4 <vPortFree+0x44>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	60fb      	str	r3, [r7, #12]
}
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <vPortFree+0x62>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	60bb      	str	r3, [r7, #8]
}
 80063de:	bf00      	nop
 80063e0:	e7fe      	b.n	80063e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	4b14      	ldr	r3, [pc, #80]	; (8006438 <vPortFree+0xb8>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4013      	ands	r3, r2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01e      	beq.n	800642e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d11a      	bne.n	800642e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	4b0e      	ldr	r3, [pc, #56]	; (8006438 <vPortFree+0xb8>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	43db      	mvns	r3, r3
 8006402:	401a      	ands	r2, r3
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006408:	f7fe ff1e 	bl	8005248 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	4b0a      	ldr	r3, [pc, #40]	; (800643c <vPortFree+0xbc>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4413      	add	r3, r2
 8006416:	4a09      	ldr	r2, [pc, #36]	; (800643c <vPortFree+0xbc>)
 8006418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800641a:	6938      	ldr	r0, [r7, #16]
 800641c:	f000 f874 	bl	8006508 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006420:	4b07      	ldr	r3, [pc, #28]	; (8006440 <vPortFree+0xc0>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3301      	adds	r3, #1
 8006426:	4a06      	ldr	r2, [pc, #24]	; (8006440 <vPortFree+0xc0>)
 8006428:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800642a:	f7fe ff1b 	bl	8005264 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800642e:	bf00      	nop
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20003e04 	.word	0x20003e04
 800643c:	20003df4 	.word	0x20003df4
 8006440:	20003e00 	.word	0x20003e00

08006444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800644a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800644e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006450:	4b27      	ldr	r3, [pc, #156]	; (80064f0 <prvHeapInit+0xac>)
 8006452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00c      	beq.n	8006478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3307      	adds	r3, #7
 8006462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0307 	bic.w	r3, r3, #7
 800646a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	4a1f      	ldr	r2, [pc, #124]	; (80064f0 <prvHeapInit+0xac>)
 8006474:	4413      	add	r3, r2
 8006476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800647c:	4a1d      	ldr	r2, [pc, #116]	; (80064f4 <prvHeapInit+0xb0>)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006482:	4b1c      	ldr	r3, [pc, #112]	; (80064f4 <prvHeapInit+0xb0>)
 8006484:	2200      	movs	r2, #0
 8006486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	4413      	add	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006490:	2208      	movs	r2, #8
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	1a9b      	subs	r3, r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0307 	bic.w	r3, r3, #7
 800649e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4a15      	ldr	r2, [pc, #84]	; (80064f8 <prvHeapInit+0xb4>)
 80064a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80064a6:	4b14      	ldr	r3, [pc, #80]	; (80064f8 <prvHeapInit+0xb4>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2200      	movs	r2, #0
 80064ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80064ae:	4b12      	ldr	r3, [pc, #72]	; (80064f8 <prvHeapInit+0xb4>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	1ad2      	subs	r2, r2, r3
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064c4:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <prvHeapInit+0xb4>)
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <prvHeapInit+0xb8>)
 80064d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	4a09      	ldr	r2, [pc, #36]	; (8006500 <prvHeapInit+0xbc>)
 80064da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064dc:	4b09      	ldr	r3, [pc, #36]	; (8006504 <prvHeapInit+0xc0>)
 80064de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80064e2:	601a      	str	r2, [r3, #0]
}
 80064e4:	bf00      	nop
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	200001e8 	.word	0x200001e8
 80064f4:	20003de8 	.word	0x20003de8
 80064f8:	20003df0 	.word	0x20003df0
 80064fc:	20003df8 	.word	0x20003df8
 8006500:	20003df4 	.word	0x20003df4
 8006504:	20003e04 	.word	0x20003e04

08006508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006510:	4b28      	ldr	r3, [pc, #160]	; (80065b4 <prvInsertBlockIntoFreeList+0xac>)
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	e002      	b.n	800651c <prvInsertBlockIntoFreeList+0x14>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	429a      	cmp	r2, r3
 8006524:	d8f7      	bhi.n	8006516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	4413      	add	r3, r2
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	429a      	cmp	r2, r3
 8006536:	d108      	bne.n	800654a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	441a      	add	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	441a      	add	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d118      	bne.n	8006590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	4b15      	ldr	r3, [pc, #84]	; (80065b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	429a      	cmp	r2, r3
 8006568:	d00d      	beq.n	8006586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	441a      	add	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	e008      	b.n	8006598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006586:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	e003      	b.n	8006598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	429a      	cmp	r2, r3
 800659e:	d002      	beq.n	80065a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065a6:	bf00      	nop
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	20003de8 	.word	0x20003de8
 80065b8:	20003df0 	.word	0x20003df0

080065bc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80065c2:	463b      	mov	r3, r7
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	605a      	str	r2, [r3, #4]
 80065ca:	609a      	str	r2, [r3, #8]
 80065cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80065ce:	4b21      	ldr	r3, [pc, #132]	; (8006654 <MX_ADC1_Init+0x98>)
 80065d0:	4a21      	ldr	r2, [pc, #132]	; (8006658 <MX_ADC1_Init+0x9c>)
 80065d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80065d4:	4b1f      	ldr	r3, [pc, #124]	; (8006654 <MX_ADC1_Init+0x98>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80065da:	4b1e      	ldr	r3, [pc, #120]	; (8006654 <MX_ADC1_Init+0x98>)
 80065dc:	2200      	movs	r2, #0
 80065de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80065e0:	4b1c      	ldr	r3, [pc, #112]	; (8006654 <MX_ADC1_Init+0x98>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80065e6:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <MX_ADC1_Init+0x98>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80065ec:	4b19      	ldr	r3, [pc, #100]	; (8006654 <MX_ADC1_Init+0x98>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80065f4:	4b17      	ldr	r3, [pc, #92]	; (8006654 <MX_ADC1_Init+0x98>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80065fa:	4b16      	ldr	r3, [pc, #88]	; (8006654 <MX_ADC1_Init+0x98>)
 80065fc:	4a17      	ldr	r2, [pc, #92]	; (800665c <MX_ADC1_Init+0xa0>)
 80065fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006600:	4b14      	ldr	r3, [pc, #80]	; (8006654 <MX_ADC1_Init+0x98>)
 8006602:	2200      	movs	r2, #0
 8006604:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8006606:	4b13      	ldr	r3, [pc, #76]	; (8006654 <MX_ADC1_Init+0x98>)
 8006608:	2201      	movs	r2, #1
 800660a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800660c:	4b11      	ldr	r3, [pc, #68]	; (8006654 <MX_ADC1_Init+0x98>)
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006614:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <MX_ADC1_Init+0x98>)
 8006616:	2201      	movs	r2, #1
 8006618:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800661a:	480e      	ldr	r0, [pc, #56]	; (8006654 <MX_ADC1_Init+0x98>)
 800661c:	f7fa fc0e 	bl	8000e3c <HAL_ADC_Init>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8006626:	f000 fc3b 	bl	8006ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800662a:	2300      	movs	r3, #0
 800662c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800662e:	2301      	movs	r3, #1
 8006630:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006632:	2300      	movs	r3, #0
 8006634:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006636:	463b      	mov	r3, r7
 8006638:	4619      	mov	r1, r3
 800663a:	4806      	ldr	r0, [pc, #24]	; (8006654 <MX_ADC1_Init+0x98>)
 800663c:	f7fa fde0 	bl	8001200 <HAL_ADC_ConfigChannel>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8006646:	f000 fc2b 	bl	8006ea0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800664a:	bf00      	nop
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20003e08 	.word	0x20003e08
 8006658:	40012000 	.word	0x40012000
 800665c:	0f000001 	.word	0x0f000001

08006660 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08a      	sub	sp, #40	; 0x28
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006668:	f107 0314 	add.w	r3, r7, #20
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	605a      	str	r2, [r3, #4]
 8006672:	609a      	str	r2, [r3, #8]
 8006674:	60da      	str	r2, [r3, #12]
 8006676:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a17      	ldr	r2, [pc, #92]	; (80066dc <HAL_ADC_MspInit+0x7c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d127      	bne.n	80066d2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006682:	2300      	movs	r3, #0
 8006684:	613b      	str	r3, [r7, #16]
 8006686:	4b16      	ldr	r3, [pc, #88]	; (80066e0 <HAL_ADC_MspInit+0x80>)
 8006688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668a:	4a15      	ldr	r2, [pc, #84]	; (80066e0 <HAL_ADC_MspInit+0x80>)
 800668c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006690:	6453      	str	r3, [r2, #68]	; 0x44
 8006692:	4b13      	ldr	r3, [pc, #76]	; (80066e0 <HAL_ADC_MspInit+0x80>)
 8006694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669a:	613b      	str	r3, [r7, #16]
 800669c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	4b0f      	ldr	r3, [pc, #60]	; (80066e0 <HAL_ADC_MspInit+0x80>)
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	4a0e      	ldr	r2, [pc, #56]	; (80066e0 <HAL_ADC_MspInit+0x80>)
 80066a8:	f043 0301 	orr.w	r3, r3, #1
 80066ac:	6313      	str	r3, [r2, #48]	; 0x30
 80066ae:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <HAL_ADC_MspInit+0x80>)
 80066b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80066ba:	2301      	movs	r3, #1
 80066bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066be:	2303      	movs	r3, #3
 80066c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066c2:	2300      	movs	r3, #0
 80066c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066c6:	f107 0314 	add.w	r3, r7, #20
 80066ca:	4619      	mov	r1, r3
 80066cc:	4805      	ldr	r0, [pc, #20]	; (80066e4 <HAL_ADC_MspInit+0x84>)
 80066ce:	f7fb f89b 	bl	8001808 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80066d2:	bf00      	nop
 80066d4:	3728      	adds	r7, #40	; 0x28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40012000 	.word	0x40012000
 80066e0:	40023800 	.word	0x40023800
 80066e4:	40020000 	.word	0x40020000

080066e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4a07      	ldr	r2, [pc, #28]	; (8006714 <vApplicationGetIdleTaskMemory+0x2c>)
 80066f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	4a06      	ldr	r2, [pc, #24]	; (8006718 <vApplicationGetIdleTaskMemory+0x30>)
 80066fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2280      	movs	r2, #128	; 0x80
 8006704:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8006706:	bf00      	nop
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20003e70 	.word	0x20003e70
 8006718:	20003ec4 	.word	0x20003ec4

0800671c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800671c:	b5b0      	push	{r4, r5, r7, lr}
 800671e:	b0a4      	sub	sp, #144	; 0x90
 8006720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  // <-- FIX: As funções de criação devem estar DENTRO de uma função.
  // Criar a fila para receber o novo duty cycle do PC (tamanho 1, para um uint8_t)
  dutyCycleQueueHandle = xQueueCreate(1, sizeof(uint8_t));
 8006722:	2200      	movs	r2, #0
 8006724:	2101      	movs	r1, #1
 8006726:	2001      	movs	r0, #1
 8006728:	f7fd fec8 	bl	80044bc <xQueueGenericCreate>
 800672c:	4603      	mov	r3, r0
 800672e:	4a38      	ldr	r2, [pc, #224]	; (8006810 <MX_FREERTOS_Init+0xf4>)
 8006730:	6013      	str	r3, [r2, #0]

  // Criar a fila para enviar o valor do ADC para o PC (tamanho 1, para um uint16_t)
  adcValueQueueHandle = xQueueCreate(1, sizeof(uint16_t));
 8006732:	2200      	movs	r2, #0
 8006734:	2102      	movs	r1, #2
 8006736:	2001      	movs	r0, #1
 8006738:	f7fd fec0 	bl	80044bc <xQueueGenericCreate>
 800673c:	4603      	mov	r3, r0
 800673e:	4a35      	ldr	r2, [pc, #212]	; (8006814 <MX_FREERTOS_Init+0xf8>)
 8006740:	6013      	str	r3, [r2, #0]

  /* Create the mutex(es) */
  /* definition and creation of defaultMutex */
  /* USER CODE BEGIN RTOS_MUTEX */
  // <-- FIX: Criar o Mutex aqui.
  socketMutexHandle = xSemaphoreCreateMutex();
 8006742:	2001      	movs	r0, #1
 8006744:	f7fd ff2d 	bl	80045a2 <xQueueCreateMutex>
 8006748:	4603      	mov	r3, r0
 800674a:	4a33      	ldr	r2, [pc, #204]	; (8006818 <MX_FREERTOS_Init+0xfc>)
 800674c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800674e:	4b33      	ldr	r3, [pc, #204]	; (800681c <MX_FREERTOS_Init+0x100>)
 8006750:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8006754:	461d      	mov	r5, r3
 8006756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800675a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800675e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006762:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006766:	2100      	movs	r1, #0
 8006768:	4618      	mov	r0, r3
 800676a:	f7fd fd2a 	bl	80041c2 <osThreadCreate>
 800676e:	4603      	mov	r3, r0
 8006770:	4a2b      	ldr	r2, [pc, #172]	; (8006820 <MX_FREERTOS_Init+0x104>)
 8006772:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(pwmTask, StartPwmTask, osPriorityNormal, 0, 128);
 8006774:	4b2b      	ldr	r3, [pc, #172]	; (8006824 <MX_FREERTOS_Init+0x108>)
 8006776:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800677a:	461d      	mov	r5, r3
 800677c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800677e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006780:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006784:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pwmTaskHandle = osThreadCreate(osThread(pwmTask), NULL);
 8006788:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800678c:	2100      	movs	r1, #0
 800678e:	4618      	mov	r0, r3
 8006790:	f7fd fd17 	bl	80041c2 <osThreadCreate>
 8006794:	4603      	mov	r3, r0
 8006796:	4a24      	ldr	r2, [pc, #144]	; (8006828 <MX_FREERTOS_Init+0x10c>)
 8006798:	6013      	str	r3, [r2, #0]

  osThreadDef(adcTask, StartAdcTask, osPriorityNormal, 0, 128);
 800679a:	4b24      	ldr	r3, [pc, #144]	; (800682c <MX_FREERTOS_Init+0x110>)
 800679c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80067a0:	461d      	mov	r5, r3
 80067a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80067aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adcTaskHandle = osThreadCreate(osThread(adcTask), NULL);
 80067ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067b2:	2100      	movs	r1, #0
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fd fd04 	bl	80041c2 <osThreadCreate>
 80067ba:	4603      	mov	r3, r0
 80067bc:	4a1c      	ldr	r2, [pc, #112]	; (8006830 <MX_FREERTOS_Init+0x114>)
 80067be:	6013      	str	r3, [r2, #0]

  osThreadDef(rxW5500Task, StartRxW5500Task, osPriorityNormal, 0, 1028);
 80067c0:	4b1c      	ldr	r3, [pc, #112]	; (8006834 <MX_FREERTOS_Init+0x118>)
 80067c2:	f107 0420 	add.w	r4, r7, #32
 80067c6:	461d      	mov	r5, r3
 80067c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80067d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rxW5500TaskHandle = osThreadCreate(osThread(rxW5500Task), NULL);
 80067d4:	f107 0320 	add.w	r3, r7, #32
 80067d8:	2100      	movs	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fd fcf1 	bl	80041c2 <osThreadCreate>
 80067e0:	4603      	mov	r3, r0
 80067e2:	4a15      	ldr	r2, [pc, #84]	; (8006838 <MX_FREERTOS_Init+0x11c>)
 80067e4:	6013      	str	r3, [r2, #0]

  osThreadDef(txW5500Task, StartTxW5500Task, osPriorityNormal, 0, 512);
 80067e6:	4b15      	ldr	r3, [pc, #84]	; (800683c <MX_FREERTOS_Init+0x120>)
 80067e8:	1d3c      	adds	r4, r7, #4
 80067ea:	461d      	mov	r5, r3
 80067ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80067f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  txW5500TaskHandle = osThreadCreate(osThread(txW5500Task), NULL);
 80067f8:	1d3b      	adds	r3, r7, #4
 80067fa:	2100      	movs	r1, #0
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fd fce0 	bl	80041c2 <osThreadCreate>
 8006802:	4603      	mov	r3, r0
 8006804:	4a0e      	ldr	r2, [pc, #56]	; (8006840 <MX_FREERTOS_Init+0x124>)
 8006806:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

}
 8006808:	bf00      	nop
 800680a:	3790      	adds	r7, #144	; 0x90
 800680c:	46bd      	mov	sp, r7
 800680e:	bdb0      	pop	{r4, r5, r7, pc}
 8006810:	20003e50 	.word	0x20003e50
 8006814:	20003e54 	.word	0x20003e54
 8006818:	20003e58 	.word	0x20003e58
 800681c:	08008fd8 	.word	0x08008fd8
 8006820:	20003e6c 	.word	0x20003e6c
 8006824:	08008ffc 	.word	0x08008ffc
 8006828:	20003e60 	.word	0x20003e60
 800682c:	08009020 	.word	0x08009020
 8006830:	20003e5c 	.word	0x20003e5c
 8006834:	08009048 	.word	0x08009048
 8006838:	20003e64 	.word	0x20003e64
 800683c:	08009070 	.word	0x08009070
 8006840:	20003e68 	.word	0x20003e68

08006844 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800684c:	2001      	movs	r0, #1
 800684e:	f7fd fd04 	bl	800425a <osDelay>
 8006852:	e7fb      	b.n	800684c <StartDefaultTask+0x8>
 8006854:	0000      	movs	r0, r0
	...

08006858 <StartPwmTask>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

// --- Thread do PWM ---
void StartPwmTask(void const * argument) {
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8006860:	2100      	movs	r1, #0
 8006862:	4819      	ldr	r0, [pc, #100]	; (80068c8 <StartPwmTask+0x70>)
 8006864:	f7fc fc00 	bl	8003068 <HAL_TIM_PWM_Start>

    uint32_t current_duty_cycle_val = 2100; // Valor inicial para o CCR
 8006868:	f640 0334 	movw	r3, #2100	; 0x834
 800686c:	60fb      	str	r3, [r7, #12]
    uint8_t new_duty_cycle_percent;

    for(;;) {
        // Verifica se um novo valor (em porcentagem) chegou
        if (xQueueReceive(dutyCycleQueueHandle, &new_duty_cycle_percent, (TickType_t)10) == pdPASS) {
 800686e:	4b17      	ldr	r3, [pc, #92]	; (80068cc <StartPwmTask+0x74>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f107 010b 	add.w	r1, r7, #11
 8006876:	220a      	movs	r2, #10
 8006878:	4618      	mov	r0, r3
 800687a:	f7fd ffa9 	bl	80047d0 <xQueueReceive>
 800687e:	4603      	mov	r3, r0
 8006880:	2b01      	cmp	r3, #1
 8006882:	d115      	bne.n	80068b0 <StartPwmTask+0x58>
            if (new_duty_cycle_percent > 100) new_duty_cycle_percent = 100;
 8006884:	7afb      	ldrb	r3, [r7, #11]
 8006886:	2b64      	cmp	r3, #100	; 0x64
 8006888:	d901      	bls.n	800688e <StartPwmTask+0x36>
 800688a:	2364      	movs	r3, #100	; 0x64
 800688c:	72fb      	strb	r3, [r7, #11]
            // Converte a porcentagem (0-100) para o valor do registrador (0-4199)
            current_duty_cycle_val = (uint32_t)(new_duty_cycle_percent * 41.99);
 800688e:	7afb      	ldrb	r3, [r7, #11]
 8006890:	4618      	mov	r0, r3
 8006892:	f7f9 fe47 	bl	8000524 <__aeabi_i2d>
 8006896:	a30a      	add	r3, pc, #40	; (adr r3, 80068c0 <StartPwmTask+0x68>)
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	f7f9 feac 	bl	80005f8 <__aeabi_dmul>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4610      	mov	r0, r2
 80068a6:	4619      	mov	r1, r3
 80068a8:	f7fa f8b8 	bl	8000a1c <__aeabi_d2uiz>
 80068ac:	4603      	mov	r3, r0
 80068ae:	60fb      	str	r3, [r7, #12]
        }

        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, current_duty_cycle_val);
 80068b0:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <StartPwmTask+0x70>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	635a      	str	r2, [r3, #52]	; 0x34
        osDelay(20);
 80068b8:	2014      	movs	r0, #20
 80068ba:	f7fd fcce 	bl	800425a <osDelay>
        if (xQueueReceive(dutyCycleQueueHandle, &new_duty_cycle_percent, (TickType_t)10) == pdPASS) {
 80068be:	e7d6      	b.n	800686e <StartPwmTask+0x16>
 80068c0:	51eb851f 	.word	0x51eb851f
 80068c4:	4044feb8 	.word	0x4044feb8
 80068c8:	20004120 	.word	0x20004120
 80068cc:	20003e50 	.word	0x20003e50

080068d0 <StartAdcTask>:
    }
}

// --- Thread do ADC ---
void StartAdcTask(void const * argument)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08c      	sub	sp, #48	; 0x30
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
    uint16_t adc_value; // O ADC do F4 é de 12 bits, então 16 bits é suficiente
    char msg[32];

    for(;;)
    {
        HAL_ADC_Start(&hadc1);
 80068d8:	4829      	ldr	r0, [pc, #164]	; (8006980 <StartAdcTask+0xb0>)
 80068da:	f7fa faf3 	bl	8000ec4 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80068de:	2164      	movs	r1, #100	; 0x64
 80068e0:	4827      	ldr	r0, [pc, #156]	; (8006980 <StartAdcTask+0xb0>)
 80068e2:	f7fa fbf4 	bl	80010ce <HAL_ADC_PollForConversion>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d13d      	bne.n	8006968 <StartAdcTask+0x98>
        {
            adc_value = HAL_ADC_GetValue(&hadc1);
 80068ec:	4824      	ldr	r0, [pc, #144]	; (8006980 <StartAdcTask+0xb0>)
 80068ee:	f7fa fc79 	bl	80011e4 <HAL_ADC_GetValue>
 80068f2:	4603      	mov	r3, r0
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
            
            // Envia o valor para a thread de TX e para a UART de debug
            xQueueSend(adcValueQueueHandle, &adc_value, (TickType_t)10);
 80068f8:	4b22      	ldr	r3, [pc, #136]	; (8006984 <StartAdcTask+0xb4>)
 80068fa:	6818      	ldr	r0, [r3, #0]
 80068fc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8006900:	2300      	movs	r3, #0
 8006902:	220a      	movs	r2, #10
 8006904:	f7fd fe66 	bl	80045d4 <xQueueGenericSend>

            uint8_t duty_cycle_percent = (uint8_t)((adc_value / 4095.0) * 100.0);
 8006908:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800690a:	4618      	mov	r0, r3
 800690c:	f7f9 fe0a 	bl	8000524 <__aeabi_i2d>
 8006910:	a319      	add	r3, pc, #100	; (adr r3, 8006978 <StartAdcTask+0xa8>)
 8006912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006916:	f7f9 ff99 	bl	800084c <__aeabi_ddiv>
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	4610      	mov	r0, r2
 8006920:	4619      	mov	r1, r3
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	4b18      	ldr	r3, [pc, #96]	; (8006988 <StartAdcTask+0xb8>)
 8006928:	f7f9 fe66 	bl	80005f8 <__aeabi_dmul>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	4610      	mov	r0, r2
 8006932:	4619      	mov	r1, r3
 8006934:	f7fa f872 	bl	8000a1c <__aeabi_d2uiz>
 8006938:	4603      	mov	r3, r0
 800693a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            sprintf(msg, "Duty Cicle: %u\r\n", duty_cycle_percent);
 800693e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006942:	f107 030c 	add.w	r3, r7, #12
 8006946:	4911      	ldr	r1, [pc, #68]	; (800698c <StartAdcTask+0xbc>)
 8006948:	4618      	mov	r0, r3
 800694a:	f001 fe8b 	bl	8008664 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 800694e:	f107 030c 	add.w	r3, r7, #12
 8006952:	4618      	mov	r0, r3
 8006954:	f7f9 fc3c 	bl	80001d0 <strlen>
 8006958:	4603      	mov	r3, r0
 800695a:	b29a      	uxth	r2, r3
 800695c:	f107 010c 	add.w	r1, r7, #12
 8006960:	2364      	movs	r3, #100	; 0x64
 8006962:	480b      	ldr	r0, [pc, #44]	; (8006990 <StartAdcTask+0xc0>)
 8006964:	f7fd f852 	bl	8003a0c <HAL_UART_Transmit>
        }
        HAL_ADC_Stop(&hadc1);
 8006968:	4805      	ldr	r0, [pc, #20]	; (8006980 <StartAdcTask+0xb0>)
 800696a:	f7fa fb7d 	bl	8001068 <HAL_ADC_Stop>
        
        osDelay(pdMS_TO_TICKS(500)); // Lê a cada 500ms
 800696e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006972:	f7fd fc72 	bl	800425a <osDelay>
        HAL_ADC_Start(&hadc1);
 8006976:	e7af      	b.n	80068d8 <StartAdcTask+0x8>
 8006978:	00000000 	.word	0x00000000
 800697c:	40affe00 	.word	0x40affe00
 8006980:	20003e08 	.word	0x20003e08
 8006984:	20003e54 	.word	0x20003e54
 8006988:	40590000 	.word	0x40590000
 800698c:	0800908c 	.word	0x0800908c
 8006990:	20004168 	.word	0x20004168

08006994 <StartRxW5500Task>:
    }
}

// --- Thread de RX (Recebimento) da Ethernet ---
// <-- FIX: Lógica corrigida para ser a de RX
void StartRxW5500Task(void const * argument) {
 8006994:	b580      	push	{r7, lr}
 8006996:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 800699a:	af00      	add	r7, sp, #0
 800699c:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80069a0:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 80069a4:	6018      	str	r0, [r3, #0]
    // 1. Inicialização do W5500
    HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_SET);
 80069a6:	2201      	movs	r2, #1
 80069a8:	2120      	movs	r1, #32
 80069aa:	4883      	ldr	r0, [pc, #524]	; (8006bb8 <StartRxW5500Task+0x224>)
 80069ac:	f7fb f8c8 	bl	8001b40 <HAL_GPIO_WritePin>
    reg_wizchip_cs_cbfunc(w5500_spi_select, w5500_spi_deselect);
 80069b0:	4982      	ldr	r1, [pc, #520]	; (8006bbc <StartRxW5500Task+0x228>)
 80069b2:	4883      	ldr	r0, [pc, #524]	; (8006bc0 <StartRxW5500Task+0x22c>)
 80069b4:	f001 fc5c 	bl	8008270 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(w5500_spi_read_byte, w5500_spi_write_byte);
 80069b8:	4982      	ldr	r1, [pc, #520]	; (8006bc4 <StartRxW5500Task+0x230>)
 80069ba:	4883      	ldr	r0, [pc, #524]	; (8006bc8 <StartRxW5500Task+0x234>)
 80069bc:	f001 fc7e 	bl	80082bc <reg_wizchip_spi_cbfunc>

    wiz_NetInfo net_info = {
 80069c0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	605a      	str	r2, [r3, #4]
 80069ca:	609a      	str	r2, [r3, #8]
 80069cc:	60da      	str	r2, [r3, #12]
 80069ce:	611a      	str	r2, [r3, #16]
 80069d0:	f8c3 2013 	str.w	r2, [r3, #19]
 80069d4:	4a7d      	ldr	r2, [pc, #500]	; (8006bcc <StartRxW5500Task+0x238>)
 80069d6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80069da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069de:	6018      	str	r0, [r3, #0]
 80069e0:	3304      	adds	r3, #4
 80069e2:	8019      	strh	r1, [r3, #0]
 80069e4:	4a7a      	ldr	r2, [pc, #488]	; (8006bd0 <StartRxW5500Task+0x23c>)
 80069e6:	f607 0316 	addw	r3, r7, #2070	; 0x816
 80069ea:	6810      	ldr	r0, [r2, #0]
 80069ec:	6018      	str	r0, [r3, #0]
 80069ee:	4a79      	ldr	r2, [pc, #484]	; (8006bd4 <StartRxW5500Task+0x240>)
 80069f0:	f607 031a 	addw	r3, r7, #2074	; 0x81a
 80069f4:	6810      	ldr	r0, [r2, #0]
 80069f6:	6018      	str	r0, [r3, #0]
 80069f8:	4a77      	ldr	r2, [pc, #476]	; (8006bd8 <StartRxW5500Task+0x244>)
 80069fa:	f607 031e 	addw	r3, r7, #2078	; 0x81e
 80069fe:	6810      	ldr	r0, [r2, #0]
 8006a00:	6018      	str	r0, [r3, #0]
        .mac = {0x00, 0x08, 0xDC, 0x12, 0x34, 0x56},
        .ip = {192, 168, 18, 177},
        .sn = {255, 255, 255, 0},
        .gw = {192, 168, 18, 1}
    };
    wizchip_init(NULL, NULL);
 8006a02:	2100      	movs	r1, #0
 8006a04:	2000      	movs	r0, #0
 8006a06:	f001 fcd1 	bl	80083ac <wizchip_init>
    wizchip_setnetinfo(&net_info);
 8006a0a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f001 fd58 	bl	80084c4 <wizchip_setnetinfo>

    uint8_t rx_buffer[2048];
    uint8_t socket_num = 0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	f887 382f 	strb.w	r3, [r7, #2095]	; 0x82f
    uint16_t port = 7;
 8006a1a:	2307      	movs	r3, #7
 8006a1c:	f8a7 382c 	strh.w	r3, [r7, #2092]	; 0x82c

    for(;;) {
        switch(getSn_SR(socket_num)) {
 8006a20:	f897 382f 	ldrb.w	r3, [r7, #2095]	; 0x82f
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	3301      	adds	r3, #1
 8006a28:	00db      	lsls	r3, r3, #3
 8006a2a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fca6 	bl	8007380 <WIZCHIP_READ>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b1c      	cmp	r3, #28
 8006a38:	f200 80b6 	bhi.w	8006ba8 <StartRxW5500Task+0x214>
 8006a3c:	a201      	add	r2, pc, #4	; (adr r2, 8006a44 <StartRxW5500Task+0xb0>)
 8006a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a42:	bf00      	nop
 8006a44:	08006b65 	.word	0x08006b65
 8006a48:	08006ba9 	.word	0x08006ba9
 8006a4c:	08006ba9 	.word	0x08006ba9
 8006a50:	08006ba9 	.word	0x08006ba9
 8006a54:	08006ba9 	.word	0x08006ba9
 8006a58:	08006ba9 	.word	0x08006ba9
 8006a5c:	08006ba9 	.word	0x08006ba9
 8006a60:	08006ba9 	.word	0x08006ba9
 8006a64:	08006ba9 	.word	0x08006ba9
 8006a68:	08006ba9 	.word	0x08006ba9
 8006a6c:	08006ba9 	.word	0x08006ba9
 8006a70:	08006ba9 	.word	0x08006ba9
 8006a74:	08006ba9 	.word	0x08006ba9
 8006a78:	08006ba9 	.word	0x08006ba9
 8006a7c:	08006ba9 	.word	0x08006ba9
 8006a80:	08006ba9 	.word	0x08006ba9
 8006a84:	08006ba9 	.word	0x08006ba9
 8006a88:	08006ba9 	.word	0x08006ba9
 8006a8c:	08006ba9 	.word	0x08006ba9
 8006a90:	08006ab9 	.word	0x08006ab9
 8006a94:	08006ba9 	.word	0x08006ba9
 8006a98:	08006ba9 	.word	0x08006ba9
 8006a9c:	08006ba9 	.word	0x08006ba9
 8006aa0:	08006ac5 	.word	0x08006ac5
 8006aa4:	08006ba9 	.word	0x08006ba9
 8006aa8:	08006ba9 	.word	0x08006ba9
 8006aac:	08006ba9 	.word	0x08006ba9
 8006ab0:	08006ba9 	.word	0x08006ba9
 8006ab4:	08006b59 	.word	0x08006b59
            case SOCK_INIT:
                listen(socket_num);
 8006ab8:	f897 382f 	ldrb.w	r3, [r7, #2095]	; 0x82f
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 f8a9 	bl	8007c14 <listen>
                break;
 8006ac2:	e074      	b.n	8006bae <StartRxW5500Task+0x21a>
            case SOCK_ESTABLISHED:
                if(g_ActiveSocket == -1) {
 8006ac4:	4b45      	ldr	r3, [pc, #276]	; (8006bdc <StartRxW5500Task+0x248>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	b25b      	sxtb	r3, r3
 8006aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ace:	d113      	bne.n	8006af8 <StartRxW5500Task+0x164>
                    if(xSemaphoreTake(socketMutexHandle, (TickType_t)10) == pdTRUE) {
 8006ad0:	4b43      	ldr	r3, [pc, #268]	; (8006be0 <StartRxW5500Task+0x24c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	210a      	movs	r1, #10
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fd ff5a 	bl	8004990 <xQueueSemaphoreTake>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d10a      	bne.n	8006af8 <StartRxW5500Task+0x164>
                        g_ActiveSocket = socket_num;
 8006ae2:	f997 282f 	ldrsb.w	r2, [r7, #2095]	; 0x82f
 8006ae6:	4b3d      	ldr	r3, [pc, #244]	; (8006bdc <StartRxW5500Task+0x248>)
 8006ae8:	701a      	strb	r2, [r3, #0]
                        xSemaphoreGive(socketMutexHandle);
 8006aea:	4b3d      	ldr	r3, [pc, #244]	; (8006be0 <StartRxW5500Task+0x24c>)
 8006aec:	6818      	ldr	r0, [r3, #0]
 8006aee:	2300      	movs	r3, #0
 8006af0:	2200      	movs	r2, #0
 8006af2:	2100      	movs	r1, #0
 8006af4:	f7fd fd6e 	bl	80045d4 <xQueueGenericSend>
                    }
                }
                int32_t len = getSn_RX_RSR(socket_num);
 8006af8:	f897 382f 	ldrb.w	r3, [r7, #2095]	; 0x82f
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fde4 	bl	80076ca <getSn_RX_RSR>
 8006b02:	4603      	mov	r3, r0
 8006b04:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
                if(len > 0) {
 8006b08:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	dd4d      	ble.n	8006bac <StartRxW5500Task+0x218>
                    len = recv(socket_num, rx_buffer, sizeof(rx_buffer));
 8006b10:	f107 0110 	add.w	r1, r7, #16
 8006b14:	f897 382f 	ldrb.w	r3, [r7, #2095]	; 0x82f
 8006b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f001 faa9 	bl	8008074 <recv>
 8006b22:	f8c7 0828 	str.w	r0, [r7, #2088]	; 0x828
                    if(len > 0) {
 8006b26:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	dd3e      	ble.n	8006bac <StartRxW5500Task+0x218>
                        uint8_t new_duty_cycle = (uint8_t)atoi((const char*)rx_buffer);
 8006b2e:	f107 0310 	add.w	r3, r7, #16
 8006b32:	4618      	mov	r0, r3
 8006b34:	f001 fd06 	bl	8008544 <atoi>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8006b40:	f6a3 0321 	subw	r3, r3, #2081	; 0x821
 8006b44:	701a      	strb	r2, [r3, #0]
                        xQueueSend(dutyCycleQueueHandle, &new_duty_cycle, (TickType_t)10);
 8006b46:	4b27      	ldr	r3, [pc, #156]	; (8006be4 <StartRxW5500Task+0x250>)
 8006b48:	6818      	ldr	r0, [r3, #0]
 8006b4a:	f107 010f 	add.w	r1, r7, #15
 8006b4e:	2300      	movs	r3, #0
 8006b50:	220a      	movs	r2, #10
 8006b52:	f7fd fd3f 	bl	80045d4 <xQueueGenericSend>
                    }
                }
                break;
 8006b56:	e029      	b.n	8006bac <StartRxW5500Task+0x218>
            case SOCK_CLOSE_WAIT:
                disconnect(socket_num);
 8006b58:	f897 382f 	ldrb.w	r3, [r7, #2095]	; 0x82f
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 f8b3 	bl	8007cc8 <disconnect>
                break;
 8006b62:	e024      	b.n	8006bae <StartRxW5500Task+0x21a>
            case SOCK_CLOSED:
                if(g_ActiveSocket != -1) {
 8006b64:	4b1d      	ldr	r3, [pc, #116]	; (8006bdc <StartRxW5500Task+0x248>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	b25b      	sxtb	r3, r3
 8006b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6e:	d012      	beq.n	8006b96 <StartRxW5500Task+0x202>
                    if(xSemaphoreTake(socketMutexHandle, (TickType_t)10) == pdTRUE) {
 8006b70:	4b1b      	ldr	r3, [pc, #108]	; (8006be0 <StartRxW5500Task+0x24c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	210a      	movs	r1, #10
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fd ff0a 	bl	8004990 <xQueueSemaphoreTake>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d109      	bne.n	8006b96 <StartRxW5500Task+0x202>
                        g_ActiveSocket = -1;
 8006b82:	4b16      	ldr	r3, [pc, #88]	; (8006bdc <StartRxW5500Task+0x248>)
 8006b84:	22ff      	movs	r2, #255	; 0xff
 8006b86:	701a      	strb	r2, [r3, #0]
                        xSemaphoreGive(socketMutexHandle);
 8006b88:	4b15      	ldr	r3, [pc, #84]	; (8006be0 <StartRxW5500Task+0x24c>)
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2100      	movs	r1, #0
 8006b92:	f7fd fd1f 	bl	80045d4 <xQueueGenericSend>
                    }
                }
                socket(socket_num, Sn_MR_TCP, port, 0);
 8006b96:	f8b7 282c 	ldrh.w	r2, [r7, #2092]	; 0x82c
 8006b9a:	f897 082f 	ldrb.w	r0, [r7, #2095]	; 0x82f
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	f000 fe95 	bl	80078d0 <socket>
                break;
 8006ba6:	e002      	b.n	8006bae <StartRxW5500Task+0x21a>
            default:
                break;
 8006ba8:	bf00      	nop
 8006baa:	e000      	b.n	8006bae <StartRxW5500Task+0x21a>
                break;
 8006bac:	bf00      	nop
        }
        osDelay(20);
 8006bae:	2014      	movs	r0, #20
 8006bb0:	f7fd fb53 	bl	800425a <osDelay>
        switch(getSn_SR(socket_num)) {
 8006bb4:	e734      	b.n	8006a20 <StartRxW5500Task+0x8c>
 8006bb6:	bf00      	nop
 8006bb8:	40020800 	.word	0x40020800
 8006bbc:	08006cd5 	.word	0x08006cd5
 8006bc0:	08006cbd 	.word	0x08006cbd
 8006bc4:	08006ced 	.word	0x08006ced
 8006bc8:	08006d11 	.word	0x08006d11
 8006bcc:	080090a0 	.word	0x080090a0
 8006bd0:	080090a8 	.word	0x080090a8
 8006bd4:	080090ac 	.word	0x080090ac
 8006bd8:	080090b0 	.word	0x080090b0
 8006bdc:	2000000c 	.word	0x2000000c
 8006be0:	20003e58 	.word	0x20003e58
 8006be4:	20003e50 	.word	0x20003e50

08006be8 <StartTxW5500Task>:
    }
}

// --- Thread de TX (Transmissão) da Ethernet ---
// <-- FIX: Lógica corrigida para ser a de TX
void StartTxW5500Task(void const * argument) {
 8006be8:	b590      	push	{r4, r7, lr}
 8006bea:	b089      	sub	sp, #36	; 0x24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint16_t adc_val;
  int8_t current_socket = -1;
 8006bf0:	23ff      	movs	r3, #255	; 0xff
 8006bf2:	77fb      	strb	r3, [r7, #31]

  for(;;) {
      // Espera bloqueante por um novo valor do ADC (isso não muda)
      if (xQueueReceive(adcValueQueueHandle, &adc_val, portMAX_DELAY) == pdPASS) {
 8006bf4:	4b2c      	ldr	r3, [pc, #176]	; (8006ca8 <StartTxW5500Task+0xc0>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f107 011c 	add.w	r1, r7, #28
 8006bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fd fde5 	bl	80047d0 <xQueueReceive>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d1f3      	bne.n	8006bf4 <StartTxW5500Task+0xc>
          
          // Converte o valor do ADC (0-4095) para porcentagem (0-100)
          // Usamos 4095.0 para forçar a conta a ser feita com ponto flutuante
          uint8_t duty_cycle_percent = (uint8_t)((adc_val / 4095.0) * 100.0);
 8006c0c:	8bbb      	ldrh	r3, [r7, #28]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7f9 fc88 	bl	8000524 <__aeabi_i2d>
 8006c14:	a322      	add	r3, pc, #136	; (adr r3, 8006ca0 <StartTxW5500Task+0xb8>)
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f7f9 fe17 	bl	800084c <__aeabi_ddiv>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4610      	mov	r0, r2
 8006c24:	4619      	mov	r1, r3
 8006c26:	f04f 0200 	mov.w	r2, #0
 8006c2a:	4b20      	ldr	r3, [pc, #128]	; (8006cac <StartTxW5500Task+0xc4>)
 8006c2c:	f7f9 fce4 	bl	80005f8 <__aeabi_dmul>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4610      	mov	r0, r2
 8006c36:	4619      	mov	r1, r3
 8006c38:	f7f9 fef0 	bl	8000a1c <__aeabi_d2uiz>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	77bb      	strb	r3, [r7, #30]

          if(xSemaphoreTake(socketMutexHandle, (TickType_t)10) == pdTRUE) {
 8006c40:	4b1b      	ldr	r3, [pc, #108]	; (8006cb0 <StartTxW5500Task+0xc8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	210a      	movs	r1, #10
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fd fea2 	bl	8004990 <xQueueSemaphoreTake>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d109      	bne.n	8006c66 <StartTxW5500Task+0x7e>
              current_socket = g_ActiveSocket;
 8006c52:	4b18      	ldr	r3, [pc, #96]	; (8006cb4 <StartTxW5500Task+0xcc>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	77fb      	strb	r3, [r7, #31]
              xSemaphoreGive(socketMutexHandle);
 8006c58:	4b15      	ldr	r3, [pc, #84]	; (8006cb0 <StartTxW5500Task+0xc8>)
 8006c5a:	6818      	ldr	r0, [r3, #0]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2100      	movs	r1, #0
 8006c62:	f7fd fcb7 	bl	80045d4 <xQueueGenericSend>
          }
          if(current_socket != -1) {
 8006c66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c6e:	d0c1      	beq.n	8006bf4 <StartTxW5500Task+0xc>
              char tx_buffer[20]; // Aumente um pouco o buffer por segurança
              // Formata a string para enviar a porcentagem calculada
              sprintf(tx_buffer, "Leitura: %u%%\r\n", duty_cycle_percent); 
 8006c70:	7fba      	ldrb	r2, [r7, #30]
 8006c72:	f107 0308 	add.w	r3, r7, #8
 8006c76:	4910      	ldr	r1, [pc, #64]	; (8006cb8 <StartTxW5500Task+0xd0>)
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f001 fcf3 	bl	8008664 <siprintf>
              send(current_socket, (uint8_t*)tx_buffer, strlen(tx_buffer));
 8006c7e:	7ffc      	ldrb	r4, [r7, #31]
 8006c80:	f107 0308 	add.w	r3, r7, #8
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7f9 faa3 	bl	80001d0 <strlen>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	f107 0308 	add.w	r3, r7, #8
 8006c92:	4619      	mov	r1, r3
 8006c94:	4620      	mov	r0, r4
 8006c96:	f001 f899 	bl	8007dcc <send>
      if (xQueueReceive(adcValueQueueHandle, &adc_val, portMAX_DELAY) == pdPASS) {
 8006c9a:	e7ab      	b.n	8006bf4 <StartTxW5500Task+0xc>
 8006c9c:	f3af 8000 	nop.w
 8006ca0:	00000000 	.word	0x00000000
 8006ca4:	40affe00 	.word	0x40affe00
 8006ca8:	20003e54 	.word	0x20003e54
 8006cac:	40590000 	.word	0x40590000
 8006cb0:	20003e58 	.word	0x20003e58
 8006cb4:	2000000c 	.word	0x2000000c
 8006cb8:	080090b4 	.word	0x080090b4

08006cbc <w5500_spi_select>:
      }
    }
}

// --- Funções de Callback para o Driver W5500 ---
void w5500_spi_select(void) {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2110      	movs	r1, #16
 8006cc4:	4802      	ldr	r0, [pc, #8]	; (8006cd0 <w5500_spi_select+0x14>)
 8006cc6:	f7fa ff3b 	bl	8001b40 <HAL_GPIO_WritePin>
}
 8006cca:	bf00      	nop
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	40020800 	.word	0x40020800

08006cd4 <w5500_spi_deselect>:

void w5500_spi_deselect(void) {
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8006cd8:	2201      	movs	r2, #1
 8006cda:	2110      	movs	r1, #16
 8006cdc:	4802      	ldr	r0, [pc, #8]	; (8006ce8 <w5500_spi_deselect+0x14>)
 8006cde:	f7fa ff2f 	bl	8001b40 <HAL_GPIO_WritePin>
}
 8006ce2:	bf00      	nop
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	40020800 	.word	0x40020800

08006cec <w5500_spi_write_byte>:

void w5500_spi_write_byte(uint8_t tx_byte) {
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &tx_byte, 1, HAL_MAX_DELAY);
 8006cf6:	1df9      	adds	r1, r7, #7
 8006cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	4803      	ldr	r0, [pc, #12]	; (8006d0c <w5500_spi_write_byte+0x20>)
 8006d00:	f7fb fc19 	bl	8002536 <HAL_SPI_Transmit>
}
 8006d04:	bf00      	nop
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	200040c4 	.word	0x200040c4

08006d10 <w5500_spi_read_byte>:

uint8_t w5500_spi_read_byte(void) {
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
    uint8_t rx_byte;
    HAL_SPI_Receive(&hspi1, &rx_byte, 1, HAL_MAX_DELAY);
 8006d16:	1df9      	adds	r1, r7, #7
 8006d18:	f04f 33ff 	mov.w	r3, #4294967295
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	4804      	ldr	r0, [pc, #16]	; (8006d30 <w5500_spi_read_byte+0x20>)
 8006d20:	f7fb fd4d 	bl	80027be <HAL_SPI_Receive>
    return rx_byte;
 8006d24:	79fb      	ldrb	r3, [r7, #7]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	200040c4 	.word	0x200040c4

08006d34 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b088      	sub	sp, #32
 8006d38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d3a:	f107 030c 	add.w	r3, r7, #12
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	605a      	str	r2, [r3, #4]
 8006d44:	609a      	str	r2, [r3, #8]
 8006d46:	60da      	str	r2, [r3, #12]
 8006d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60bb      	str	r3, [r7, #8]
 8006d4e:	4b18      	ldr	r3, [pc, #96]	; (8006db0 <MX_GPIO_Init+0x7c>)
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	4a17      	ldr	r2, [pc, #92]	; (8006db0 <MX_GPIO_Init+0x7c>)
 8006d54:	f043 0301 	orr.w	r3, r3, #1
 8006d58:	6313      	str	r3, [r2, #48]	; 0x30
 8006d5a:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <MX_GPIO_Init+0x7c>)
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	60bb      	str	r3, [r7, #8]
 8006d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d66:	2300      	movs	r3, #0
 8006d68:	607b      	str	r3, [r7, #4]
 8006d6a:	4b11      	ldr	r3, [pc, #68]	; (8006db0 <MX_GPIO_Init+0x7c>)
 8006d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6e:	4a10      	ldr	r2, [pc, #64]	; (8006db0 <MX_GPIO_Init+0x7c>)
 8006d70:	f043 0304 	orr.w	r3, r3, #4
 8006d74:	6313      	str	r3, [r2, #48]	; 0x30
 8006d76:	4b0e      	ldr	r3, [pc, #56]	; (8006db0 <MX_GPIO_Init+0x7c>)
 8006d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7a:	f003 0304 	and.w	r3, r3, #4
 8006d7e:	607b      	str	r3, [r7, #4]
 8006d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, W5500_CS_Pin|W5500_RST_Pin, GPIO_PIN_RESET);
 8006d82:	2200      	movs	r2, #0
 8006d84:	2130      	movs	r1, #48	; 0x30
 8006d86:	480b      	ldr	r0, [pc, #44]	; (8006db4 <MX_GPIO_Init+0x80>)
 8006d88:	f7fa feda 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : W5500_CS_Pin W5500_RST_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin|W5500_RST_Pin;
 8006d8c:	2330      	movs	r3, #48	; 0x30
 8006d8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d90:	2301      	movs	r3, #1
 8006d92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d94:	2300      	movs	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d9c:	f107 030c 	add.w	r3, r7, #12
 8006da0:	4619      	mov	r1, r3
 8006da2:	4804      	ldr	r0, [pc, #16]	; (8006db4 <MX_GPIO_Init+0x80>)
 8006da4:	f7fa fd30 	bl	8001808 <HAL_GPIO_Init>

}
 8006da8:	bf00      	nop
 8006daa:	3720      	adds	r7, #32
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	40023800 	.word	0x40023800
 8006db4:	40020800 	.word	0x40020800

08006db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006dbc:	f7f9 ffcc 	bl	8000d58 <HAL_Init>
  // don't buffer the output of printf
  //setbuf(stdout, NULL);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006dc0:	f000 f810 	bl	8006de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006dc4:	f7ff ffb6 	bl	8006d34 <MX_GPIO_Init>
  MX_ADC1_Init();
 8006dc8:	f7ff fbf8 	bl	80065bc <MX_ADC1_Init>
  MX_SPI1_Init();
 8006dcc:	f000 f86e 	bl	8006eac <MX_SPI1_Init>
  MX_TIM2_Init();
 8006dd0:	f000 f98a 	bl	80070e8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8006dd4:	f000 fa38 	bl	8007248 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8006dd8:	f7ff fca0 	bl	800671c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8006ddc:	f7fd f9ea 	bl	80041b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006de0:	e7fe      	b.n	8006de0 <main+0x28>
	...

08006de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b094      	sub	sp, #80	; 0x50
 8006de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006dea:	f107 0320 	add.w	r3, r7, #32
 8006dee:	2230      	movs	r2, #48	; 0x30
 8006df0:	2100      	movs	r1, #0
 8006df2:	4618      	mov	r0, r3
 8006df4:	f001 fc56 	bl	80086a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006df8:	f107 030c 	add.w	r3, r7, #12
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	605a      	str	r2, [r3, #4]
 8006e02:	609a      	str	r2, [r3, #8]
 8006e04:	60da      	str	r2, [r3, #12]
 8006e06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60bb      	str	r3, [r7, #8]
 8006e0c:	4b22      	ldr	r3, [pc, #136]	; (8006e98 <SystemClock_Config+0xb4>)
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e10:	4a21      	ldr	r2, [pc, #132]	; (8006e98 <SystemClock_Config+0xb4>)
 8006e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e16:	6413      	str	r3, [r2, #64]	; 0x40
 8006e18:	4b1f      	ldr	r3, [pc, #124]	; (8006e98 <SystemClock_Config+0xb4>)
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e20:	60bb      	str	r3, [r7, #8]
 8006e22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e24:	2300      	movs	r3, #0
 8006e26:	607b      	str	r3, [r7, #4]
 8006e28:	4b1c      	ldr	r3, [pc, #112]	; (8006e9c <SystemClock_Config+0xb8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a1b      	ldr	r2, [pc, #108]	; (8006e9c <SystemClock_Config+0xb8>)
 8006e2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	4b19      	ldr	r3, [pc, #100]	; (8006e9c <SystemClock_Config+0xb8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e3c:	607b      	str	r3, [r7, #4]
 8006e3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006e40:	2302      	movs	r3, #2
 8006e42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006e44:	2301      	movs	r3, #1
 8006e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006e48:	2310      	movs	r3, #16
 8006e4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e50:	f107 0320 	add.w	r3, r7, #32
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fa fe8d 	bl	8001b74 <HAL_RCC_OscConfig>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8006e60:	f000 f81e 	bl	8006ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e64:	230f      	movs	r3, #15
 8006e66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006e70:	2300      	movs	r3, #0
 8006e72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006e74:	2300      	movs	r3, #0
 8006e76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006e78:	f107 030c 	add.w	r3, r7, #12
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fb f8f0 	bl	8002064 <HAL_RCC_ClockConfig>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8006e8a:	f000 f809 	bl	8006ea0 <Error_Handler>
  }
}
 8006e8e:	bf00      	nop
 8006e90:	3750      	adds	r7, #80	; 0x50
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40023800 	.word	0x40023800
 8006e9c:	40007000 	.word	0x40007000

08006ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006ea4:	b672      	cpsid	i
}
 8006ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006ea8:	e7fe      	b.n	8006ea8 <Error_Handler+0x8>
	...

08006eac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8006eb0:	4b1b      	ldr	r3, [pc, #108]	; (8006f20 <MX_SPI1_Init+0x74>)
 8006eb2:	4a1c      	ldr	r2, [pc, #112]	; (8006f24 <MX_SPI1_Init+0x78>)
 8006eb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006eb6:	4b1a      	ldr	r3, [pc, #104]	; (8006f20 <MX_SPI1_Init+0x74>)
 8006eb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006ebc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006ebe:	4b18      	ldr	r3, [pc, #96]	; (8006f20 <MX_SPI1_Init+0x74>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006ec4:	4b16      	ldr	r3, [pc, #88]	; (8006f20 <MX_SPI1_Init+0x74>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006eca:	4b15      	ldr	r3, [pc, #84]	; (8006f20 <MX_SPI1_Init+0x74>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006ed0:	4b13      	ldr	r3, [pc, #76]	; (8006f20 <MX_SPI1_Init+0x74>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006ed6:	4b12      	ldr	r3, [pc, #72]	; (8006f20 <MX_SPI1_Init+0x74>)
 8006ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006edc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006ede:	4b10      	ldr	r3, [pc, #64]	; (8006f20 <MX_SPI1_Init+0x74>)
 8006ee0:	2210      	movs	r2, #16
 8006ee2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006ee4:	4b0e      	ldr	r3, [pc, #56]	; (8006f20 <MX_SPI1_Init+0x74>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006eea:	4b0d      	ldr	r3, [pc, #52]	; (8006f20 <MX_SPI1_Init+0x74>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ef0:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <MX_SPI1_Init+0x74>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006ef6:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <MX_SPI1_Init+0x74>)
 8006ef8:	220a      	movs	r2, #10
 8006efa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006efc:	4808      	ldr	r0, [pc, #32]	; (8006f20 <MX_SPI1_Init+0x74>)
 8006efe:	f7fb fa91 	bl	8002424 <HAL_SPI_Init>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006f08:	f7ff ffca 	bl	8006ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8006f0c:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <MX_SPI1_Init+0x74>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	4b03      	ldr	r3, [pc, #12]	; (8006f20 <MX_SPI1_Init+0x74>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f1a:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8006f1c:	bf00      	nop
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	200040c4 	.word	0x200040c4
 8006f24:	40013000 	.word	0x40013000

08006f28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08a      	sub	sp, #40	; 0x28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f30:	f107 0314 	add.w	r3, r7, #20
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	605a      	str	r2, [r3, #4]
 8006f3a:	609a      	str	r2, [r3, #8]
 8006f3c:	60da      	str	r2, [r3, #12]
 8006f3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a19      	ldr	r2, [pc, #100]	; (8006fac <HAL_SPI_MspInit+0x84>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d12b      	bne.n	8006fa2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	613b      	str	r3, [r7, #16]
 8006f4e:	4b18      	ldr	r3, [pc, #96]	; (8006fb0 <HAL_SPI_MspInit+0x88>)
 8006f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f52:	4a17      	ldr	r2, [pc, #92]	; (8006fb0 <HAL_SPI_MspInit+0x88>)
 8006f54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f58:	6453      	str	r3, [r2, #68]	; 0x44
 8006f5a:	4b15      	ldr	r3, [pc, #84]	; (8006fb0 <HAL_SPI_MspInit+0x88>)
 8006f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f66:	2300      	movs	r3, #0
 8006f68:	60fb      	str	r3, [r7, #12]
 8006f6a:	4b11      	ldr	r3, [pc, #68]	; (8006fb0 <HAL_SPI_MspInit+0x88>)
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6e:	4a10      	ldr	r2, [pc, #64]	; (8006fb0 <HAL_SPI_MspInit+0x88>)
 8006f70:	f043 0301 	orr.w	r3, r3, #1
 8006f74:	6313      	str	r3, [r2, #48]	; 0x30
 8006f76:	4b0e      	ldr	r3, [pc, #56]	; (8006fb0 <HAL_SPI_MspInit+0x88>)
 8006f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006f82:	23e0      	movs	r3, #224	; 0xe0
 8006f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f86:	2302      	movs	r3, #2
 8006f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006f92:	2305      	movs	r3, #5
 8006f94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f96:	f107 0314 	add.w	r3, r7, #20
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	4805      	ldr	r0, [pc, #20]	; (8006fb4 <HAL_SPI_MspInit+0x8c>)
 8006f9e:	f7fa fc33 	bl	8001808 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8006fa2:	bf00      	nop
 8006fa4:	3728      	adds	r7, #40	; 0x28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	40013000 	.word	0x40013000
 8006fb0:	40023800 	.word	0x40023800
 8006fb4:	40020000 	.word	0x40020000

08006fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	607b      	str	r3, [r7, #4]
 8006fc2:	4b12      	ldr	r3, [pc, #72]	; (800700c <HAL_MspInit+0x54>)
 8006fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc6:	4a11      	ldr	r2, [pc, #68]	; (800700c <HAL_MspInit+0x54>)
 8006fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8006fce:	4b0f      	ldr	r3, [pc, #60]	; (800700c <HAL_MspInit+0x54>)
 8006fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fd6:	607b      	str	r3, [r7, #4]
 8006fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006fda:	2300      	movs	r3, #0
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	4b0b      	ldr	r3, [pc, #44]	; (800700c <HAL_MspInit+0x54>)
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	4a0a      	ldr	r2, [pc, #40]	; (800700c <HAL_MspInit+0x54>)
 8006fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8006fea:	4b08      	ldr	r3, [pc, #32]	; (800700c <HAL_MspInit+0x54>)
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff2:	603b      	str	r3, [r7, #0]
 8006ff4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	210f      	movs	r1, #15
 8006ffa:	f06f 0001 	mvn.w	r0, #1
 8006ffe:	f7fa fbda 	bl	80017b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007002:	bf00      	nop
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	40023800 	.word	0x40023800

08007010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007010:	b480      	push	{r7}
 8007012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007014:	e7fe      	b.n	8007014 <NMI_Handler+0x4>

08007016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007016:	b480      	push	{r7}
 8007018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800701a:	e7fe      	b.n	800701a <HardFault_Handler+0x4>

0800701c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800701c:	b480      	push	{r7}
 800701e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007020:	e7fe      	b.n	8007020 <MemManage_Handler+0x4>

08007022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007022:	b480      	push	{r7}
 8007024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007026:	e7fe      	b.n	8007026 <BusFault_Handler+0x4>

08007028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007028:	b480      	push	{r7}
 800702a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800702c:	e7fe      	b.n	800702c <UsageFault_Handler+0x4>

0800702e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800702e:	b480      	push	{r7}
 8007030:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007032:	bf00      	nop
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007040:	f7f9 fedc 	bl	8000dfc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8007044:	f7fe fc9e 	bl	8005984 <xTaskGetSchedulerState>
 8007048:	4603      	mov	r3, r0
 800704a:	2b01      	cmp	r3, #1
 800704c:	d001      	beq.n	8007052 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800704e:	f7ff f87b 	bl	8006148 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007052:	bf00      	nop
 8007054:	bd80      	pop	{r7, pc}
	...

08007058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007060:	4a14      	ldr	r2, [pc, #80]	; (80070b4 <_sbrk+0x5c>)
 8007062:	4b15      	ldr	r3, [pc, #84]	; (80070b8 <_sbrk+0x60>)
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800706c:	4b13      	ldr	r3, [pc, #76]	; (80070bc <_sbrk+0x64>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d102      	bne.n	800707a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007074:	4b11      	ldr	r3, [pc, #68]	; (80070bc <_sbrk+0x64>)
 8007076:	4a12      	ldr	r2, [pc, #72]	; (80070c0 <_sbrk+0x68>)
 8007078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800707a:	4b10      	ldr	r3, [pc, #64]	; (80070bc <_sbrk+0x64>)
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4413      	add	r3, r2
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	429a      	cmp	r2, r3
 8007086:	d207      	bcs.n	8007098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007088:	f001 fb14 	bl	80086b4 <__errno>
 800708c:	4603      	mov	r3, r0
 800708e:	220c      	movs	r2, #12
 8007090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007092:	f04f 33ff 	mov.w	r3, #4294967295
 8007096:	e009      	b.n	80070ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007098:	4b08      	ldr	r3, [pc, #32]	; (80070bc <_sbrk+0x64>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800709e:	4b07      	ldr	r3, [pc, #28]	; (80070bc <_sbrk+0x64>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4413      	add	r3, r2
 80070a6:	4a05      	ldr	r2, [pc, #20]	; (80070bc <_sbrk+0x64>)
 80070a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80070aa:	68fb      	ldr	r3, [r7, #12]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3718      	adds	r7, #24
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	20020000 	.word	0x20020000
 80070b8:	00000400 	.word	0x00000400
 80070bc:	2000411c 	.word	0x2000411c
 80070c0:	20004320 	.word	0x20004320

080070c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80070c4:	b480      	push	{r7}
 80070c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80070c8:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <SystemInit+0x20>)
 80070ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ce:	4a05      	ldr	r2, [pc, #20]	; (80070e4 <SystemInit+0x20>)
 80070d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80070d8:	bf00      	nop
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	e000ed00 	.word	0xe000ed00

080070e8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08a      	sub	sp, #40	; 0x28
 80070ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80070ee:	f107 0320 	add.w	r3, r7, #32
 80070f2:	2200      	movs	r2, #0
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80070f8:	1d3b      	adds	r3, r7, #4
 80070fa:	2200      	movs	r2, #0
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	605a      	str	r2, [r3, #4]
 8007100:	609a      	str	r2, [r3, #8]
 8007102:	60da      	str	r2, [r3, #12]
 8007104:	611a      	str	r2, [r3, #16]
 8007106:	615a      	str	r2, [r3, #20]
 8007108:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800710a:	4b22      	ldr	r3, [pc, #136]	; (8007194 <MX_TIM2_Init+0xac>)
 800710c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007110:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007112:	4b20      	ldr	r3, [pc, #128]	; (8007194 <MX_TIM2_Init+0xac>)
 8007114:	2200      	movs	r2, #0
 8007116:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007118:	4b1e      	ldr	r3, [pc, #120]	; (8007194 <MX_TIM2_Init+0xac>)
 800711a:	2200      	movs	r2, #0
 800711c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4199; 
 800711e:	4b1d      	ldr	r3, [pc, #116]	; (8007194 <MX_TIM2_Init+0xac>)
 8007120:	f241 0267 	movw	r2, #4199	; 0x1067
 8007124:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007126:	4b1b      	ldr	r3, [pc, #108]	; (8007194 <MX_TIM2_Init+0xac>)
 8007128:	2200      	movs	r2, #0
 800712a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800712c:	4b19      	ldr	r3, [pc, #100]	; (8007194 <MX_TIM2_Init+0xac>)
 800712e:	2200      	movs	r2, #0
 8007130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007132:	4818      	ldr	r0, [pc, #96]	; (8007194 <MX_TIM2_Init+0xac>)
 8007134:	f7fb ff48 	bl	8002fc8 <HAL_TIM_PWM_Init>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800713e:	f7ff feaf 	bl	8006ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007142:	2300      	movs	r3, #0
 8007144:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007146:	2300      	movs	r3, #0
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800714a:	f107 0320 	add.w	r3, r7, #32
 800714e:	4619      	mov	r1, r3
 8007150:	4810      	ldr	r0, [pc, #64]	; (8007194 <MX_TIM2_Init+0xac>)
 8007152:	f7fc fb8f 	bl	8003874 <HAL_TIMEx_MasterConfigSynchronization>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800715c:	f7ff fea0 	bl	8006ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007160:	2360      	movs	r3, #96	; 0x60
 8007162:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007168:	2300      	movs	r3, #0
 800716a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800716c:	2300      	movs	r3, #0
 800716e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007170:	1d3b      	adds	r3, r7, #4
 8007172:	2200      	movs	r2, #0
 8007174:	4619      	mov	r1, r3
 8007176:	4807      	ldr	r0, [pc, #28]	; (8007194 <MX_TIM2_Init+0xac>)
 8007178:	f7fc f83e 	bl	80031f8 <HAL_TIM_PWM_ConfigChannel>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8007182:	f7ff fe8d 	bl	8006ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007186:	4803      	ldr	r0, [pc, #12]	; (8007194 <MX_TIM2_Init+0xac>)
 8007188:	f000 f826 	bl	80071d8 <HAL_TIM_MspPostInit>

}
 800718c:	bf00      	nop
 800718e:	3728      	adds	r7, #40	; 0x28
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	20004120 	.word	0x20004120

08007198 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071a8:	d10d      	bne.n	80071c6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	4a08      	ldr	r2, [pc, #32]	; (80071d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80071b4:	f043 0301 	orr.w	r3, r3, #1
 80071b8:	6413      	str	r3, [r2, #64]	; 0x40
 80071ba:	4b06      	ldr	r3, [pc, #24]	; (80071d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80071c6:	bf00      	nop
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	40023800 	.word	0x40023800

080071d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071e0:	f107 030c 	add.w	r3, r7, #12
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	605a      	str	r2, [r3, #4]
 80071ea:	609a      	str	r2, [r3, #8]
 80071ec:	60da      	str	r2, [r3, #12]
 80071ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f8:	d11e      	bne.n	8007238 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071fa:	2300      	movs	r3, #0
 80071fc:	60bb      	str	r3, [r7, #8]
 80071fe:	4b10      	ldr	r3, [pc, #64]	; (8007240 <HAL_TIM_MspPostInit+0x68>)
 8007200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007202:	4a0f      	ldr	r2, [pc, #60]	; (8007240 <HAL_TIM_MspPostInit+0x68>)
 8007204:	f043 0301 	orr.w	r3, r3, #1
 8007208:	6313      	str	r3, [r2, #48]	; 0x30
 800720a:	4b0d      	ldr	r3, [pc, #52]	; (8007240 <HAL_TIM_MspPostInit+0x68>)
 800720c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	60bb      	str	r3, [r7, #8]
 8007214:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800721a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800721c:	2302      	movs	r3, #2
 800721e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007220:	2300      	movs	r3, #0
 8007222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007224:	2300      	movs	r3, #0
 8007226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007228:	2301      	movs	r3, #1
 800722a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800722c:	f107 030c 	add.w	r3, r7, #12
 8007230:	4619      	mov	r1, r3
 8007232:	4804      	ldr	r0, [pc, #16]	; (8007244 <HAL_TIM_MspPostInit+0x6c>)
 8007234:	f7fa fae8 	bl	8001808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8007238:	bf00      	nop
 800723a:	3720      	adds	r7, #32
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	40023800 	.word	0x40023800
 8007244:	40020000 	.word	0x40020000

08007248 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800724c:	4b11      	ldr	r3, [pc, #68]	; (8007294 <MX_USART2_UART_Init+0x4c>)
 800724e:	4a12      	ldr	r2, [pc, #72]	; (8007298 <MX_USART2_UART_Init+0x50>)
 8007250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007252:	4b10      	ldr	r3, [pc, #64]	; (8007294 <MX_USART2_UART_Init+0x4c>)
 8007254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800725a:	4b0e      	ldr	r3, [pc, #56]	; (8007294 <MX_USART2_UART_Init+0x4c>)
 800725c:	2200      	movs	r2, #0
 800725e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007260:	4b0c      	ldr	r3, [pc, #48]	; (8007294 <MX_USART2_UART_Init+0x4c>)
 8007262:	2200      	movs	r2, #0
 8007264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007266:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <MX_USART2_UART_Init+0x4c>)
 8007268:	2200      	movs	r2, #0
 800726a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800726c:	4b09      	ldr	r3, [pc, #36]	; (8007294 <MX_USART2_UART_Init+0x4c>)
 800726e:	220c      	movs	r2, #12
 8007270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007272:	4b08      	ldr	r3, [pc, #32]	; (8007294 <MX_USART2_UART_Init+0x4c>)
 8007274:	2200      	movs	r2, #0
 8007276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007278:	4b06      	ldr	r3, [pc, #24]	; (8007294 <MX_USART2_UART_Init+0x4c>)
 800727a:	2200      	movs	r2, #0
 800727c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800727e:	4805      	ldr	r0, [pc, #20]	; (8007294 <MX_USART2_UART_Init+0x4c>)
 8007280:	f7fc fb74 	bl	800396c <HAL_UART_Init>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800728a:	f7ff fe09 	bl	8006ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800728e:	bf00      	nop
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20004168 	.word	0x20004168
 8007298:	40004400 	.word	0x40004400

0800729c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08a      	sub	sp, #40	; 0x28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072a4:	f107 0314 	add.w	r3, r7, #20
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]
 80072ac:	605a      	str	r2, [r3, #4]
 80072ae:	609a      	str	r2, [r3, #8]
 80072b0:	60da      	str	r2, [r3, #12]
 80072b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a19      	ldr	r2, [pc, #100]	; (8007320 <HAL_UART_MspInit+0x84>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d12b      	bne.n	8007316 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80072be:	2300      	movs	r3, #0
 80072c0:	613b      	str	r3, [r7, #16]
 80072c2:	4b18      	ldr	r3, [pc, #96]	; (8007324 <HAL_UART_MspInit+0x88>)
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	4a17      	ldr	r2, [pc, #92]	; (8007324 <HAL_UART_MspInit+0x88>)
 80072c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072cc:	6413      	str	r3, [r2, #64]	; 0x40
 80072ce:	4b15      	ldr	r3, [pc, #84]	; (8007324 <HAL_UART_MspInit+0x88>)
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072d6:	613b      	str	r3, [r7, #16]
 80072d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	4b11      	ldr	r3, [pc, #68]	; (8007324 <HAL_UART_MspInit+0x88>)
 80072e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e2:	4a10      	ldr	r2, [pc, #64]	; (8007324 <HAL_UART_MspInit+0x88>)
 80072e4:	f043 0301 	orr.w	r3, r3, #1
 80072e8:	6313      	str	r3, [r2, #48]	; 0x30
 80072ea:	4b0e      	ldr	r3, [pc, #56]	; (8007324 <HAL_UART_MspInit+0x88>)
 80072ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80072f6:	230c      	movs	r3, #12
 80072f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072fa:	2302      	movs	r3, #2
 80072fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007302:	2303      	movs	r3, #3
 8007304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007306:	2307      	movs	r3, #7
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800730a:	f107 0314 	add.w	r3, r7, #20
 800730e:	4619      	mov	r1, r3
 8007310:	4805      	ldr	r0, [pc, #20]	; (8007328 <HAL_UART_MspInit+0x8c>)
 8007312:	f7fa fa79 	bl	8001808 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007316:	bf00      	nop
 8007318:	3728      	adds	r7, #40	; 0x28
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	40004400 	.word	0x40004400
 8007324:	40023800 	.word	0x40023800
 8007328:	40020000 	.word	0x40020000

0800732c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800732c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007364 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007330:	f7ff fec8 	bl	80070c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007334:	480c      	ldr	r0, [pc, #48]	; (8007368 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007336:	490d      	ldr	r1, [pc, #52]	; (800736c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007338:	4a0d      	ldr	r2, [pc, #52]	; (8007370 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800733a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800733c:	e002      	b.n	8007344 <LoopCopyDataInit>

0800733e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800733e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007342:	3304      	adds	r3, #4

08007344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007348:	d3f9      	bcc.n	800733e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800734a:	4a0a      	ldr	r2, [pc, #40]	; (8007374 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800734c:	4c0a      	ldr	r4, [pc, #40]	; (8007378 <LoopFillZerobss+0x22>)
  movs r3, #0
 800734e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007350:	e001      	b.n	8007356 <LoopFillZerobss>

08007352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007354:	3204      	adds	r2, #4

08007356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007358:	d3fb      	bcc.n	8007352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800735a:	f001 f9b1 	bl	80086c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800735e:	f7ff fd2b 	bl	8006db8 <main>
  bx  lr    
 8007362:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800736c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8007370:	08009220 	.word	0x08009220
  ldr r2, =_sbss
 8007374:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8007378:	2000431c 	.word	0x2000431c

0800737c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800737c:	e7fe      	b.n	800737c <ADC_IRQHandler>
	...

08007380 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8007388:	4b22      	ldr	r3, [pc, #136]	; (8007414 <WIZCHIP_READ+0x94>)
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800738e:	4b21      	ldr	r3, [pc, #132]	; (8007414 <WIZCHIP_READ+0x94>)
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007394:	4b1f      	ldr	r3, [pc, #124]	; (8007414 <WIZCHIP_READ+0x94>)
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <WIZCHIP_READ+0x24>
 800739c:	4b1d      	ldr	r3, [pc, #116]	; (8007414 <WIZCHIP_READ+0x94>)
 800739e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d114      	bne.n	80073ce <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80073a4:	4b1b      	ldr	r3, [pc, #108]	; (8007414 <WIZCHIP_READ+0x94>)
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	0c12      	lsrs	r2, r2, #16
 80073ac:	b2d2      	uxtb	r2, r2
 80073ae:	4610      	mov	r0, r2
 80073b0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80073b2:	4b18      	ldr	r3, [pc, #96]	; (8007414 <WIZCHIP_READ+0x94>)
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	0a12      	lsrs	r2, r2, #8
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	4610      	mov	r0, r2
 80073be:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80073c0:	4b14      	ldr	r3, [pc, #80]	; (8007414 <WIZCHIP_READ+0x94>)
 80073c2:	6a1b      	ldr	r3, [r3, #32]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	b2d2      	uxtb	r2, r2
 80073c8:	4610      	mov	r0, r2
 80073ca:	4798      	blx	r3
 80073cc:	e011      	b.n	80073f2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	0c1b      	lsrs	r3, r3, #16
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	0a1b      	lsrs	r3, r3, #8
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80073e4:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <WIZCHIP_READ+0x94>)
 80073e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e8:	f107 020c 	add.w	r2, r7, #12
 80073ec:	2103      	movs	r1, #3
 80073ee:	4610      	mov	r0, r2
 80073f0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80073f2:	4b08      	ldr	r3, [pc, #32]	; (8007414 <WIZCHIP_READ+0x94>)
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	4798      	blx	r3
 80073f8:	4603      	mov	r3, r0
 80073fa:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80073fc:	4b05      	ldr	r3, [pc, #20]	; (8007414 <WIZCHIP_READ+0x94>)
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007402:	4b04      	ldr	r3, [pc, #16]	; (8007414 <WIZCHIP_READ+0x94>)
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	4798      	blx	r3
   return ret;
 8007408:	7bfb      	ldrb	r3, [r7, #15]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	20000018 	.word	0x20000018

08007418 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8007424:	4b22      	ldr	r3, [pc, #136]	; (80074b0 <WIZCHIP_WRITE+0x98>)
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	4798      	blx	r3
   WIZCHIP.CS._select();
 800742a:	4b21      	ldr	r3, [pc, #132]	; (80074b0 <WIZCHIP_WRITE+0x98>)
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f043 0304 	orr.w	r3, r3, #4
 8007436:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007438:	4b1d      	ldr	r3, [pc, #116]	; (80074b0 <WIZCHIP_WRITE+0x98>)
 800743a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743c:	2b00      	cmp	r3, #0
 800743e:	d119      	bne.n	8007474 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007440:	4b1b      	ldr	r3, [pc, #108]	; (80074b0 <WIZCHIP_WRITE+0x98>)
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	0c12      	lsrs	r2, r2, #16
 8007448:	b2d2      	uxtb	r2, r2
 800744a:	4610      	mov	r0, r2
 800744c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800744e:	4b18      	ldr	r3, [pc, #96]	; (80074b0 <WIZCHIP_WRITE+0x98>)
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	0a12      	lsrs	r2, r2, #8
 8007456:	b2d2      	uxtb	r2, r2
 8007458:	4610      	mov	r0, r2
 800745a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800745c:	4b14      	ldr	r3, [pc, #80]	; (80074b0 <WIZCHIP_WRITE+0x98>)
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	b2d2      	uxtb	r2, r2
 8007464:	4610      	mov	r0, r2
 8007466:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8007468:	4b11      	ldr	r3, [pc, #68]	; (80074b0 <WIZCHIP_WRITE+0x98>)
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	78fa      	ldrb	r2, [r7, #3]
 800746e:	4610      	mov	r0, r2
 8007470:	4798      	blx	r3
 8007472:	e013      	b.n	800749c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	0c1b      	lsrs	r3, r3, #16
 8007478:	b2db      	uxtb	r3, r3
 800747a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	0a1b      	lsrs	r3, r3, #8
 8007480:	b2db      	uxtb	r3, r3
 8007482:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	b2db      	uxtb	r3, r3
 8007488:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800748a:	78fb      	ldrb	r3, [r7, #3]
 800748c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800748e:	4b08      	ldr	r3, [pc, #32]	; (80074b0 <WIZCHIP_WRITE+0x98>)
 8007490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007492:	f107 020c 	add.w	r2, r7, #12
 8007496:	2104      	movs	r1, #4
 8007498:	4610      	mov	r0, r2
 800749a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800749c:	4b04      	ldr	r3, [pc, #16]	; (80074b0 <WIZCHIP_WRITE+0x98>)
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80074a2:	4b03      	ldr	r3, [pc, #12]	; (80074b0 <WIZCHIP_WRITE+0x98>)
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	4798      	blx	r3
}
 80074a8:	bf00      	nop
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	20000018 	.word	0x20000018

080074b4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80074b4:	b590      	push	{r4, r7, lr}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	4613      	mov	r3, r2
 80074c0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80074c2:	4b2b      	ldr	r3, [pc, #172]	; (8007570 <WIZCHIP_READ_BUF+0xbc>)
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80074c8:	4b29      	ldr	r3, [pc, #164]	; (8007570 <WIZCHIP_READ_BUF+0xbc>)
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80074ce:	4b28      	ldr	r3, [pc, #160]	; (8007570 <WIZCHIP_READ_BUF+0xbc>)
 80074d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <WIZCHIP_READ_BUF+0x2a>
 80074d6:	4b26      	ldr	r3, [pc, #152]	; (8007570 <WIZCHIP_READ_BUF+0xbc>)
 80074d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d126      	bne.n	800752c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80074de:	4b24      	ldr	r3, [pc, #144]	; (8007570 <WIZCHIP_READ_BUF+0xbc>)
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	0c12      	lsrs	r2, r2, #16
 80074e6:	b2d2      	uxtb	r2, r2
 80074e8:	4610      	mov	r0, r2
 80074ea:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80074ec:	4b20      	ldr	r3, [pc, #128]	; (8007570 <WIZCHIP_READ_BUF+0xbc>)
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	0a12      	lsrs	r2, r2, #8
 80074f4:	b2d2      	uxtb	r2, r2
 80074f6:	4610      	mov	r0, r2
 80074f8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80074fa:	4b1d      	ldr	r3, [pc, #116]	; (8007570 <WIZCHIP_READ_BUF+0xbc>)
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	b2d2      	uxtb	r2, r2
 8007502:	4610      	mov	r0, r2
 8007504:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8007506:	2300      	movs	r3, #0
 8007508:	82fb      	strh	r3, [r7, #22]
 800750a:	e00a      	b.n	8007522 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800750c:	4b18      	ldr	r3, [pc, #96]	; (8007570 <WIZCHIP_READ_BUF+0xbc>)
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	8afa      	ldrh	r2, [r7, #22]
 8007512:	68b9      	ldr	r1, [r7, #8]
 8007514:	188c      	adds	r4, r1, r2
 8007516:	4798      	blx	r3
 8007518:	4603      	mov	r3, r0
 800751a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800751c:	8afb      	ldrh	r3, [r7, #22]
 800751e:	3301      	adds	r3, #1
 8007520:	82fb      	strh	r3, [r7, #22]
 8007522:	8afa      	ldrh	r2, [r7, #22]
 8007524:	88fb      	ldrh	r3, [r7, #6]
 8007526:	429a      	cmp	r2, r3
 8007528:	d3f0      	bcc.n	800750c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800752a:	e017      	b.n	800755c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	0c1b      	lsrs	r3, r3, #16
 8007530:	b2db      	uxtb	r3, r3
 8007532:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	0a1b      	lsrs	r3, r3, #8
 8007538:	b2db      	uxtb	r3, r3
 800753a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	b2db      	uxtb	r3, r3
 8007540:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007542:	4b0b      	ldr	r3, [pc, #44]	; (8007570 <WIZCHIP_READ_BUF+0xbc>)
 8007544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007546:	f107 0210 	add.w	r2, r7, #16
 800754a:	2103      	movs	r1, #3
 800754c:	4610      	mov	r0, r2
 800754e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8007550:	4b07      	ldr	r3, [pc, #28]	; (8007570 <WIZCHIP_READ_BUF+0xbc>)
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	88fa      	ldrh	r2, [r7, #6]
 8007556:	4611      	mov	r1, r2
 8007558:	68b8      	ldr	r0, [r7, #8]
 800755a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800755c:	4b04      	ldr	r3, [pc, #16]	; (8007570 <WIZCHIP_READ_BUF+0xbc>)
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007562:	4b03      	ldr	r3, [pc, #12]	; (8007570 <WIZCHIP_READ_BUF+0xbc>)
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	4798      	blx	r3
}
 8007568:	bf00      	nop
 800756a:	371c      	adds	r7, #28
 800756c:	46bd      	mov	sp, r7
 800756e:	bd90      	pop	{r4, r7, pc}
 8007570:	20000018 	.word	0x20000018

08007574 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	4613      	mov	r3, r2
 8007580:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8007582:	4b2b      	ldr	r3, [pc, #172]	; (8007630 <WIZCHIP_WRITE_BUF+0xbc>)
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007588:	4b29      	ldr	r3, [pc, #164]	; (8007630 <WIZCHIP_WRITE_BUF+0xbc>)
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f043 0304 	orr.w	r3, r3, #4
 8007594:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007596:	4b26      	ldr	r3, [pc, #152]	; (8007630 <WIZCHIP_WRITE_BUF+0xbc>)
 8007598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759a:	2b00      	cmp	r3, #0
 800759c:	d126      	bne.n	80075ec <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800759e:	4b24      	ldr	r3, [pc, #144]	; (8007630 <WIZCHIP_WRITE_BUF+0xbc>)
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	0c12      	lsrs	r2, r2, #16
 80075a6:	b2d2      	uxtb	r2, r2
 80075a8:	4610      	mov	r0, r2
 80075aa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80075ac:	4b20      	ldr	r3, [pc, #128]	; (8007630 <WIZCHIP_WRITE_BUF+0xbc>)
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	0a12      	lsrs	r2, r2, #8
 80075b4:	b2d2      	uxtb	r2, r2
 80075b6:	4610      	mov	r0, r2
 80075b8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80075ba:	4b1d      	ldr	r3, [pc, #116]	; (8007630 <WIZCHIP_WRITE_BUF+0xbc>)
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	b2d2      	uxtb	r2, r2
 80075c2:	4610      	mov	r0, r2
 80075c4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80075c6:	2300      	movs	r3, #0
 80075c8:	82fb      	strh	r3, [r7, #22]
 80075ca:	e00a      	b.n	80075e2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80075cc:	4b18      	ldr	r3, [pc, #96]	; (8007630 <WIZCHIP_WRITE_BUF+0xbc>)
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	8afa      	ldrh	r2, [r7, #22]
 80075d2:	68b9      	ldr	r1, [r7, #8]
 80075d4:	440a      	add	r2, r1
 80075d6:	7812      	ldrb	r2, [r2, #0]
 80075d8:	4610      	mov	r0, r2
 80075da:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80075dc:	8afb      	ldrh	r3, [r7, #22]
 80075de:	3301      	adds	r3, #1
 80075e0:	82fb      	strh	r3, [r7, #22]
 80075e2:	8afa      	ldrh	r2, [r7, #22]
 80075e4:	88fb      	ldrh	r3, [r7, #6]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d3f0      	bcc.n	80075cc <WIZCHIP_WRITE_BUF+0x58>
 80075ea:	e017      	b.n	800761c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	0c1b      	lsrs	r3, r3, #16
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	0a1b      	lsrs	r3, r3, #8
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007602:	4b0b      	ldr	r3, [pc, #44]	; (8007630 <WIZCHIP_WRITE_BUF+0xbc>)
 8007604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007606:	f107 0210 	add.w	r2, r7, #16
 800760a:	2103      	movs	r1, #3
 800760c:	4610      	mov	r0, r2
 800760e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8007610:	4b07      	ldr	r3, [pc, #28]	; (8007630 <WIZCHIP_WRITE_BUF+0xbc>)
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	88fa      	ldrh	r2, [r7, #6]
 8007616:	4611      	mov	r1, r2
 8007618:	68b8      	ldr	r0, [r7, #8]
 800761a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800761c:	4b04      	ldr	r3, [pc, #16]	; (8007630 <WIZCHIP_WRITE_BUF+0xbc>)
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007622:	4b03      	ldr	r3, [pc, #12]	; (8007630 <WIZCHIP_WRITE_BUF+0xbc>)
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	4798      	blx	r3
}
 8007628:	bf00      	nop
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	20000018 	.word	0x20000018

08007634 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8007634:	b590      	push	{r4, r7, lr}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	4603      	mov	r3, r0
 800763c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800763e:	2300      	movs	r3, #0
 8007640:	81fb      	strh	r3, [r7, #14]
 8007642:	2300      	movs	r3, #0
 8007644:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8007646:	79fb      	ldrb	r3, [r7, #7]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	3301      	adds	r3, #1
 800764c:	00db      	lsls	r3, r3, #3
 800764e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff fe94 	bl	8007380 <WIZCHIP_READ>
 8007658:	4603      	mov	r3, r0
 800765a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800765c:	89bb      	ldrh	r3, [r7, #12]
 800765e:	021b      	lsls	r3, r3, #8
 8007660:	b29c      	uxth	r4, r3
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	3301      	adds	r3, #1
 8007668:	00db      	lsls	r3, r3, #3
 800766a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800766e:	4618      	mov	r0, r3
 8007670:	f7ff fe86 	bl	8007380 <WIZCHIP_READ>
 8007674:	4603      	mov	r3, r0
 8007676:	b29b      	uxth	r3, r3
 8007678:	4423      	add	r3, r4
 800767a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800767c:	89bb      	ldrh	r3, [r7, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d01a      	beq.n	80076b8 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8007682:	79fb      	ldrb	r3, [r7, #7]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	3301      	adds	r3, #1
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff fe76 	bl	8007380 <WIZCHIP_READ>
 8007694:	4603      	mov	r3, r0
 8007696:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8007698:	89fb      	ldrh	r3, [r7, #14]
 800769a:	021b      	lsls	r3, r3, #8
 800769c:	b29c      	uxth	r4, r3
 800769e:	79fb      	ldrb	r3, [r7, #7]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	3301      	adds	r3, #1
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff fe68 	bl	8007380 <WIZCHIP_READ>
 80076b0:	4603      	mov	r3, r0
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	4423      	add	r3, r4
 80076b6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80076b8:	89fa      	ldrh	r2, [r7, #14]
 80076ba:	89bb      	ldrh	r3, [r7, #12]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d1c2      	bne.n	8007646 <getSn_TX_FSR+0x12>
   return val;
 80076c0:	89fb      	ldrh	r3, [r7, #14]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd90      	pop	{r4, r7, pc}

080076ca <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80076ca:	b590      	push	{r4, r7, lr}
 80076cc:	b085      	sub	sp, #20
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	4603      	mov	r3, r0
 80076d2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80076d4:	2300      	movs	r3, #0
 80076d6:	81fb      	strh	r3, [r7, #14]
 80076d8:	2300      	movs	r3, #0
 80076da:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80076dc:	79fb      	ldrb	r3, [r7, #7]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	3301      	adds	r3, #1
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7ff fe49 	bl	8007380 <WIZCHIP_READ>
 80076ee:	4603      	mov	r3, r0
 80076f0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80076f2:	89bb      	ldrh	r3, [r7, #12]
 80076f4:	021b      	lsls	r3, r3, #8
 80076f6:	b29c      	uxth	r4, r3
 80076f8:	79fb      	ldrb	r3, [r7, #7]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	3301      	adds	r3, #1
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff fe3b 	bl	8007380 <WIZCHIP_READ>
 800770a:	4603      	mov	r3, r0
 800770c:	b29b      	uxth	r3, r3
 800770e:	4423      	add	r3, r4
 8007710:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8007712:	89bb      	ldrh	r3, [r7, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d01a      	beq.n	800774e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8007718:	79fb      	ldrb	r3, [r7, #7]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	3301      	adds	r3, #1
 800771e:	00db      	lsls	r3, r3, #3
 8007720:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8007724:	4618      	mov	r0, r3
 8007726:	f7ff fe2b 	bl	8007380 <WIZCHIP_READ>
 800772a:	4603      	mov	r3, r0
 800772c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800772e:	89fb      	ldrh	r3, [r7, #14]
 8007730:	021b      	lsls	r3, r3, #8
 8007732:	b29c      	uxth	r4, r3
 8007734:	79fb      	ldrb	r3, [r7, #7]
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	3301      	adds	r3, #1
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff fe1d 	bl	8007380 <WIZCHIP_READ>
 8007746:	4603      	mov	r3, r0
 8007748:	b29b      	uxth	r3, r3
 800774a:	4423      	add	r3, r4
 800774c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800774e:	89fa      	ldrh	r2, [r7, #14]
 8007750:	89bb      	ldrh	r3, [r7, #12]
 8007752:	429a      	cmp	r2, r3
 8007754:	d1c2      	bne.n	80076dc <getSn_RX_RSR+0x12>
   return val;
 8007756:	89fb      	ldrh	r3, [r7, #14]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	bd90      	pop	{r4, r7, pc}

08007760 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8007760:	b590      	push	{r4, r7, lr}
 8007762:	b085      	sub	sp, #20
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	6039      	str	r1, [r7, #0]
 800776a:	71fb      	strb	r3, [r7, #7]
 800776c:	4613      	mov	r3, r2
 800776e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8007770:	2300      	movs	r3, #0
 8007772:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8007774:	2300      	movs	r3, #0
 8007776:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8007778:	88bb      	ldrh	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d048      	beq.n	8007810 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800777e:	79fb      	ldrb	r3, [r7, #7]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	3301      	adds	r3, #1
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff fdf8 	bl	8007380 <WIZCHIP_READ>
 8007790:	4603      	mov	r3, r0
 8007792:	b29b      	uxth	r3, r3
 8007794:	021b      	lsls	r3, r3, #8
 8007796:	b29c      	uxth	r4, r3
 8007798:	79fb      	ldrb	r3, [r7, #7]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	3301      	adds	r3, #1
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7ff fdeb 	bl	8007380 <WIZCHIP_READ>
 80077aa:	4603      	mov	r3, r0
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	4423      	add	r3, r4
 80077b0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80077b2:	89fb      	ldrh	r3, [r7, #14]
 80077b4:	021b      	lsls	r3, r3, #8
 80077b6:	79fa      	ldrb	r2, [r7, #7]
 80077b8:	0092      	lsls	r2, r2, #2
 80077ba:	3202      	adds	r2, #2
 80077bc:	00d2      	lsls	r2, r2, #3
 80077be:	4413      	add	r3, r2
 80077c0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80077c2:	88bb      	ldrh	r3, [r7, #4]
 80077c4:	461a      	mov	r2, r3
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	68b8      	ldr	r0, [r7, #8]
 80077ca:	f7ff fed3 	bl	8007574 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80077ce:	89fa      	ldrh	r2, [r7, #14]
 80077d0:	88bb      	ldrh	r3, [r7, #4]
 80077d2:	4413      	add	r3, r2
 80077d4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80077d6:	79fb      	ldrb	r3, [r7, #7]
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	3301      	adds	r3, #1
 80077dc:	00db      	lsls	r3, r3, #3
 80077de:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80077e2:	461a      	mov	r2, r3
 80077e4:	89fb      	ldrh	r3, [r7, #14]
 80077e6:	0a1b      	lsrs	r3, r3, #8
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	4619      	mov	r1, r3
 80077ee:	4610      	mov	r0, r2
 80077f0:	f7ff fe12 	bl	8007418 <WIZCHIP_WRITE>
 80077f4:	79fb      	ldrb	r3, [r7, #7]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	3301      	adds	r3, #1
 80077fa:	00db      	lsls	r3, r3, #3
 80077fc:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8007800:	461a      	mov	r2, r3
 8007802:	89fb      	ldrh	r3, [r7, #14]
 8007804:	b2db      	uxtb	r3, r3
 8007806:	4619      	mov	r1, r3
 8007808:	4610      	mov	r0, r2
 800780a:	f7ff fe05 	bl	8007418 <WIZCHIP_WRITE>
 800780e:	e000      	b.n	8007812 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8007810:	bf00      	nop
}
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	bd90      	pop	{r4, r7, pc}

08007818 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8007818:	b590      	push	{r4, r7, lr}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	6039      	str	r1, [r7, #0]
 8007822:	71fb      	strb	r3, [r7, #7]
 8007824:	4613      	mov	r3, r2
 8007826:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800782c:	2300      	movs	r3, #0
 800782e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8007830:	88bb      	ldrh	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d048      	beq.n	80078c8 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8007836:	79fb      	ldrb	r3, [r7, #7]
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	3301      	adds	r3, #1
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff fd9c 	bl	8007380 <WIZCHIP_READ>
 8007848:	4603      	mov	r3, r0
 800784a:	b29b      	uxth	r3, r3
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	b29c      	uxth	r4, r3
 8007850:	79fb      	ldrb	r3, [r7, #7]
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	3301      	adds	r3, #1
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff fd8f 	bl	8007380 <WIZCHIP_READ>
 8007862:	4603      	mov	r3, r0
 8007864:	b29b      	uxth	r3, r3
 8007866:	4423      	add	r3, r4
 8007868:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800786a:	89fb      	ldrh	r3, [r7, #14]
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	79fa      	ldrb	r2, [r7, #7]
 8007870:	0092      	lsls	r2, r2, #2
 8007872:	3203      	adds	r2, #3
 8007874:	00d2      	lsls	r2, r2, #3
 8007876:	4413      	add	r3, r2
 8007878:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800787a:	88bb      	ldrh	r3, [r7, #4]
 800787c:	461a      	mov	r2, r3
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	68b8      	ldr	r0, [r7, #8]
 8007882:	f7ff fe17 	bl	80074b4 <WIZCHIP_READ_BUF>
   ptr += len;
 8007886:	89fa      	ldrh	r2, [r7, #14]
 8007888:	88bb      	ldrh	r3, [r7, #4]
 800788a:	4413      	add	r3, r2
 800788c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	3301      	adds	r3, #1
 8007894:	00db      	lsls	r3, r3, #3
 8007896:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800789a:	461a      	mov	r2, r3
 800789c:	89fb      	ldrh	r3, [r7, #14]
 800789e:	0a1b      	lsrs	r3, r3, #8
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	4619      	mov	r1, r3
 80078a6:	4610      	mov	r0, r2
 80078a8:	f7ff fdb6 	bl	8007418 <WIZCHIP_WRITE>
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	3301      	adds	r3, #1
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80078b8:	461a      	mov	r2, r3
 80078ba:	89fb      	ldrh	r3, [r7, #14]
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	4619      	mov	r1, r3
 80078c0:	4610      	mov	r0, r2
 80078c2:	f7ff fda9 	bl	8007418 <WIZCHIP_WRITE>
 80078c6:	e000      	b.n	80078ca <wiz_recv_data+0xb2>
   if(len == 0) return;
 80078c8:	bf00      	nop
}
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd90      	pop	{r4, r7, pc}

080078d0 <socket>:




int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 80078d0:	b590      	push	{r4, r7, lr}
 80078d2:	b089      	sub	sp, #36	; 0x24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	4604      	mov	r4, r0
 80078d8:	4608      	mov	r0, r1
 80078da:	4611      	mov	r1, r2
 80078dc:	461a      	mov	r2, r3
 80078de:	4623      	mov	r3, r4
 80078e0:	71fb      	strb	r3, [r7, #7]
 80078e2:	4603      	mov	r3, r0
 80078e4:	71bb      	strb	r3, [r7, #6]
 80078e6:	460b      	mov	r3, r1
 80078e8:	80bb      	strh	r3, [r7, #4]
 80078ea:	4613      	mov	r3, r2
 80078ec:	70fb      	strb	r3, [r7, #3]

   uint8_t taddr[16];
   uint16_t local_port=0;
 80078ee:	2300      	movs	r3, #0
 80078f0:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 80078f2:	79fb      	ldrb	r3, [r7, #7]
 80078f4:	2b07      	cmp	r3, #7
 80078f6:	d902      	bls.n	80078fe <socket+0x2e>
 80078f8:	f04f 33ff 	mov.w	r3, #4294967295
 80078fc:	e10e      	b.n	8007b1c <socket+0x24c>
   switch (protocol & 0x0F)
 80078fe:	79bb      	ldrb	r3, [r7, #6]
 8007900:	f003 030f 	and.w	r3, r3, #15
 8007904:	3b01      	subs	r3, #1
 8007906:	2b0d      	cmp	r3, #13
 8007908:	d82c      	bhi.n	8007964 <socket+0x94>
 800790a:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <socket+0x40>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	08007949 	.word	0x08007949
 8007914:	0800796b 	.word	0x0800796b
 8007918:	0800796b 	.word	0x0800796b
 800791c:	0800796b 	.word	0x0800796b
 8007920:	08007965 	.word	0x08007965
 8007924:	08007965 	.word	0x08007965
 8007928:	08007965 	.word	0x08007965
 800792c:	08007965 	.word	0x08007965
 8007930:	08007965 	.word	0x08007965
 8007934:	0800796b 	.word	0x0800796b
 8007938:	0800796b 	.word	0x0800796b
 800793c:	08007965 	.word	0x08007965
 8007940:	08007965 	.word	0x08007965
 8007944:	0800796b 	.word	0x0800796b
		    /*
            uint8_t taddr[4];
            getSIPR(taddr);
            */
            uint32_t taddr;
            getSIPR((uint8_t*)&taddr);
 8007948:	f107 0308 	add.w	r3, r7, #8
 800794c:	2204      	movs	r2, #4
 800794e:	4619      	mov	r1, r3
 8007950:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8007954:	f7ff fdae 	bl	80074b4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d107      	bne.n	800796e <socket+0x9e>
 800795e:	f06f 0302 	mvn.w	r3, #2
 8007962:	e0db      	b.n	8007b1c <socket+0x24c>
      #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
      #endif
      default :
        return SOCKERR_SOCKMODE;
 8007964:	f06f 0304 	mvn.w	r3, #4
 8007968:	e0d8      	b.n	8007b1c <socket+0x24c>
         break; 
 800796a:	bf00      	nop
 800796c:	e000      	b.n	8007970 <socket+0xa0>
            break;
 800796e:	bf00      	nop
   } 
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	f003 0304 	and.w	r3, r3, #4
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <socket+0xb0>
 800797a:	f06f 0305 	mvn.w	r3, #5
 800797e:	e0cd      	b.n	8007b1c <socket+0x24c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
   if(flag != 0)
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d028      	beq.n	80079d8 <socket+0x108>
   {
      switch(protocol)
 8007986:	79bb      	ldrb	r3, [r7, #6]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d002      	beq.n	8007992 <socket+0xc2>
 800798c:	2b02      	cmp	r3, #2
 800798e:	d008      	beq.n	80079a2 <socket+0xd2>
         break;

#endif 

         default:
            break;
 8007990:	e022      	b.n	80079d8 <socket+0x108>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8007992:	78fb      	ldrb	r3, [r7, #3]
 8007994:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007998:	2b00      	cmp	r3, #0
 800799a:	d11a      	bne.n	80079d2 <socket+0x102>
 800799c:	f06f 0305 	mvn.w	r3, #5
 80079a0:	e0bc      	b.n	8007b1c <socket+0x24c>
   	      if(flag & SF_IGMP_VER2)
 80079a2:	78fb      	ldrb	r3, [r7, #3]
 80079a4:	f003 0320 	and.w	r3, r3, #32
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d006      	beq.n	80079ba <socket+0xea>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80079ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	db02      	blt.n	80079ba <socket+0xea>
 80079b4:	f06f 0305 	mvn.w	r3, #5
 80079b8:	e0b0      	b.n	8007b1c <socket+0x24c>
      	      if(flag & SF_UNI_BLOCK)
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	f003 0310 	and.w	r3, r3, #16
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d008      	beq.n	80079d6 <socket+0x106>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80079c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	db04      	blt.n	80079d6 <socket+0x106>
 80079cc:	f06f 0305 	mvn.w	r3, #5
 80079d0:	e0a4      	b.n	8007b1c <socket+0x24c>
   	      break;
 80079d2:	bf00      	nop
 80079d4:	e000      	b.n	80079d8 <socket+0x108>
         break;
 80079d6:	bf00      	nop
      }
   }
   close(sn);
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 f8ac 	bl	8007b38 <close>
	//M20150601
#if _WIZCHIP_ == 5300   
   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
#else
   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80079e0:	79fb      	ldrb	r3, [r7, #7]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	3301      	adds	r3, #1
 80079e6:	00db      	lsls	r3, r3, #3
 80079e8:	4618      	mov	r0, r3
 80079ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079ee:	f023 030f 	bic.w	r3, r3, #15
 80079f2:	b25a      	sxtb	r2, r3
 80079f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	b25b      	sxtb	r3, r3
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	4619      	mov	r1, r3
 8007a00:	f7ff fd0a 	bl	8007418 <WIZCHIP_WRITE>
#endif
#ifdef IPV6_AVAILABLE
   setSn_MR2(sn, flag & 0x03);  
#endif 
   if(!port)
 8007a04:	88bb      	ldrh	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d110      	bne.n	8007a2c <socket+0x15c>
   {
      port = sock_any_port++;
 8007a0a:	4b46      	ldr	r3, [pc, #280]	; (8007b24 <socket+0x254>)
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	b291      	uxth	r1, r2
 8007a12:	4a44      	ldr	r2, [pc, #272]	; (8007b24 <socket+0x254>)
 8007a14:	8011      	strh	r1, [r2, #0]
 8007a16:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8007a18:	4b42      	ldr	r3, [pc, #264]	; (8007b24 <socket+0x254>)
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d103      	bne.n	8007a2c <socket+0x15c>
 8007a24:	4b3f      	ldr	r3, [pc, #252]	; (8007b24 <socket+0x254>)
 8007a26:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007a2a:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 8007a2c:	79fb      	ldrb	r3, [r7, #7]
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	3301      	adds	r3, #1
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a38:	461a      	mov	r2, r3
 8007a3a:	88bb      	ldrh	r3, [r7, #4]
 8007a3c:	0a1b      	lsrs	r3, r3, #8
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	4619      	mov	r1, r3
 8007a44:	4610      	mov	r0, r2
 8007a46:	f7ff fce7 	bl	8007418 <WIZCHIP_WRITE>
 8007a4a:	79fb      	ldrb	r3, [r7, #7]
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	3301      	adds	r3, #1
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a56:	461a      	mov	r2, r3
 8007a58:	88bb      	ldrh	r3, [r7, #4]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4610      	mov	r0, r2
 8007a60:	f7ff fcda 	bl	8007418 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8007a64:	79fb      	ldrb	r3, [r7, #7]
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	3301      	adds	r3, #1
 8007a6a:	00db      	lsls	r3, r3, #3
 8007a6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007a70:	2101      	movs	r1, #1
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7ff fcd0 	bl	8007418 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8007a78:	bf00      	nop
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	3301      	adds	r3, #1
 8007a80:	00db      	lsls	r3, r3, #3
 8007a82:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff fc7a 	bl	8007380 <WIZCHIP_READ>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1f3      	bne.n	8007a7a <socket+0x1aa>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	2201      	movs	r2, #1
 8007a96:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9a:	b21b      	sxth	r3, r3
 8007a9c:	43db      	mvns	r3, r3
 8007a9e:	b21a      	sxth	r2, r3
 8007aa0:	4b21      	ldr	r3, [pc, #132]	; (8007b28 <socket+0x258>)
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	b21b      	sxth	r3, r3
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	b21b      	sxth	r3, r3
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	4b1e      	ldr	r3, [pc, #120]	; (8007b28 <socket+0x258>)
 8007aae:	801a      	strh	r2, [r3, #0]
   //
#ifndef IPV6_AVAILABLE
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8007ab0:	78fb      	ldrb	r3, [r7, #3]
 8007ab2:	f003 0201 	and.w	r2, r3, #1
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8007abc:	b21a      	sxth	r2, r3
 8007abe:	4b1a      	ldr	r3, [pc, #104]	; (8007b28 <socket+0x258>)
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	b21b      	sxth	r3, r3
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	b21b      	sxth	r3, r3
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	4b17      	ldr	r3, [pc, #92]	; (8007b28 <socket+0x258>)
 8007acc:	801a      	strh	r2, [r3, #0]
#else
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
#endif
   sock_is_sending &= ~(1<<sn);
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad6:	b21b      	sxth	r3, r3
 8007ad8:	43db      	mvns	r3, r3
 8007ada:	b21a      	sxth	r2, r3
 8007adc:	4b13      	ldr	r3, [pc, #76]	; (8007b2c <socket+0x25c>)
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	b21b      	sxth	r3, r3
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	b21b      	sxth	r3, r3
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	4b10      	ldr	r3, [pc, #64]	; (8007b2c <socket+0x25c>)
 8007aea:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8007aec:	79fb      	ldrb	r3, [r7, #7]
 8007aee:	4a10      	ldr	r2, [pc, #64]	; (8007b30 <socket+0x260>)
 8007af0:	2100      	movs	r1, #0
 8007af2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;//PACK_COMPLETED //TODO::need verify:LINAN 20250421
 8007af6:	79fb      	ldrb	r3, [r7, #7]
 8007af8:	4a0e      	ldr	r2, [pc, #56]	; (8007b34 <socket+0x264>)
 8007afa:	2100      	movs	r1, #0
 8007afc:	54d1      	strb	r1, [r2, r3]
  //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8007afe:	bf00      	nop
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	3301      	adds	r3, #1
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7ff fc37 	bl	8007380 <WIZCHIP_READ>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0f3      	beq.n	8007b00 <socket+0x230>
   return (int8_t)sn;
 8007b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3724      	adds	r7, #36	; 0x24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd90      	pop	{r4, r7, pc}
 8007b24:	20000014 	.word	0x20000014
 8007b28:	200041b0 	.word	0x200041b0
 8007b2c:	200041b2 	.word	0x200041b2
 8007b30:	200041b4 	.word	0x200041b4
 8007b34:	200041c4 	.word	0x200041c4

08007b38 <close>:

int8_t close(uint8_t sn)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	2b07      	cmp	r3, #7
 8007b46:	d902      	bls.n	8007b4e <close+0x16>
 8007b48:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4c:	e055      	b.n	8007bfa <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
   setSn_CR(sn,Sn_CR_CLOSE);
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	3301      	adds	r3, #1
 8007b54:	00db      	lsls	r3, r3, #3
 8007b56:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007b5a:	2110      	movs	r1, #16
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7ff fc5b 	bl	8007418 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 8007b62:	bf00      	nop
 8007b64:	79fb      	ldrb	r3, [r7, #7]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	3301      	adds	r3, #1
 8007b6a:	00db      	lsls	r3, r3, #3
 8007b6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7ff fc05 	bl	8007380 <WIZCHIP_READ>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1f3      	bne.n	8007b64 <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IR(sn, 0xFF);  	
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	3301      	adds	r3, #1
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007b88:	211f      	movs	r1, #31
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7ff fc44 	bl	8007418 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
   sock_io_mode &= ~(1<<sn); 
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	2201      	movs	r2, #1
 8007b94:	fa02 f303 	lsl.w	r3, r2, r3
 8007b98:	b21b      	sxth	r3, r3
 8007b9a:	43db      	mvns	r3, r3
 8007b9c:	b21a      	sxth	r2, r3
 8007b9e:	4b19      	ldr	r3, [pc, #100]	; (8007c04 <close+0xcc>)
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	b21b      	sxth	r3, r3
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	b21b      	sxth	r3, r3
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	4b16      	ldr	r3, [pc, #88]	; (8007c04 <close+0xcc>)
 8007bac:	801a      	strh	r2, [r3, #0]
	//
   sock_is_sending &= ~(1<<sn);
 8007bae:	79fb      	ldrb	r3, [r7, #7]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb6:	b21b      	sxth	r3, r3
 8007bb8:	43db      	mvns	r3, r3
 8007bba:	b21a      	sxth	r2, r3
 8007bbc:	4b12      	ldr	r3, [pc, #72]	; (8007c08 <close+0xd0>)
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	b21b      	sxth	r3, r3
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	b21b      	sxth	r3, r3
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	4b0f      	ldr	r3, [pc, #60]	; (8007c08 <close+0xd0>)
 8007bca:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	4a0f      	ldr	r2, [pc, #60]	; (8007c0c <close+0xd4>)
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 8007bd6:	79fb      	ldrb	r3, [r7, #7]
 8007bd8:	4a0d      	ldr	r2, [pc, #52]	; (8007c10 <close+0xd8>)
 8007bda:	2100      	movs	r1, #0
 8007bdc:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 8007bde:	bf00      	nop
 8007be0:	79fb      	ldrb	r3, [r7, #7]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	3301      	adds	r3, #1
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7ff fbc7 	bl	8007380 <WIZCHIP_READ>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1f3      	bne.n	8007be0 <close+0xa8>
   return SOCK_OK;
 8007bf8:	2301      	movs	r3, #1
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	200041b0 	.word	0x200041b0
 8007c08:	200041b2 	.word	0x200041b2
 8007c0c:	200041b4 	.word	0x200041b4
 8007c10:	200041c4 	.word	0x200041c4

08007c14 <listen>:

int8_t listen(uint8_t sn)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	2b07      	cmp	r3, #7
 8007c22:	d902      	bls.n	8007c2a <listen+0x16>
 8007c24:	f04f 33ff 	mov.w	r3, #4294967295
 8007c28:	e049      	b.n	8007cbe <listen+0xaa>
   CHECK_TCPMODE(); 
 8007c2a:	79fb      	ldrb	r3, [r7, #7]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	3301      	adds	r3, #1
 8007c30:	00db      	lsls	r3, r3, #3
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff fba4 	bl	8007380 <WIZCHIP_READ>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	f003 0303 	and.w	r3, r3, #3
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d002      	beq.n	8007c48 <listen+0x34>
 8007c42:	f06f 0304 	mvn.w	r3, #4
 8007c46:	e03a      	b.n	8007cbe <listen+0xaa>
   CHECK_SOCKINIT();
 8007c48:	79fb      	ldrb	r3, [r7, #7]
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	00db      	lsls	r3, r3, #3
 8007c50:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7ff fb93 	bl	8007380 <WIZCHIP_READ>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b13      	cmp	r3, #19
 8007c5e:	d002      	beq.n	8007c66 <listen+0x52>
 8007c60:	f06f 0302 	mvn.w	r3, #2
 8007c64:	e02b      	b.n	8007cbe <listen+0xaa>
   setSn_CR(sn,Sn_CR_LISTEN);
 8007c66:	79fb      	ldrb	r3, [r7, #7]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	00db      	lsls	r3, r3, #3
 8007c6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007c72:	2102      	movs	r1, #2
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7ff fbcf 	bl	8007418 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8007c7a:	bf00      	nop
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	3301      	adds	r3, #1
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7ff fb79 	bl	8007380 <WIZCHIP_READ>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1f3      	bne.n	8007c7c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8007c94:	e006      	b.n	8007ca4 <listen+0x90>
   {
      close(sn);
 8007c96:	79fb      	ldrb	r3, [r7, #7]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff ff4d 	bl	8007b38 <close>
      return SOCKERR_SOCKCLOSED;
 8007c9e:	f06f 0303 	mvn.w	r3, #3
 8007ca2:	e00c      	b.n	8007cbe <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	3301      	adds	r3, #1
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7ff fb65 	bl	8007380 <WIZCHIP_READ>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b14      	cmp	r3, #20
 8007cba:	d1ec      	bne.n	8007c96 <listen+0x82>
   }
   return SOCK_OK;
 8007cbc:	2301      	movs	r3, #1
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
	...

08007cc8 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	4603      	mov	r3, r0
 8007cd0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8007cd2:	79fb      	ldrb	r3, [r7, #7]
 8007cd4:	2b07      	cmp	r3, #7
 8007cd6:	d902      	bls.n	8007cde <disconnect+0x16>
 8007cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cdc:	e06e      	b.n	8007dbc <disconnect+0xf4>
   CHECK_TCPMODE();
 8007cde:	79fb      	ldrb	r3, [r7, #7]
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7ff fb4a 	bl	8007380 <WIZCHIP_READ>
 8007cec:	4603      	mov	r3, r0
 8007cee:	f003 0303 	and.w	r3, r3, #3
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d002      	beq.n	8007cfc <disconnect+0x34>
 8007cf6:	f06f 0304 	mvn.w	r3, #4
 8007cfa:	e05f      	b.n	8007dbc <disconnect+0xf4>
   if(getSn_SR(sn) != SOCK_CLOSED)
 8007cfc:	79fb      	ldrb	r3, [r7, #7]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	3301      	adds	r3, #1
 8007d02:	00db      	lsls	r3, r3, #3
 8007d04:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff fb39 	bl	8007380 <WIZCHIP_READ>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d052      	beq.n	8007dba <disconnect+0xf2>
   {
      setSn_CR(sn,Sn_CR_DISCON);
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	3301      	adds	r3, #1
 8007d1a:	00db      	lsls	r3, r3, #3
 8007d1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007d20:	2108      	movs	r1, #8
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7ff fb78 	bl	8007418 <WIZCHIP_WRITE>
      /* wait to process the command... */
      while(getSn_CR(sn));
 8007d28:	bf00      	nop
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	3301      	adds	r3, #1
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7ff fb22 	bl	8007380 <WIZCHIP_READ>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1f3      	bne.n	8007d2a <disconnect+0x62>
	   sock_is_sending &= ~(1<<sn);
 8007d42:	79fb      	ldrb	r3, [r7, #7]
 8007d44:	2201      	movs	r2, #1
 8007d46:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4a:	b21b      	sxth	r3, r3
 8007d4c:	43db      	mvns	r3, r3
 8007d4e:	b21a      	sxth	r2, r3
 8007d50:	4b1c      	ldr	r3, [pc, #112]	; (8007dc4 <disconnect+0xfc>)
 8007d52:	881b      	ldrh	r3, [r3, #0]
 8007d54:	b21b      	sxth	r3, r3
 8007d56:	4013      	ands	r3, r2
 8007d58:	b21b      	sxth	r3, r3
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	4b19      	ldr	r3, [pc, #100]	; (8007dc4 <disconnect+0xfc>)
 8007d5e:	801a      	strh	r2, [r3, #0]
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8007d60:	4b19      	ldr	r3, [pc, #100]	; (8007dc8 <disconnect+0x100>)
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	461a      	mov	r2, r3
 8007d66:	79fb      	ldrb	r3, [r7, #7]
 8007d68:	fa42 f303 	asr.w	r3, r2, r3
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d016      	beq.n	8007da2 <disconnect+0xda>
 8007d74:	2300      	movs	r3, #0
 8007d76:	e021      	b.n	8007dbc <disconnect+0xf4>
      while(getSn_SR(sn) != SOCK_CLOSED)
      {
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8007d78:	79fb      	ldrb	r3, [r7, #7]
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	00db      	lsls	r3, r3, #3
 8007d80:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7ff fafb 	bl	8007380 <WIZCHIP_READ>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f003 0308 	and.w	r3, r3, #8
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d006      	beq.n	8007da2 <disconnect+0xda>
         {
            close(sn);
 8007d94:	79fb      	ldrb	r3, [r7, #7]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7ff fece 	bl	8007b38 <close>
            return SOCKERR_TIMEOUT;
 8007d9c:	f06f 030c 	mvn.w	r3, #12
 8007da0:	e00c      	b.n	8007dbc <disconnect+0xf4>
      while(getSn_SR(sn) != SOCK_CLOSED)
 8007da2:	79fb      	ldrb	r3, [r7, #7]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	3301      	adds	r3, #1
 8007da8:	00db      	lsls	r3, r3, #3
 8007daa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff fae6 	bl	8007380 <WIZCHIP_READ>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1de      	bne.n	8007d78 <disconnect+0xb0>
         }
      }
   }
   return SOCK_OK;
 8007dba:	2301      	movs	r3, #1
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	200041b2 	.word	0x200041b2
 8007dc8:	200041b0 	.word	0x200041b0

08007dcc <send>:


#if 1
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	6039      	str	r1, [r7, #0]
 8007dd6:	71fb      	strb	r3, [r7, #7]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	81bb      	strh	r3, [r7, #12]
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/
#ifndef IPV6_AVAILABLE
   CHECK_SOCKNUM();
 8007de4:	79fb      	ldrb	r3, [r7, #7]
 8007de6:	2b07      	cmp	r3, #7
 8007de8:	d902      	bls.n	8007df0 <send+0x24>
 8007dea:	f04f 33ff 	mov.w	r3, #4294967295
 8007dee:	e139      	b.n	8008064 <send+0x298>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	3301      	adds	r3, #1
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7ff fac1 	bl	8007380 <WIZCHIP_READ>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	f003 030f 	and.w	r3, r3, #15
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d002      	beq.n	8007e0e <send+0x42>
 8007e08:	f06f 0304 	mvn.w	r3, #4
 8007e0c:	e12a      	b.n	8008064 <send+0x298>
   CHECK_SOCKDATA();
 8007e0e:	88bb      	ldrh	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d102      	bne.n	8007e1a <send+0x4e>
 8007e14:	f06f 030d 	mvn.w	r3, #13
 8007e18:	e124      	b.n	8008064 <send+0x298>
   tmp = getSn_SR(sn);
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	3301      	adds	r3, #1
 8007e20:	00db      	lsls	r3, r3, #3
 8007e22:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7ff faaa 	bl	8007380 <WIZCHIP_READ>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	2b17      	cmp	r3, #23
 8007e34:	d005      	beq.n	8007e42 <send+0x76>
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
 8007e38:	2b1c      	cmp	r3, #28
 8007e3a:	d002      	beq.n	8007e42 <send+0x76>
 8007e3c:	f06f 0306 	mvn.w	r3, #6
 8007e40:	e110      	b.n	8008064 <send+0x298>
   if( sock_is_sending & (1<<sn) )
 8007e42:	4b8a      	ldr	r3, [pc, #552]	; (800806c <send+0x2a0>)
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	79fb      	ldrb	r3, [r7, #7]
 8007e4a:	fa42 f303 	asr.w	r3, r2, r3
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d039      	beq.n	8007eca <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	00db      	lsls	r3, r3, #3
 8007e5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7ff fa8c 	bl	8007380 <WIZCHIP_READ>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	f003 031f 	and.w	r3, r3, #31
 8007e6e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	f003 0310 	and.w	r3, r3, #16
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d019      	beq.n	8007eae <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	3301      	adds	r3, #1
 8007e80:	00db      	lsls	r3, r3, #3
 8007e82:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007e86:	2110      	movs	r1, #16
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7ff fac5 	bl	8007418 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	2201      	movs	r2, #1
 8007e92:	fa02 f303 	lsl.w	r3, r2, r3
 8007e96:	b21b      	sxth	r3, r3
 8007e98:	43db      	mvns	r3, r3
 8007e9a:	b21a      	sxth	r2, r3
 8007e9c:	4b73      	ldr	r3, [pc, #460]	; (800806c <send+0x2a0>)
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	b21b      	sxth	r3, r3
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	b21b      	sxth	r3, r3
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	4b70      	ldr	r3, [pc, #448]	; (800806c <send+0x2a0>)
 8007eaa:	801a      	strh	r2, [r3, #0]
 8007eac:	e00d      	b.n	8007eca <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	f003 0308 	and.w	r3, r3, #8
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d006      	beq.n	8007ec6 <send+0xfa>
      {
         close(sn);
 8007eb8:	79fb      	ldrb	r3, [r7, #7]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7ff fe3c 	bl	8007b38 <close>
         return SOCKERR_TIMEOUT;
 8007ec0:	f06f 030c 	mvn.w	r3, #12
 8007ec4:	e0ce      	b.n	8008064 <send+0x298>
      }
      else return SOCK_BUSY;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	e0cc      	b.n	8008064 <send+0x298>
   }
#endif 
   freesize = getSn_TxMAX(sn);
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	3301      	adds	r3, #1
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7ff fa52 	bl	8007380 <WIZCHIP_READ>
 8007edc:	4603      	mov	r3, r0
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	029b      	lsls	r3, r3, #10
 8007ee2:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8007ee4:	88ba      	ldrh	r2, [r7, #4]
 8007ee6:	89bb      	ldrh	r3, [r7, #12]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d901      	bls.n	8007ef0 <send+0x124>
 8007eec:	89bb      	ldrh	r3, [r7, #12]
 8007eee:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = (uint16_t)getSn_TX_FSR(sn);
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7ff fb9e 	bl	8007634 <getSn_TX_FSR>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8007efc:	79fb      	ldrb	r3, [r7, #7]
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	3301      	adds	r3, #1
 8007f02:	00db      	lsls	r3, r3, #3
 8007f04:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7ff fa39 	bl	8007380 <WIZCHIP_READ>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	2b17      	cmp	r3, #23
 8007f16:	d00c      	beq.n	8007f32 <send+0x166>
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	2b1c      	cmp	r3, #28
 8007f1c:	d009      	beq.n	8007f32 <send+0x166>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d103      	bne.n	8007f2c <send+0x160>
 8007f24:	79fb      	ldrb	r3, [r7, #7]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7ff fe06 	bl	8007b38 <close>
         return SOCKERR_SOCKSTATUS;
 8007f2c:	f06f 0306 	mvn.w	r3, #6
 8007f30:	e098      	b.n	8008064 <send+0x298>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY; //TODO::need verify:LINAN 20250421
 8007f32:	4b4f      	ldr	r3, [pc, #316]	; (8008070 <send+0x2a4>)
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	79fb      	ldrb	r3, [r7, #7]
 8007f3a:	fa42 f303 	asr.w	r3, r2, r3
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d005      	beq.n	8007f52 <send+0x186>
 8007f46:	88ba      	ldrh	r2, [r7, #4]
 8007f48:	89bb      	ldrh	r3, [r7, #12]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d901      	bls.n	8007f52 <send+0x186>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	e088      	b.n	8008064 <send+0x298>
     // if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  //TODO::need verify:LINAN 20250421
      if(len <= freesize) break;
 8007f52:	88ba      	ldrh	r2, [r7, #4]
 8007f54:	89bb      	ldrh	r3, [r7, #12]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d900      	bls.n	8007f5c <send+0x190>
      freesize = (uint16_t)getSn_TX_FSR(sn);
 8007f5a:	e7c9      	b.n	8007ef0 <send+0x124>
      if(len <= freesize) break;
 8007f5c:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8007f5e:	88ba      	ldrh	r2, [r7, #4]
 8007f60:	79fb      	ldrb	r3, [r7, #7]
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7ff fbfb 	bl	8007760 <wiz_send_data>
#endif

#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn,len);
#endif
   if(sock_is_sending & (1<<sn))
 8007f6a:	4b40      	ldr	r3, [pc, #256]	; (800806c <send+0x2a0>)
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	79fb      	ldrb	r3, [r7, #7]
 8007f72:	fa42 f303 	asr.w	r3, r2, r3
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d04d      	beq.n	800801a <send+0x24e>
   {
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8007f7e:	e034      	b.n	8007fea <send+0x21e>
      {    
         tmp = getSn_SR(sn);
 8007f80:	79fb      	ldrb	r3, [r7, #7]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	3301      	adds	r3, #1
 8007f86:	00db      	lsls	r3, r3, #3
 8007f88:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7ff f9f7 	bl	8007380 <WIZCHIP_READ>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73fb      	strb	r3, [r7, #15]
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	2b17      	cmp	r3, #23
 8007f9a:	d01a      	beq.n	8007fd2 <send+0x206>
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	2b1c      	cmp	r3, #28
 8007fa0:	d017      	beq.n	8007fd2 <send+0x206>
         {
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00d      	beq.n	8007fc4 <send+0x1f8>
 8007fa8:	79fb      	ldrb	r3, [r7, #7]
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	3301      	adds	r3, #1
 8007fae:	00db      	lsls	r3, r3, #3
 8007fb0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff f9e3 	bl	8007380 <WIZCHIP_READ>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	f003 0308 	and.w	r3, r3, #8
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d003      	beq.n	8007fcc <send+0x200>
 8007fc4:	79fb      	ldrb	r3, [r7, #7]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff fdb6 	bl	8007b38 <close>
            return SOCKERR_SOCKSTATUS;
 8007fcc:	f06f 0306 	mvn.w	r3, #6
 8007fd0:	e048      	b.n	8008064 <send+0x298>
         }
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8007fd2:	4b27      	ldr	r3, [pc, #156]	; (8008070 <send+0x2a4>)
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	79fb      	ldrb	r3, [r7, #7]
 8007fda:	fa42 f303 	asr.w	r3, r2, r3
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <send+0x21e>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e03c      	b.n	8008064 <send+0x298>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	3301      	adds	r3, #1
 8007ff0:	00db      	lsls	r3, r3, #3
 8007ff2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7ff f9c2 	bl	8007380 <WIZCHIP_READ>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	f003 0310 	and.w	r3, r3, #16
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0bc      	beq.n	8007f80 <send+0x1b4>
      } 
      setSn_IR(sn, Sn_IR_SENDOK);
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	3301      	adds	r3, #1
 800800c:	00db      	lsls	r3, r3, #3
 800800e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008012:	2110      	movs	r1, #16
 8008014:	4618      	mov	r0, r3
 8008016:	f7ff f9ff 	bl	8007418 <WIZCHIP_WRITE>
   }
   setSn_CR(sn,Sn_CR_SEND);
 800801a:	79fb      	ldrb	r3, [r7, #7]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	3301      	adds	r3, #1
 8008020:	00db      	lsls	r3, r3, #3
 8008022:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008026:	2120      	movs	r1, #32
 8008028:	4618      	mov	r0, r3
 800802a:	f7ff f9f5 	bl	8007418 <WIZCHIP_WRITE>
 
   while(getSn_CR(sn));   // wait to process the command...
 800802e:	bf00      	nop
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	3301      	adds	r3, #1
 8008036:	00db      	lsls	r3, r3, #3
 8008038:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff f99f 	bl	8007380 <WIZCHIP_READ>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1f3      	bne.n	8008030 <send+0x264>
   sock_is_sending |= (1<<sn);
 8008048:	79fb      	ldrb	r3, [r7, #7]
 800804a:	2201      	movs	r2, #1
 800804c:	fa02 f303 	lsl.w	r3, r2, r3
 8008050:	b21a      	sxth	r2, r3
 8008052:	4b06      	ldr	r3, [pc, #24]	; (800806c <send+0x2a0>)
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b21b      	sxth	r3, r3
 8008058:	4313      	orrs	r3, r2
 800805a:	b21b      	sxth	r3, r3
 800805c:	b29a      	uxth	r2, r3
 800805e:	4b03      	ldr	r3, [pc, #12]	; (800806c <send+0x2a0>)
 8008060:	801a      	strh	r2, [r3, #0]
 
   return len;
 8008062:	88bb      	ldrh	r3, [r7, #4]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	200041b2 	.word	0x200041b2
 8008070:	200041b0 	.word	0x200041b0

08008074 <recv>:
 
   return len;
}
#endif 
int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)//lihan
{
 8008074:	b590      	push	{r4, r7, lr}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	4603      	mov	r3, r0
 800807c:	6039      	str	r1, [r7, #0]
 800807e:	71fb      	strb	r3, [r7, #7]
 8008080:	4613      	mov	r3, r2
 8008082:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8008088:	2300      	movs	r3, #0
 800808a:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	2b07      	cmp	r3, #7
 8008090:	d902      	bls.n	8008098 <recv+0x24>
 8008092:	f04f 33ff 	mov.w	r3, #4294967295
 8008096:	e099      	b.n	80081cc <recv+0x158>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	3301      	adds	r3, #1
 800809e:	00db      	lsls	r3, r3, #3
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7ff f96d 	bl	8007380 <WIZCHIP_READ>
 80080a6:	4603      	mov	r3, r0
 80080a8:	f003 030f 	and.w	r3, r3, #15
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d002      	beq.n	80080b6 <recv+0x42>
 80080b0:	f06f 0304 	mvn.w	r3, #4
 80080b4:	e08a      	b.n	80081cc <recv+0x158>
   CHECK_SOCKDATA();
 80080b6:	88bb      	ldrh	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d102      	bne.n	80080c2 <recv+0x4e>
 80080bc:	f06f 030d 	mvn.w	r3, #13
 80080c0:	e084      	b.n	80081cc <recv+0x158>
   
   recvsize = getSn_RxMAX(sn); 
 80080c2:	79fb      	ldrb	r3, [r7, #7]
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	3301      	adds	r3, #1
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7ff f956 	bl	8007380 <WIZCHIP_READ>
 80080d4:	4603      	mov	r3, r0
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	029b      	lsls	r3, r3, #10
 80080da:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80080dc:	89ba      	ldrh	r2, [r7, #12]
 80080de:	88bb      	ldrh	r3, [r7, #4]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d201      	bcs.n	80080e8 <recv+0x74>
 80080e4:	89bb      	ldrh	r3, [r7, #12]
 80080e6:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
   while(1)
   {
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 80080e8:	79fb      	ldrb	r3, [r7, #7]
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7ff faed 	bl	80076ca <getSn_RX_RSR>
 80080f0:	4603      	mov	r3, r0
 80080f2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80080f4:	79fb      	ldrb	r3, [r7, #7]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	3301      	adds	r3, #1
 80080fa:	00db      	lsls	r3, r3, #3
 80080fc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008100:	4618      	mov	r0, r3
 8008102:	f7ff f93d 	bl	8007380 <WIZCHIP_READ>
 8008106:	4603      	mov	r3, r0
 8008108:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED)
 800810a:	7bfb      	ldrb	r3, [r7, #15]
 800810c:	2b17      	cmp	r3, #23
 800810e:	d026      	beq.n	800815e <recv+0xea>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 8008110:	7bfb      	ldrb	r3, [r7, #15]
 8008112:	2b1c      	cmp	r3, #28
 8008114:	d11c      	bne.n	8008150 <recv+0xdc>
         {
            if(recvsize != 0) break;
 8008116:	89bb      	ldrh	r3, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d130      	bne.n	800817e <recv+0x10a>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800811c:	79fb      	ldrb	r3, [r7, #7]
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff fa88 	bl	8007634 <getSn_TX_FSR>
 8008124:	4603      	mov	r3, r0
 8008126:	461c      	mov	r4, r3
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	3301      	adds	r3, #1
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8008134:	4618      	mov	r0, r3
 8008136:	f7ff f923 	bl	8007380 <WIZCHIP_READ>
 800813a:	4603      	mov	r3, r0
 800813c:	029b      	lsls	r3, r3, #10
 800813e:	429c      	cmp	r4, r3
 8008140:	d10d      	bne.n	800815e <recv+0xea>
            {
               close(sn);
 8008142:	79fb      	ldrb	r3, [r7, #7]
 8008144:	4618      	mov	r0, r3
 8008146:	f7ff fcf7 	bl	8007b38 <close>
               return SOCKERR_SOCKSTATUS;
 800814a:	f06f 0306 	mvn.w	r3, #6
 800814e:	e03d      	b.n	80081cc <recv+0x158>
            }
         }
         else
         {
            close(sn);
 8008150:	79fb      	ldrb	r3, [r7, #7]
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff fcf0 	bl	8007b38 <close>
            return SOCKERR_SOCKSTATUS;
 8008158:	f06f 0306 	mvn.w	r3, #6
 800815c:	e036      	b.n	80081cc <recv+0x158>
      }
#ifdef IPV6_AVAILABLE
      if(recvsize != 0) break;
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
#else
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800815e:	4b1d      	ldr	r3, [pc, #116]	; (80081d4 <recv+0x160>)
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	fa42 f303 	asr.w	r3, r2, r3
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <recv+0x102>
 8008172:	2300      	movs	r3, #0
 8008174:	e02a      	b.n	80081cc <recv+0x158>
      if(recvsize != 0) break;
 8008176:	89bb      	ldrh	r3, [r7, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d102      	bne.n	8008182 <recv+0x10e>
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 800817c:	e7b4      	b.n	80080e8 <recv+0x74>
            if(recvsize != 0) break;
 800817e:	bf00      	nop
 8008180:	e000      	b.n	8008184 <recv+0x110>
      if(recvsize != 0) break;
 8008182:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;
 8008184:	89ba      	ldrh	r2, [r7, #12]
 8008186:	88bb      	ldrh	r3, [r7, #4]
 8008188:	429a      	cmp	r2, r3
 800818a:	d201      	bcs.n	8008190 <recv+0x11c>
 800818c:	89bb      	ldrh	r3, [r7, #12]
 800818e:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len); 
 8008190:	88ba      	ldrh	r2, [r7, #4]
 8008192:	79fb      	ldrb	r3, [r7, #7]
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	4618      	mov	r0, r3
 8008198:	f7ff fb3e 	bl	8007818 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 800819c:	79fb      	ldrb	r3, [r7, #7]
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	3301      	adds	r3, #1
 80081a2:	00db      	lsls	r3, r3, #3
 80081a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80081a8:	2140      	movs	r1, #64	; 0x40
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff f934 	bl	8007418 <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 80081b0:	bf00      	nop
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	3301      	adds	r3, #1
 80081b8:	00db      	lsls	r3, r3, #3
 80081ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80081be:	4618      	mov	r0, r3
 80081c0:	f7ff f8de 	bl	8007380 <WIZCHIP_READ>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1f3      	bne.n	80081b2 <recv+0x13e>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80081ca:	88bb      	ldrh	r3, [r7, #4]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd90      	pop	{r4, r7, pc}
 80081d4:	200041b0 	.word	0x200041b0

080081d8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0
 80081dc:	bf00      	nop
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80081e6:	b480      	push	{r7}
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	bf00      	nop
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80081f4:	b480      	push	{r7}
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	bf00      	nop
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8008202:	b480      	push	{r7}
 8008204:	af00      	add	r7, sp, #0
 8008206:	bf00      	nop
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	b2db      	uxtb	r3, r3
 800821e:	4618      	mov	r0, r3
 8008220:	370c      	adds	r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800822a:	b480      	push	{r7}
 800822c:	b083      	sub	sp, #12
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	460b      	mov	r3, r1
 8008234:	70fb      	strb	r3, [r7, #3]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	78fa      	ldrb	r2, [r7, #3]
 800823a:	701a      	strb	r2, [r3, #0]
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8008248:	b480      	push	{r7}
 800824a:	af00      	add	r7, sp, #0
 800824c:	2300      	movs	r3, #0
 800824e:	4618      	mov	r0, r3
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	4603      	mov	r3, r0
 8008260:	71fb      	strb	r3, [r7, #7]
 8008262:	bf00      	nop
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
	...

08008270 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <reg_wizchip_cs_cbfunc+0x16>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d106      	bne.n	8008294 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8008286:	4b0a      	ldr	r3, [pc, #40]	; (80082b0 <reg_wizchip_cs_cbfunc+0x40>)
 8008288:	4a0a      	ldr	r2, [pc, #40]	; (80082b4 <reg_wizchip_cs_cbfunc+0x44>)
 800828a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800828c:	4b08      	ldr	r3, [pc, #32]	; (80082b0 <reg_wizchip_cs_cbfunc+0x40>)
 800828e:	4a0a      	ldr	r2, [pc, #40]	; (80082b8 <reg_wizchip_cs_cbfunc+0x48>)
 8008290:	619a      	str	r2, [r3, #24]
 8008292:	e006      	b.n	80082a2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8008294:	4a06      	ldr	r2, [pc, #24]	; (80082b0 <reg_wizchip_cs_cbfunc+0x40>)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800829a:	4a05      	ldr	r2, [pc, #20]	; (80082b0 <reg_wizchip_cs_cbfunc+0x40>)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	6193      	str	r3, [r2, #24]
   }
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	20000018 	.word	0x20000018
 80082b4:	080081f5 	.word	0x080081f5
 80082b8:	08008203 	.word	0x08008203

080082bc <reg_wizchip_spi_cbfunc>:
   else           WIZCHIP.IF.SPI._write_burst = spi_wbuf;
}
#else 

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80082c6:	bf00      	nop
 80082c8:	4b0f      	ldr	r3, [pc, #60]	; (8008308 <reg_wizchip_spi_cbfunc+0x4c>)
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d0f9      	beq.n	80082c8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d002      	beq.n	80082e0 <reg_wizchip_spi_cbfunc+0x24>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d106      	bne.n	80082ee <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80082e0:	4b09      	ldr	r3, [pc, #36]	; (8008308 <reg_wizchip_spi_cbfunc+0x4c>)
 80082e2:	4a0a      	ldr	r2, [pc, #40]	; (800830c <reg_wizchip_spi_cbfunc+0x50>)
 80082e4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80082e6:	4b08      	ldr	r3, [pc, #32]	; (8008308 <reg_wizchip_spi_cbfunc+0x4c>)
 80082e8:	4a09      	ldr	r2, [pc, #36]	; (8008310 <reg_wizchip_spi_cbfunc+0x54>)
 80082ea:	621a      	str	r2, [r3, #32]
 80082ec:	e006      	b.n	80082fc <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80082ee:	4a06      	ldr	r2, [pc, #24]	; (8008308 <reg_wizchip_spi_cbfunc+0x4c>)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80082f4:	4a04      	ldr	r2, [pc, #16]	; (8008308 <reg_wizchip_spi_cbfunc+0x4c>)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	6213      	str	r3, [r2, #32]
   }
}
 80082fa:	bf00      	nop
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	20000018 	.word	0x20000018
 800830c:	08008249 	.word	0x08008249
 8008310:	08008259 	.word	0x08008259

08008314 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800831a:	1d3b      	adds	r3, r7, #4
 800831c:	2206      	movs	r2, #6
 800831e:	4619      	mov	r1, r3
 8008320:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8008324:	f7ff f8c6 	bl	80074b4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8008328:	f107 0314 	add.w	r3, r7, #20
 800832c:	2204      	movs	r2, #4
 800832e:	4619      	mov	r1, r3
 8008330:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008334:	f7ff f8be 	bl	80074b4 <WIZCHIP_READ_BUF>
 8008338:	f107 0310 	add.w	r3, r7, #16
 800833c:	2204      	movs	r2, #4
 800833e:	4619      	mov	r1, r3
 8008340:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8008344:	f7ff f8b6 	bl	80074b4 <WIZCHIP_READ_BUF>
 8008348:	f107 030c 	add.w	r3, r7, #12
 800834c:	2204      	movs	r2, #4
 800834e:	4619      	mov	r1, r3
 8008350:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8008354:	f7ff f8ae 	bl	80074b4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8008358:	2180      	movs	r1, #128	; 0x80
 800835a:	2000      	movs	r0, #0
 800835c:	f7ff f85c 	bl	8007418 <WIZCHIP_WRITE>
   getMR(); // for delay
 8008360:	2000      	movs	r0, #0
 8008362:	f7ff f80d 	bl	8007380 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8008366:	1d3b      	adds	r3, r7, #4
 8008368:	2206      	movs	r2, #6
 800836a:	4619      	mov	r1, r3
 800836c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8008370:	f7ff f900 	bl	8007574 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8008374:	f107 0314 	add.w	r3, r7, #20
 8008378:	2204      	movs	r2, #4
 800837a:	4619      	mov	r1, r3
 800837c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008380:	f7ff f8f8 	bl	8007574 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8008384:	f107 0310 	add.w	r3, r7, #16
 8008388:	2204      	movs	r2, #4
 800838a:	4619      	mov	r1, r3
 800838c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8008390:	f7ff f8f0 	bl	8007574 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8008394:	f107 030c 	add.w	r3, r7, #12
 8008398:	2204      	movs	r2, #4
 800839a:	4619      	mov	r1, r3
 800839c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80083a0:	f7ff f8e8 	bl	8007574 <WIZCHIP_WRITE_BUF>
  setLLAR(lla);
  setGUAR(gua);
  if(islock & SYSR_CHPL) CHIPLOCK();
  if(islock & SYSR_NETL) NETLOCK();
#endif
}
 80083a4:	bf00      	nop
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80083b6:	2300      	movs	r3, #0
 80083b8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80083ba:	f7ff ffab 	bl	8008314 <wizchip_sw_reset>
   if(txsize)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d03b      	beq.n	800843c <wizchip_init+0x90>
   {
      tmp = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80083c8:	2300      	movs	r3, #0
 80083ca:	73fb      	strb	r3, [r7, #15]
 80083cc:	e015      	b.n	80083fa <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80083ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	4413      	add	r3, r2
 80083d6:	781a      	ldrb	r2, [r3, #0]
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	4413      	add	r3, r2
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 80083e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083e4:	2b10      	cmp	r3, #16
 80083e6:	dd02      	ble.n	80083ee <wizchip_init+0x42>
 80083e8:	f04f 33ff 	mov.w	r3, #4294967295
 80083ec:	e066      	b.n	80084bc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80083ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	3301      	adds	r3, #1
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	73fb      	strb	r3, [r7, #15]
 80083fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083fe:	2b07      	cmp	r3, #7
 8008400:	dde5      	ble.n	80083ce <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008402:	2300      	movs	r3, #0
 8008404:	73fb      	strb	r3, [r7, #15]
 8008406:	e015      	b.n	8008434 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8008408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	3301      	adds	r3, #1
 8008410:	00db      	lsls	r3, r3, #3
 8008412:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8008416:	4618      	mov	r0, r3
 8008418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	4413      	add	r3, r2
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	4619      	mov	r1, r3
 8008424:	f7fe fff8 	bl	8007418 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	3301      	adds	r3, #1
 8008430:	b2db      	uxtb	r3, r3
 8008432:	73fb      	strb	r3, [r7, #15]
 8008434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008438:	2b07      	cmp	r3, #7
 800843a:	dde5      	ble.n	8008408 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d03b      	beq.n	80084ba <wizchip_init+0x10e>
   {
      tmp = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]
 800844a:	e015      	b.n	8008478 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800844c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	4413      	add	r3, r2
 8008454:	781a      	ldrb	r2, [r3, #0]
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	4413      	add	r3, r2
 800845a:	b2db      	uxtb	r3, r3
 800845c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 800845e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008462:	2b10      	cmp	r3, #16
 8008464:	dd02      	ble.n	800846c <wizchip_init+0xc0>
 8008466:	f04f 33ff 	mov.w	r3, #4294967295
 800846a:	e027      	b.n	80084bc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800846c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008470:	b2db      	uxtb	r3, r3
 8008472:	3301      	adds	r3, #1
 8008474:	b2db      	uxtb	r3, r3
 8008476:	73fb      	strb	r3, [r7, #15]
 8008478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800847c:	2b07      	cmp	r3, #7
 800847e:	dde5      	ble.n	800844c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008480:	2300      	movs	r3, #0
 8008482:	73fb      	strb	r3, [r7, #15]
 8008484:	e015      	b.n	80084b2 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8008486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	3301      	adds	r3, #1
 800848e:	00db      	lsls	r3, r3, #3
 8008490:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8008494:	4618      	mov	r0, r3
 8008496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	4413      	add	r3, r2
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	4619      	mov	r1, r3
 80084a2:	f7fe ffb9 	bl	8007418 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80084a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	3301      	adds	r3, #1
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	73fb      	strb	r3, [r7, #15]
 80084b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084b6:	2b07      	cmp	r3, #7
 80084b8:	dde5      	ble.n	8008486 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <wizchip_setnetinfo>:

#endif

#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2206      	movs	r2, #6
 80084d0:	4619      	mov	r1, r3
 80084d2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80084d6:	f7ff f84d 	bl	8007574 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	330e      	adds	r3, #14
 80084de:	2204      	movs	r2, #4
 80084e0:	4619      	mov	r1, r3
 80084e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80084e6:	f7ff f845 	bl	8007574 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	330a      	adds	r3, #10
 80084ee:	2204      	movs	r2, #4
 80084f0:	4619      	mov	r1, r3
 80084f2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80084f6:	f7ff f83d 	bl	8007574 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	3306      	adds	r3, #6
 80084fe:	2204      	movs	r2, #4
 8008500:	4619      	mov	r1, r3
 8008502:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8008506:	f7ff f835 	bl	8007574 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	7c9a      	ldrb	r2, [r3, #18]
 800850e:	4b0b      	ldr	r3, [pc, #44]	; (800853c <wizchip_setnetinfo+0x78>)
 8008510:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	7cda      	ldrb	r2, [r3, #19]
 8008516:	4b09      	ldr	r3, [pc, #36]	; (800853c <wizchip_setnetinfo+0x78>)
 8008518:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	7d1a      	ldrb	r2, [r3, #20]
 800851e:	4b07      	ldr	r3, [pc, #28]	; (800853c <wizchip_setnetinfo+0x78>)
 8008520:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	7d5a      	ldrb	r2, [r3, #21]
 8008526:	4b05      	ldr	r3, [pc, #20]	; (800853c <wizchip_setnetinfo+0x78>)
 8008528:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	7d9a      	ldrb	r2, [r3, #22]
 800852e:	4b04      	ldr	r3, [pc, #16]	; (8008540 <wizchip_setnetinfo+0x7c>)
 8008530:	701a      	strb	r2, [r3, #0]
}
 8008532:	bf00      	nop
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	200041cc 	.word	0x200041cc
 8008540:	200041d0 	.word	0x200041d0

08008544 <atoi>:
 8008544:	220a      	movs	r2, #10
 8008546:	2100      	movs	r1, #0
 8008548:	f000 b882 	b.w	8008650 <strtol>

0800854c <_strtol_l.constprop.0>:
 800854c:	2b01      	cmp	r3, #1
 800854e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008552:	d001      	beq.n	8008558 <_strtol_l.constprop.0+0xc>
 8008554:	2b24      	cmp	r3, #36	; 0x24
 8008556:	d906      	bls.n	8008566 <_strtol_l.constprop.0+0x1a>
 8008558:	f000 f8ac 	bl	80086b4 <__errno>
 800855c:	2316      	movs	r3, #22
 800855e:	6003      	str	r3, [r0, #0]
 8008560:	2000      	movs	r0, #0
 8008562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008566:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800864c <_strtol_l.constprop.0+0x100>
 800856a:	460d      	mov	r5, r1
 800856c:	462e      	mov	r6, r5
 800856e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008572:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008576:	f017 0708 	ands.w	r7, r7, #8
 800857a:	d1f7      	bne.n	800856c <_strtol_l.constprop.0+0x20>
 800857c:	2c2d      	cmp	r4, #45	; 0x2d
 800857e:	d132      	bne.n	80085e6 <_strtol_l.constprop.0+0x9a>
 8008580:	782c      	ldrb	r4, [r5, #0]
 8008582:	2701      	movs	r7, #1
 8008584:	1cb5      	adds	r5, r6, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d05b      	beq.n	8008642 <_strtol_l.constprop.0+0xf6>
 800858a:	2b10      	cmp	r3, #16
 800858c:	d109      	bne.n	80085a2 <_strtol_l.constprop.0+0x56>
 800858e:	2c30      	cmp	r4, #48	; 0x30
 8008590:	d107      	bne.n	80085a2 <_strtol_l.constprop.0+0x56>
 8008592:	782c      	ldrb	r4, [r5, #0]
 8008594:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008598:	2c58      	cmp	r4, #88	; 0x58
 800859a:	d14d      	bne.n	8008638 <_strtol_l.constprop.0+0xec>
 800859c:	786c      	ldrb	r4, [r5, #1]
 800859e:	2310      	movs	r3, #16
 80085a0:	3502      	adds	r5, #2
 80085a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80085a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80085aa:	f04f 0e00 	mov.w	lr, #0
 80085ae:	fbb8 f9f3 	udiv	r9, r8, r3
 80085b2:	4676      	mov	r6, lr
 80085b4:	fb03 8a19 	mls	sl, r3, r9, r8
 80085b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80085bc:	f1bc 0f09 	cmp.w	ip, #9
 80085c0:	d816      	bhi.n	80085f0 <_strtol_l.constprop.0+0xa4>
 80085c2:	4664      	mov	r4, ip
 80085c4:	42a3      	cmp	r3, r4
 80085c6:	dd24      	ble.n	8008612 <_strtol_l.constprop.0+0xc6>
 80085c8:	f1be 3fff 	cmp.w	lr, #4294967295
 80085cc:	d008      	beq.n	80085e0 <_strtol_l.constprop.0+0x94>
 80085ce:	45b1      	cmp	r9, r6
 80085d0:	d31c      	bcc.n	800860c <_strtol_l.constprop.0+0xc0>
 80085d2:	d101      	bne.n	80085d8 <_strtol_l.constprop.0+0x8c>
 80085d4:	45a2      	cmp	sl, r4
 80085d6:	db19      	blt.n	800860c <_strtol_l.constprop.0+0xc0>
 80085d8:	fb06 4603 	mla	r6, r6, r3, r4
 80085dc:	f04f 0e01 	mov.w	lr, #1
 80085e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085e4:	e7e8      	b.n	80085b8 <_strtol_l.constprop.0+0x6c>
 80085e6:	2c2b      	cmp	r4, #43	; 0x2b
 80085e8:	bf04      	itt	eq
 80085ea:	782c      	ldrbeq	r4, [r5, #0]
 80085ec:	1cb5      	addeq	r5, r6, #2
 80085ee:	e7ca      	b.n	8008586 <_strtol_l.constprop.0+0x3a>
 80085f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80085f4:	f1bc 0f19 	cmp.w	ip, #25
 80085f8:	d801      	bhi.n	80085fe <_strtol_l.constprop.0+0xb2>
 80085fa:	3c37      	subs	r4, #55	; 0x37
 80085fc:	e7e2      	b.n	80085c4 <_strtol_l.constprop.0+0x78>
 80085fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008602:	f1bc 0f19 	cmp.w	ip, #25
 8008606:	d804      	bhi.n	8008612 <_strtol_l.constprop.0+0xc6>
 8008608:	3c57      	subs	r4, #87	; 0x57
 800860a:	e7db      	b.n	80085c4 <_strtol_l.constprop.0+0x78>
 800860c:	f04f 3eff 	mov.w	lr, #4294967295
 8008610:	e7e6      	b.n	80085e0 <_strtol_l.constprop.0+0x94>
 8008612:	f1be 3fff 	cmp.w	lr, #4294967295
 8008616:	d105      	bne.n	8008624 <_strtol_l.constprop.0+0xd8>
 8008618:	2322      	movs	r3, #34	; 0x22
 800861a:	6003      	str	r3, [r0, #0]
 800861c:	4646      	mov	r6, r8
 800861e:	b942      	cbnz	r2, 8008632 <_strtol_l.constprop.0+0xe6>
 8008620:	4630      	mov	r0, r6
 8008622:	e79e      	b.n	8008562 <_strtol_l.constprop.0+0x16>
 8008624:	b107      	cbz	r7, 8008628 <_strtol_l.constprop.0+0xdc>
 8008626:	4276      	negs	r6, r6
 8008628:	2a00      	cmp	r2, #0
 800862a:	d0f9      	beq.n	8008620 <_strtol_l.constprop.0+0xd4>
 800862c:	f1be 0f00 	cmp.w	lr, #0
 8008630:	d000      	beq.n	8008634 <_strtol_l.constprop.0+0xe8>
 8008632:	1e69      	subs	r1, r5, #1
 8008634:	6011      	str	r1, [r2, #0]
 8008636:	e7f3      	b.n	8008620 <_strtol_l.constprop.0+0xd4>
 8008638:	2430      	movs	r4, #48	; 0x30
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1b1      	bne.n	80085a2 <_strtol_l.constprop.0+0x56>
 800863e:	2308      	movs	r3, #8
 8008640:	e7af      	b.n	80085a2 <_strtol_l.constprop.0+0x56>
 8008642:	2c30      	cmp	r4, #48	; 0x30
 8008644:	d0a5      	beq.n	8008592 <_strtol_l.constprop.0+0x46>
 8008646:	230a      	movs	r3, #10
 8008648:	e7ab      	b.n	80085a2 <_strtol_l.constprop.0+0x56>
 800864a:	bf00      	nop
 800864c:	080090dd 	.word	0x080090dd

08008650 <strtol>:
 8008650:	4613      	mov	r3, r2
 8008652:	460a      	mov	r2, r1
 8008654:	4601      	mov	r1, r0
 8008656:	4802      	ldr	r0, [pc, #8]	; (8008660 <strtol+0x10>)
 8008658:	6800      	ldr	r0, [r0, #0]
 800865a:	f7ff bf77 	b.w	800854c <_strtol_l.constprop.0>
 800865e:	bf00      	nop
 8008660:	20000090 	.word	0x20000090

08008664 <siprintf>:
 8008664:	b40e      	push	{r1, r2, r3}
 8008666:	b500      	push	{lr}
 8008668:	b09c      	sub	sp, #112	; 0x70
 800866a:	ab1d      	add	r3, sp, #116	; 0x74
 800866c:	9002      	str	r0, [sp, #8]
 800866e:	9006      	str	r0, [sp, #24]
 8008670:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008674:	4809      	ldr	r0, [pc, #36]	; (800869c <siprintf+0x38>)
 8008676:	9107      	str	r1, [sp, #28]
 8008678:	9104      	str	r1, [sp, #16]
 800867a:	4909      	ldr	r1, [pc, #36]	; (80086a0 <siprintf+0x3c>)
 800867c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008680:	9105      	str	r1, [sp, #20]
 8008682:	6800      	ldr	r0, [r0, #0]
 8008684:	9301      	str	r3, [sp, #4]
 8008686:	a902      	add	r1, sp, #8
 8008688:	f000 f9a0 	bl	80089cc <_svfiprintf_r>
 800868c:	9b02      	ldr	r3, [sp, #8]
 800868e:	2200      	movs	r2, #0
 8008690:	701a      	strb	r2, [r3, #0]
 8008692:	b01c      	add	sp, #112	; 0x70
 8008694:	f85d eb04 	ldr.w	lr, [sp], #4
 8008698:	b003      	add	sp, #12
 800869a:	4770      	bx	lr
 800869c:	20000090 	.word	0x20000090
 80086a0:	ffff0208 	.word	0xffff0208

080086a4 <memset>:
 80086a4:	4402      	add	r2, r0
 80086a6:	4603      	mov	r3, r0
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d100      	bne.n	80086ae <memset+0xa>
 80086ac:	4770      	bx	lr
 80086ae:	f803 1b01 	strb.w	r1, [r3], #1
 80086b2:	e7f9      	b.n	80086a8 <memset+0x4>

080086b4 <__errno>:
 80086b4:	4b01      	ldr	r3, [pc, #4]	; (80086bc <__errno+0x8>)
 80086b6:	6818      	ldr	r0, [r3, #0]
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	20000090 	.word	0x20000090

080086c0 <__libc_init_array>:
 80086c0:	b570      	push	{r4, r5, r6, lr}
 80086c2:	4d0d      	ldr	r5, [pc, #52]	; (80086f8 <__libc_init_array+0x38>)
 80086c4:	4c0d      	ldr	r4, [pc, #52]	; (80086fc <__libc_init_array+0x3c>)
 80086c6:	1b64      	subs	r4, r4, r5
 80086c8:	10a4      	asrs	r4, r4, #2
 80086ca:	2600      	movs	r6, #0
 80086cc:	42a6      	cmp	r6, r4
 80086ce:	d109      	bne.n	80086e4 <__libc_init_array+0x24>
 80086d0:	4d0b      	ldr	r5, [pc, #44]	; (8008700 <__libc_init_array+0x40>)
 80086d2:	4c0c      	ldr	r4, [pc, #48]	; (8008704 <__libc_init_array+0x44>)
 80086d4:	f000 fc6a 	bl	8008fac <_init>
 80086d8:	1b64      	subs	r4, r4, r5
 80086da:	10a4      	asrs	r4, r4, #2
 80086dc:	2600      	movs	r6, #0
 80086de:	42a6      	cmp	r6, r4
 80086e0:	d105      	bne.n	80086ee <__libc_init_array+0x2e>
 80086e2:	bd70      	pop	{r4, r5, r6, pc}
 80086e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086e8:	4798      	blx	r3
 80086ea:	3601      	adds	r6, #1
 80086ec:	e7ee      	b.n	80086cc <__libc_init_array+0xc>
 80086ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80086f2:	4798      	blx	r3
 80086f4:	3601      	adds	r6, #1
 80086f6:	e7f2      	b.n	80086de <__libc_init_array+0x1e>
 80086f8:	08009218 	.word	0x08009218
 80086fc:	08009218 	.word	0x08009218
 8008700:	08009218 	.word	0x08009218
 8008704:	0800921c 	.word	0x0800921c

08008708 <__retarget_lock_acquire_recursive>:
 8008708:	4770      	bx	lr

0800870a <__retarget_lock_release_recursive>:
 800870a:	4770      	bx	lr

0800870c <memcpy>:
 800870c:	440a      	add	r2, r1
 800870e:	4291      	cmp	r1, r2
 8008710:	f100 33ff 	add.w	r3, r0, #4294967295
 8008714:	d100      	bne.n	8008718 <memcpy+0xc>
 8008716:	4770      	bx	lr
 8008718:	b510      	push	{r4, lr}
 800871a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800871e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008722:	4291      	cmp	r1, r2
 8008724:	d1f9      	bne.n	800871a <memcpy+0xe>
 8008726:	bd10      	pop	{r4, pc}

08008728 <_free_r>:
 8008728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800872a:	2900      	cmp	r1, #0
 800872c:	d044      	beq.n	80087b8 <_free_r+0x90>
 800872e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008732:	9001      	str	r0, [sp, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	f1a1 0404 	sub.w	r4, r1, #4
 800873a:	bfb8      	it	lt
 800873c:	18e4      	addlt	r4, r4, r3
 800873e:	f000 f8df 	bl	8008900 <__malloc_lock>
 8008742:	4a1e      	ldr	r2, [pc, #120]	; (80087bc <_free_r+0x94>)
 8008744:	9801      	ldr	r0, [sp, #4]
 8008746:	6813      	ldr	r3, [r2, #0]
 8008748:	b933      	cbnz	r3, 8008758 <_free_r+0x30>
 800874a:	6063      	str	r3, [r4, #4]
 800874c:	6014      	str	r4, [r2, #0]
 800874e:	b003      	add	sp, #12
 8008750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008754:	f000 b8da 	b.w	800890c <__malloc_unlock>
 8008758:	42a3      	cmp	r3, r4
 800875a:	d908      	bls.n	800876e <_free_r+0x46>
 800875c:	6825      	ldr	r5, [r4, #0]
 800875e:	1961      	adds	r1, r4, r5
 8008760:	428b      	cmp	r3, r1
 8008762:	bf01      	itttt	eq
 8008764:	6819      	ldreq	r1, [r3, #0]
 8008766:	685b      	ldreq	r3, [r3, #4]
 8008768:	1949      	addeq	r1, r1, r5
 800876a:	6021      	streq	r1, [r4, #0]
 800876c:	e7ed      	b.n	800874a <_free_r+0x22>
 800876e:	461a      	mov	r2, r3
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	b10b      	cbz	r3, 8008778 <_free_r+0x50>
 8008774:	42a3      	cmp	r3, r4
 8008776:	d9fa      	bls.n	800876e <_free_r+0x46>
 8008778:	6811      	ldr	r1, [r2, #0]
 800877a:	1855      	adds	r5, r2, r1
 800877c:	42a5      	cmp	r5, r4
 800877e:	d10b      	bne.n	8008798 <_free_r+0x70>
 8008780:	6824      	ldr	r4, [r4, #0]
 8008782:	4421      	add	r1, r4
 8008784:	1854      	adds	r4, r2, r1
 8008786:	42a3      	cmp	r3, r4
 8008788:	6011      	str	r1, [r2, #0]
 800878a:	d1e0      	bne.n	800874e <_free_r+0x26>
 800878c:	681c      	ldr	r4, [r3, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	6053      	str	r3, [r2, #4]
 8008792:	440c      	add	r4, r1
 8008794:	6014      	str	r4, [r2, #0]
 8008796:	e7da      	b.n	800874e <_free_r+0x26>
 8008798:	d902      	bls.n	80087a0 <_free_r+0x78>
 800879a:	230c      	movs	r3, #12
 800879c:	6003      	str	r3, [r0, #0]
 800879e:	e7d6      	b.n	800874e <_free_r+0x26>
 80087a0:	6825      	ldr	r5, [r4, #0]
 80087a2:	1961      	adds	r1, r4, r5
 80087a4:	428b      	cmp	r3, r1
 80087a6:	bf04      	itt	eq
 80087a8:	6819      	ldreq	r1, [r3, #0]
 80087aa:	685b      	ldreq	r3, [r3, #4]
 80087ac:	6063      	str	r3, [r4, #4]
 80087ae:	bf04      	itt	eq
 80087b0:	1949      	addeq	r1, r1, r5
 80087b2:	6021      	streq	r1, [r4, #0]
 80087b4:	6054      	str	r4, [r2, #4]
 80087b6:	e7ca      	b.n	800874e <_free_r+0x26>
 80087b8:	b003      	add	sp, #12
 80087ba:	bd30      	pop	{r4, r5, pc}
 80087bc:	20004314 	.word	0x20004314

080087c0 <sbrk_aligned>:
 80087c0:	b570      	push	{r4, r5, r6, lr}
 80087c2:	4e0e      	ldr	r6, [pc, #56]	; (80087fc <sbrk_aligned+0x3c>)
 80087c4:	460c      	mov	r4, r1
 80087c6:	6831      	ldr	r1, [r6, #0]
 80087c8:	4605      	mov	r5, r0
 80087ca:	b911      	cbnz	r1, 80087d2 <sbrk_aligned+0x12>
 80087cc:	f000 fba6 	bl	8008f1c <_sbrk_r>
 80087d0:	6030      	str	r0, [r6, #0]
 80087d2:	4621      	mov	r1, r4
 80087d4:	4628      	mov	r0, r5
 80087d6:	f000 fba1 	bl	8008f1c <_sbrk_r>
 80087da:	1c43      	adds	r3, r0, #1
 80087dc:	d00a      	beq.n	80087f4 <sbrk_aligned+0x34>
 80087de:	1cc4      	adds	r4, r0, #3
 80087e0:	f024 0403 	bic.w	r4, r4, #3
 80087e4:	42a0      	cmp	r0, r4
 80087e6:	d007      	beq.n	80087f8 <sbrk_aligned+0x38>
 80087e8:	1a21      	subs	r1, r4, r0
 80087ea:	4628      	mov	r0, r5
 80087ec:	f000 fb96 	bl	8008f1c <_sbrk_r>
 80087f0:	3001      	adds	r0, #1
 80087f2:	d101      	bne.n	80087f8 <sbrk_aligned+0x38>
 80087f4:	f04f 34ff 	mov.w	r4, #4294967295
 80087f8:	4620      	mov	r0, r4
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
 80087fc:	20004318 	.word	0x20004318

08008800 <_malloc_r>:
 8008800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008804:	1ccd      	adds	r5, r1, #3
 8008806:	f025 0503 	bic.w	r5, r5, #3
 800880a:	3508      	adds	r5, #8
 800880c:	2d0c      	cmp	r5, #12
 800880e:	bf38      	it	cc
 8008810:	250c      	movcc	r5, #12
 8008812:	2d00      	cmp	r5, #0
 8008814:	4607      	mov	r7, r0
 8008816:	db01      	blt.n	800881c <_malloc_r+0x1c>
 8008818:	42a9      	cmp	r1, r5
 800881a:	d905      	bls.n	8008828 <_malloc_r+0x28>
 800881c:	230c      	movs	r3, #12
 800881e:	603b      	str	r3, [r7, #0]
 8008820:	2600      	movs	r6, #0
 8008822:	4630      	mov	r0, r6
 8008824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008828:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80088fc <_malloc_r+0xfc>
 800882c:	f000 f868 	bl	8008900 <__malloc_lock>
 8008830:	f8d8 3000 	ldr.w	r3, [r8]
 8008834:	461c      	mov	r4, r3
 8008836:	bb5c      	cbnz	r4, 8008890 <_malloc_r+0x90>
 8008838:	4629      	mov	r1, r5
 800883a:	4638      	mov	r0, r7
 800883c:	f7ff ffc0 	bl	80087c0 <sbrk_aligned>
 8008840:	1c43      	adds	r3, r0, #1
 8008842:	4604      	mov	r4, r0
 8008844:	d155      	bne.n	80088f2 <_malloc_r+0xf2>
 8008846:	f8d8 4000 	ldr.w	r4, [r8]
 800884a:	4626      	mov	r6, r4
 800884c:	2e00      	cmp	r6, #0
 800884e:	d145      	bne.n	80088dc <_malloc_r+0xdc>
 8008850:	2c00      	cmp	r4, #0
 8008852:	d048      	beq.n	80088e6 <_malloc_r+0xe6>
 8008854:	6823      	ldr	r3, [r4, #0]
 8008856:	4631      	mov	r1, r6
 8008858:	4638      	mov	r0, r7
 800885a:	eb04 0903 	add.w	r9, r4, r3
 800885e:	f000 fb5d 	bl	8008f1c <_sbrk_r>
 8008862:	4581      	cmp	r9, r0
 8008864:	d13f      	bne.n	80088e6 <_malloc_r+0xe6>
 8008866:	6821      	ldr	r1, [r4, #0]
 8008868:	1a6d      	subs	r5, r5, r1
 800886a:	4629      	mov	r1, r5
 800886c:	4638      	mov	r0, r7
 800886e:	f7ff ffa7 	bl	80087c0 <sbrk_aligned>
 8008872:	3001      	adds	r0, #1
 8008874:	d037      	beq.n	80088e6 <_malloc_r+0xe6>
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	442b      	add	r3, r5
 800887a:	6023      	str	r3, [r4, #0]
 800887c:	f8d8 3000 	ldr.w	r3, [r8]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d038      	beq.n	80088f6 <_malloc_r+0xf6>
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	42a2      	cmp	r2, r4
 8008888:	d12b      	bne.n	80088e2 <_malloc_r+0xe2>
 800888a:	2200      	movs	r2, #0
 800888c:	605a      	str	r2, [r3, #4]
 800888e:	e00f      	b.n	80088b0 <_malloc_r+0xb0>
 8008890:	6822      	ldr	r2, [r4, #0]
 8008892:	1b52      	subs	r2, r2, r5
 8008894:	d41f      	bmi.n	80088d6 <_malloc_r+0xd6>
 8008896:	2a0b      	cmp	r2, #11
 8008898:	d917      	bls.n	80088ca <_malloc_r+0xca>
 800889a:	1961      	adds	r1, r4, r5
 800889c:	42a3      	cmp	r3, r4
 800889e:	6025      	str	r5, [r4, #0]
 80088a0:	bf18      	it	ne
 80088a2:	6059      	strne	r1, [r3, #4]
 80088a4:	6863      	ldr	r3, [r4, #4]
 80088a6:	bf08      	it	eq
 80088a8:	f8c8 1000 	streq.w	r1, [r8]
 80088ac:	5162      	str	r2, [r4, r5]
 80088ae:	604b      	str	r3, [r1, #4]
 80088b0:	4638      	mov	r0, r7
 80088b2:	f104 060b 	add.w	r6, r4, #11
 80088b6:	f000 f829 	bl	800890c <__malloc_unlock>
 80088ba:	f026 0607 	bic.w	r6, r6, #7
 80088be:	1d23      	adds	r3, r4, #4
 80088c0:	1af2      	subs	r2, r6, r3
 80088c2:	d0ae      	beq.n	8008822 <_malloc_r+0x22>
 80088c4:	1b9b      	subs	r3, r3, r6
 80088c6:	50a3      	str	r3, [r4, r2]
 80088c8:	e7ab      	b.n	8008822 <_malloc_r+0x22>
 80088ca:	42a3      	cmp	r3, r4
 80088cc:	6862      	ldr	r2, [r4, #4]
 80088ce:	d1dd      	bne.n	800888c <_malloc_r+0x8c>
 80088d0:	f8c8 2000 	str.w	r2, [r8]
 80088d4:	e7ec      	b.n	80088b0 <_malloc_r+0xb0>
 80088d6:	4623      	mov	r3, r4
 80088d8:	6864      	ldr	r4, [r4, #4]
 80088da:	e7ac      	b.n	8008836 <_malloc_r+0x36>
 80088dc:	4634      	mov	r4, r6
 80088de:	6876      	ldr	r6, [r6, #4]
 80088e0:	e7b4      	b.n	800884c <_malloc_r+0x4c>
 80088e2:	4613      	mov	r3, r2
 80088e4:	e7cc      	b.n	8008880 <_malloc_r+0x80>
 80088e6:	230c      	movs	r3, #12
 80088e8:	603b      	str	r3, [r7, #0]
 80088ea:	4638      	mov	r0, r7
 80088ec:	f000 f80e 	bl	800890c <__malloc_unlock>
 80088f0:	e797      	b.n	8008822 <_malloc_r+0x22>
 80088f2:	6025      	str	r5, [r4, #0]
 80088f4:	e7dc      	b.n	80088b0 <_malloc_r+0xb0>
 80088f6:	605b      	str	r3, [r3, #4]
 80088f8:	deff      	udf	#255	; 0xff
 80088fa:	bf00      	nop
 80088fc:	20004314 	.word	0x20004314

08008900 <__malloc_lock>:
 8008900:	4801      	ldr	r0, [pc, #4]	; (8008908 <__malloc_lock+0x8>)
 8008902:	f7ff bf01 	b.w	8008708 <__retarget_lock_acquire_recursive>
 8008906:	bf00      	nop
 8008908:	20004310 	.word	0x20004310

0800890c <__malloc_unlock>:
 800890c:	4801      	ldr	r0, [pc, #4]	; (8008914 <__malloc_unlock+0x8>)
 800890e:	f7ff befc 	b.w	800870a <__retarget_lock_release_recursive>
 8008912:	bf00      	nop
 8008914:	20004310 	.word	0x20004310

08008918 <__ssputs_r>:
 8008918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800891c:	688e      	ldr	r6, [r1, #8]
 800891e:	461f      	mov	r7, r3
 8008920:	42be      	cmp	r6, r7
 8008922:	680b      	ldr	r3, [r1, #0]
 8008924:	4682      	mov	sl, r0
 8008926:	460c      	mov	r4, r1
 8008928:	4690      	mov	r8, r2
 800892a:	d82c      	bhi.n	8008986 <__ssputs_r+0x6e>
 800892c:	898a      	ldrh	r2, [r1, #12]
 800892e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008932:	d026      	beq.n	8008982 <__ssputs_r+0x6a>
 8008934:	6965      	ldr	r5, [r4, #20]
 8008936:	6909      	ldr	r1, [r1, #16]
 8008938:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800893c:	eba3 0901 	sub.w	r9, r3, r1
 8008940:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008944:	1c7b      	adds	r3, r7, #1
 8008946:	444b      	add	r3, r9
 8008948:	106d      	asrs	r5, r5, #1
 800894a:	429d      	cmp	r5, r3
 800894c:	bf38      	it	cc
 800894e:	461d      	movcc	r5, r3
 8008950:	0553      	lsls	r3, r2, #21
 8008952:	d527      	bpl.n	80089a4 <__ssputs_r+0x8c>
 8008954:	4629      	mov	r1, r5
 8008956:	f7ff ff53 	bl	8008800 <_malloc_r>
 800895a:	4606      	mov	r6, r0
 800895c:	b360      	cbz	r0, 80089b8 <__ssputs_r+0xa0>
 800895e:	6921      	ldr	r1, [r4, #16]
 8008960:	464a      	mov	r2, r9
 8008962:	f7ff fed3 	bl	800870c <memcpy>
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800896c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008970:	81a3      	strh	r3, [r4, #12]
 8008972:	6126      	str	r6, [r4, #16]
 8008974:	6165      	str	r5, [r4, #20]
 8008976:	444e      	add	r6, r9
 8008978:	eba5 0509 	sub.w	r5, r5, r9
 800897c:	6026      	str	r6, [r4, #0]
 800897e:	60a5      	str	r5, [r4, #8]
 8008980:	463e      	mov	r6, r7
 8008982:	42be      	cmp	r6, r7
 8008984:	d900      	bls.n	8008988 <__ssputs_r+0x70>
 8008986:	463e      	mov	r6, r7
 8008988:	6820      	ldr	r0, [r4, #0]
 800898a:	4632      	mov	r2, r6
 800898c:	4641      	mov	r1, r8
 800898e:	f000 faab 	bl	8008ee8 <memmove>
 8008992:	68a3      	ldr	r3, [r4, #8]
 8008994:	1b9b      	subs	r3, r3, r6
 8008996:	60a3      	str	r3, [r4, #8]
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	4433      	add	r3, r6
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	2000      	movs	r0, #0
 80089a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089a4:	462a      	mov	r2, r5
 80089a6:	f000 fac9 	bl	8008f3c <_realloc_r>
 80089aa:	4606      	mov	r6, r0
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d1e0      	bne.n	8008972 <__ssputs_r+0x5a>
 80089b0:	6921      	ldr	r1, [r4, #16]
 80089b2:	4650      	mov	r0, sl
 80089b4:	f7ff feb8 	bl	8008728 <_free_r>
 80089b8:	230c      	movs	r3, #12
 80089ba:	f8ca 3000 	str.w	r3, [sl]
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089c4:	81a3      	strh	r3, [r4, #12]
 80089c6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ca:	e7e9      	b.n	80089a0 <__ssputs_r+0x88>

080089cc <_svfiprintf_r>:
 80089cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d0:	4698      	mov	r8, r3
 80089d2:	898b      	ldrh	r3, [r1, #12]
 80089d4:	061b      	lsls	r3, r3, #24
 80089d6:	b09d      	sub	sp, #116	; 0x74
 80089d8:	4607      	mov	r7, r0
 80089da:	460d      	mov	r5, r1
 80089dc:	4614      	mov	r4, r2
 80089de:	d50e      	bpl.n	80089fe <_svfiprintf_r+0x32>
 80089e0:	690b      	ldr	r3, [r1, #16]
 80089e2:	b963      	cbnz	r3, 80089fe <_svfiprintf_r+0x32>
 80089e4:	2140      	movs	r1, #64	; 0x40
 80089e6:	f7ff ff0b 	bl	8008800 <_malloc_r>
 80089ea:	6028      	str	r0, [r5, #0]
 80089ec:	6128      	str	r0, [r5, #16]
 80089ee:	b920      	cbnz	r0, 80089fa <_svfiprintf_r+0x2e>
 80089f0:	230c      	movs	r3, #12
 80089f2:	603b      	str	r3, [r7, #0]
 80089f4:	f04f 30ff 	mov.w	r0, #4294967295
 80089f8:	e0d0      	b.n	8008b9c <_svfiprintf_r+0x1d0>
 80089fa:	2340      	movs	r3, #64	; 0x40
 80089fc:	616b      	str	r3, [r5, #20]
 80089fe:	2300      	movs	r3, #0
 8008a00:	9309      	str	r3, [sp, #36]	; 0x24
 8008a02:	2320      	movs	r3, #32
 8008a04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a08:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a0c:	2330      	movs	r3, #48	; 0x30
 8008a0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008bb4 <_svfiprintf_r+0x1e8>
 8008a12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a16:	f04f 0901 	mov.w	r9, #1
 8008a1a:	4623      	mov	r3, r4
 8008a1c:	469a      	mov	sl, r3
 8008a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a22:	b10a      	cbz	r2, 8008a28 <_svfiprintf_r+0x5c>
 8008a24:	2a25      	cmp	r2, #37	; 0x25
 8008a26:	d1f9      	bne.n	8008a1c <_svfiprintf_r+0x50>
 8008a28:	ebba 0b04 	subs.w	fp, sl, r4
 8008a2c:	d00b      	beq.n	8008a46 <_svfiprintf_r+0x7a>
 8008a2e:	465b      	mov	r3, fp
 8008a30:	4622      	mov	r2, r4
 8008a32:	4629      	mov	r1, r5
 8008a34:	4638      	mov	r0, r7
 8008a36:	f7ff ff6f 	bl	8008918 <__ssputs_r>
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	f000 80a9 	beq.w	8008b92 <_svfiprintf_r+0x1c6>
 8008a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a42:	445a      	add	r2, fp
 8008a44:	9209      	str	r2, [sp, #36]	; 0x24
 8008a46:	f89a 3000 	ldrb.w	r3, [sl]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 80a1 	beq.w	8008b92 <_svfiprintf_r+0x1c6>
 8008a50:	2300      	movs	r3, #0
 8008a52:	f04f 32ff 	mov.w	r2, #4294967295
 8008a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a5a:	f10a 0a01 	add.w	sl, sl, #1
 8008a5e:	9304      	str	r3, [sp, #16]
 8008a60:	9307      	str	r3, [sp, #28]
 8008a62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a66:	931a      	str	r3, [sp, #104]	; 0x68
 8008a68:	4654      	mov	r4, sl
 8008a6a:	2205      	movs	r2, #5
 8008a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a70:	4850      	ldr	r0, [pc, #320]	; (8008bb4 <_svfiprintf_r+0x1e8>)
 8008a72:	f7f7 fbb5 	bl	80001e0 <memchr>
 8008a76:	9a04      	ldr	r2, [sp, #16]
 8008a78:	b9d8      	cbnz	r0, 8008ab2 <_svfiprintf_r+0xe6>
 8008a7a:	06d0      	lsls	r0, r2, #27
 8008a7c:	bf44      	itt	mi
 8008a7e:	2320      	movmi	r3, #32
 8008a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a84:	0711      	lsls	r1, r2, #28
 8008a86:	bf44      	itt	mi
 8008a88:	232b      	movmi	r3, #43	; 0x2b
 8008a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a92:	2b2a      	cmp	r3, #42	; 0x2a
 8008a94:	d015      	beq.n	8008ac2 <_svfiprintf_r+0xf6>
 8008a96:	9a07      	ldr	r2, [sp, #28]
 8008a98:	4654      	mov	r4, sl
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	f04f 0c0a 	mov.w	ip, #10
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aa6:	3b30      	subs	r3, #48	; 0x30
 8008aa8:	2b09      	cmp	r3, #9
 8008aaa:	d94d      	bls.n	8008b48 <_svfiprintf_r+0x17c>
 8008aac:	b1b0      	cbz	r0, 8008adc <_svfiprintf_r+0x110>
 8008aae:	9207      	str	r2, [sp, #28]
 8008ab0:	e014      	b.n	8008adc <_svfiprintf_r+0x110>
 8008ab2:	eba0 0308 	sub.w	r3, r0, r8
 8008ab6:	fa09 f303 	lsl.w	r3, r9, r3
 8008aba:	4313      	orrs	r3, r2
 8008abc:	9304      	str	r3, [sp, #16]
 8008abe:	46a2      	mov	sl, r4
 8008ac0:	e7d2      	b.n	8008a68 <_svfiprintf_r+0x9c>
 8008ac2:	9b03      	ldr	r3, [sp, #12]
 8008ac4:	1d19      	adds	r1, r3, #4
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	9103      	str	r1, [sp, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	bfbb      	ittet	lt
 8008ace:	425b      	neglt	r3, r3
 8008ad0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ad4:	9307      	strge	r3, [sp, #28]
 8008ad6:	9307      	strlt	r3, [sp, #28]
 8008ad8:	bfb8      	it	lt
 8008ada:	9204      	strlt	r2, [sp, #16]
 8008adc:	7823      	ldrb	r3, [r4, #0]
 8008ade:	2b2e      	cmp	r3, #46	; 0x2e
 8008ae0:	d10c      	bne.n	8008afc <_svfiprintf_r+0x130>
 8008ae2:	7863      	ldrb	r3, [r4, #1]
 8008ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ae6:	d134      	bne.n	8008b52 <_svfiprintf_r+0x186>
 8008ae8:	9b03      	ldr	r3, [sp, #12]
 8008aea:	1d1a      	adds	r2, r3, #4
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	9203      	str	r2, [sp, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	bfb8      	it	lt
 8008af4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008af8:	3402      	adds	r4, #2
 8008afa:	9305      	str	r3, [sp, #20]
 8008afc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008bc4 <_svfiprintf_r+0x1f8>
 8008b00:	7821      	ldrb	r1, [r4, #0]
 8008b02:	2203      	movs	r2, #3
 8008b04:	4650      	mov	r0, sl
 8008b06:	f7f7 fb6b 	bl	80001e0 <memchr>
 8008b0a:	b138      	cbz	r0, 8008b1c <_svfiprintf_r+0x150>
 8008b0c:	9b04      	ldr	r3, [sp, #16]
 8008b0e:	eba0 000a 	sub.w	r0, r0, sl
 8008b12:	2240      	movs	r2, #64	; 0x40
 8008b14:	4082      	lsls	r2, r0
 8008b16:	4313      	orrs	r3, r2
 8008b18:	3401      	adds	r4, #1
 8008b1a:	9304      	str	r3, [sp, #16]
 8008b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b20:	4825      	ldr	r0, [pc, #148]	; (8008bb8 <_svfiprintf_r+0x1ec>)
 8008b22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b26:	2206      	movs	r2, #6
 8008b28:	f7f7 fb5a 	bl	80001e0 <memchr>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	d038      	beq.n	8008ba2 <_svfiprintf_r+0x1d6>
 8008b30:	4b22      	ldr	r3, [pc, #136]	; (8008bbc <_svfiprintf_r+0x1f0>)
 8008b32:	bb1b      	cbnz	r3, 8008b7c <_svfiprintf_r+0x1b0>
 8008b34:	9b03      	ldr	r3, [sp, #12]
 8008b36:	3307      	adds	r3, #7
 8008b38:	f023 0307 	bic.w	r3, r3, #7
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	9303      	str	r3, [sp, #12]
 8008b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b42:	4433      	add	r3, r6
 8008b44:	9309      	str	r3, [sp, #36]	; 0x24
 8008b46:	e768      	b.n	8008a1a <_svfiprintf_r+0x4e>
 8008b48:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	2001      	movs	r0, #1
 8008b50:	e7a6      	b.n	8008aa0 <_svfiprintf_r+0xd4>
 8008b52:	2300      	movs	r3, #0
 8008b54:	3401      	adds	r4, #1
 8008b56:	9305      	str	r3, [sp, #20]
 8008b58:	4619      	mov	r1, r3
 8008b5a:	f04f 0c0a 	mov.w	ip, #10
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b64:	3a30      	subs	r2, #48	; 0x30
 8008b66:	2a09      	cmp	r2, #9
 8008b68:	d903      	bls.n	8008b72 <_svfiprintf_r+0x1a6>
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0c6      	beq.n	8008afc <_svfiprintf_r+0x130>
 8008b6e:	9105      	str	r1, [sp, #20]
 8008b70:	e7c4      	b.n	8008afc <_svfiprintf_r+0x130>
 8008b72:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b76:	4604      	mov	r4, r0
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e7f0      	b.n	8008b5e <_svfiprintf_r+0x192>
 8008b7c:	ab03      	add	r3, sp, #12
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	462a      	mov	r2, r5
 8008b82:	4b0f      	ldr	r3, [pc, #60]	; (8008bc0 <_svfiprintf_r+0x1f4>)
 8008b84:	a904      	add	r1, sp, #16
 8008b86:	4638      	mov	r0, r7
 8008b88:	f3af 8000 	nop.w
 8008b8c:	1c42      	adds	r2, r0, #1
 8008b8e:	4606      	mov	r6, r0
 8008b90:	d1d6      	bne.n	8008b40 <_svfiprintf_r+0x174>
 8008b92:	89ab      	ldrh	r3, [r5, #12]
 8008b94:	065b      	lsls	r3, r3, #25
 8008b96:	f53f af2d 	bmi.w	80089f4 <_svfiprintf_r+0x28>
 8008b9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b9c:	b01d      	add	sp, #116	; 0x74
 8008b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba2:	ab03      	add	r3, sp, #12
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	462a      	mov	r2, r5
 8008ba8:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <_svfiprintf_r+0x1f4>)
 8008baa:	a904      	add	r1, sp, #16
 8008bac:	4638      	mov	r0, r7
 8008bae:	f000 f879 	bl	8008ca4 <_printf_i>
 8008bb2:	e7eb      	b.n	8008b8c <_svfiprintf_r+0x1c0>
 8008bb4:	080091dd 	.word	0x080091dd
 8008bb8:	080091e7 	.word	0x080091e7
 8008bbc:	00000000 	.word	0x00000000
 8008bc0:	08008919 	.word	0x08008919
 8008bc4:	080091e3 	.word	0x080091e3

08008bc8 <_printf_common>:
 8008bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bcc:	4616      	mov	r6, r2
 8008bce:	4699      	mov	r9, r3
 8008bd0:	688a      	ldr	r2, [r1, #8]
 8008bd2:	690b      	ldr	r3, [r1, #16]
 8008bd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	bfb8      	it	lt
 8008bdc:	4613      	movlt	r3, r2
 8008bde:	6033      	str	r3, [r6, #0]
 8008be0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008be4:	4607      	mov	r7, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	b10a      	cbz	r2, 8008bee <_printf_common+0x26>
 8008bea:	3301      	adds	r3, #1
 8008bec:	6033      	str	r3, [r6, #0]
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	0699      	lsls	r1, r3, #26
 8008bf2:	bf42      	ittt	mi
 8008bf4:	6833      	ldrmi	r3, [r6, #0]
 8008bf6:	3302      	addmi	r3, #2
 8008bf8:	6033      	strmi	r3, [r6, #0]
 8008bfa:	6825      	ldr	r5, [r4, #0]
 8008bfc:	f015 0506 	ands.w	r5, r5, #6
 8008c00:	d106      	bne.n	8008c10 <_printf_common+0x48>
 8008c02:	f104 0a19 	add.w	sl, r4, #25
 8008c06:	68e3      	ldr	r3, [r4, #12]
 8008c08:	6832      	ldr	r2, [r6, #0]
 8008c0a:	1a9b      	subs	r3, r3, r2
 8008c0c:	42ab      	cmp	r3, r5
 8008c0e:	dc26      	bgt.n	8008c5e <_printf_common+0x96>
 8008c10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c14:	1e13      	subs	r3, r2, #0
 8008c16:	6822      	ldr	r2, [r4, #0]
 8008c18:	bf18      	it	ne
 8008c1a:	2301      	movne	r3, #1
 8008c1c:	0692      	lsls	r2, r2, #26
 8008c1e:	d42b      	bmi.n	8008c78 <_printf_common+0xb0>
 8008c20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c24:	4649      	mov	r1, r9
 8008c26:	4638      	mov	r0, r7
 8008c28:	47c0      	blx	r8
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	d01e      	beq.n	8008c6c <_printf_common+0xa4>
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	6922      	ldr	r2, [r4, #16]
 8008c32:	f003 0306 	and.w	r3, r3, #6
 8008c36:	2b04      	cmp	r3, #4
 8008c38:	bf02      	ittt	eq
 8008c3a:	68e5      	ldreq	r5, [r4, #12]
 8008c3c:	6833      	ldreq	r3, [r6, #0]
 8008c3e:	1aed      	subeq	r5, r5, r3
 8008c40:	68a3      	ldr	r3, [r4, #8]
 8008c42:	bf0c      	ite	eq
 8008c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c48:	2500      	movne	r5, #0
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	bfc4      	itt	gt
 8008c4e:	1a9b      	subgt	r3, r3, r2
 8008c50:	18ed      	addgt	r5, r5, r3
 8008c52:	2600      	movs	r6, #0
 8008c54:	341a      	adds	r4, #26
 8008c56:	42b5      	cmp	r5, r6
 8008c58:	d11a      	bne.n	8008c90 <_printf_common+0xc8>
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	e008      	b.n	8008c70 <_printf_common+0xa8>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	4652      	mov	r2, sl
 8008c62:	4649      	mov	r1, r9
 8008c64:	4638      	mov	r0, r7
 8008c66:	47c0      	blx	r8
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d103      	bne.n	8008c74 <_printf_common+0xac>
 8008c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c74:	3501      	adds	r5, #1
 8008c76:	e7c6      	b.n	8008c06 <_printf_common+0x3e>
 8008c78:	18e1      	adds	r1, r4, r3
 8008c7a:	1c5a      	adds	r2, r3, #1
 8008c7c:	2030      	movs	r0, #48	; 0x30
 8008c7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c82:	4422      	add	r2, r4
 8008c84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c8c:	3302      	adds	r3, #2
 8008c8e:	e7c7      	b.n	8008c20 <_printf_common+0x58>
 8008c90:	2301      	movs	r3, #1
 8008c92:	4622      	mov	r2, r4
 8008c94:	4649      	mov	r1, r9
 8008c96:	4638      	mov	r0, r7
 8008c98:	47c0      	blx	r8
 8008c9a:	3001      	adds	r0, #1
 8008c9c:	d0e6      	beq.n	8008c6c <_printf_common+0xa4>
 8008c9e:	3601      	adds	r6, #1
 8008ca0:	e7d9      	b.n	8008c56 <_printf_common+0x8e>
	...

08008ca4 <_printf_i>:
 8008ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca8:	7e0f      	ldrb	r7, [r1, #24]
 8008caa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cac:	2f78      	cmp	r7, #120	; 0x78
 8008cae:	4691      	mov	r9, r2
 8008cb0:	4680      	mov	r8, r0
 8008cb2:	460c      	mov	r4, r1
 8008cb4:	469a      	mov	sl, r3
 8008cb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cba:	d807      	bhi.n	8008ccc <_printf_i+0x28>
 8008cbc:	2f62      	cmp	r7, #98	; 0x62
 8008cbe:	d80a      	bhi.n	8008cd6 <_printf_i+0x32>
 8008cc0:	2f00      	cmp	r7, #0
 8008cc2:	f000 80d4 	beq.w	8008e6e <_printf_i+0x1ca>
 8008cc6:	2f58      	cmp	r7, #88	; 0x58
 8008cc8:	f000 80c0 	beq.w	8008e4c <_printf_i+0x1a8>
 8008ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cd4:	e03a      	b.n	8008d4c <_printf_i+0xa8>
 8008cd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cda:	2b15      	cmp	r3, #21
 8008cdc:	d8f6      	bhi.n	8008ccc <_printf_i+0x28>
 8008cde:	a101      	add	r1, pc, #4	; (adr r1, 8008ce4 <_printf_i+0x40>)
 8008ce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ce4:	08008d3d 	.word	0x08008d3d
 8008ce8:	08008d51 	.word	0x08008d51
 8008cec:	08008ccd 	.word	0x08008ccd
 8008cf0:	08008ccd 	.word	0x08008ccd
 8008cf4:	08008ccd 	.word	0x08008ccd
 8008cf8:	08008ccd 	.word	0x08008ccd
 8008cfc:	08008d51 	.word	0x08008d51
 8008d00:	08008ccd 	.word	0x08008ccd
 8008d04:	08008ccd 	.word	0x08008ccd
 8008d08:	08008ccd 	.word	0x08008ccd
 8008d0c:	08008ccd 	.word	0x08008ccd
 8008d10:	08008e55 	.word	0x08008e55
 8008d14:	08008d7d 	.word	0x08008d7d
 8008d18:	08008e0f 	.word	0x08008e0f
 8008d1c:	08008ccd 	.word	0x08008ccd
 8008d20:	08008ccd 	.word	0x08008ccd
 8008d24:	08008e77 	.word	0x08008e77
 8008d28:	08008ccd 	.word	0x08008ccd
 8008d2c:	08008d7d 	.word	0x08008d7d
 8008d30:	08008ccd 	.word	0x08008ccd
 8008d34:	08008ccd 	.word	0x08008ccd
 8008d38:	08008e17 	.word	0x08008e17
 8008d3c:	682b      	ldr	r3, [r5, #0]
 8008d3e:	1d1a      	adds	r2, r3, #4
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	602a      	str	r2, [r5, #0]
 8008d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e09f      	b.n	8008e90 <_printf_i+0x1ec>
 8008d50:	6820      	ldr	r0, [r4, #0]
 8008d52:	682b      	ldr	r3, [r5, #0]
 8008d54:	0607      	lsls	r7, r0, #24
 8008d56:	f103 0104 	add.w	r1, r3, #4
 8008d5a:	6029      	str	r1, [r5, #0]
 8008d5c:	d501      	bpl.n	8008d62 <_printf_i+0xbe>
 8008d5e:	681e      	ldr	r6, [r3, #0]
 8008d60:	e003      	b.n	8008d6a <_printf_i+0xc6>
 8008d62:	0646      	lsls	r6, r0, #25
 8008d64:	d5fb      	bpl.n	8008d5e <_printf_i+0xba>
 8008d66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d6a:	2e00      	cmp	r6, #0
 8008d6c:	da03      	bge.n	8008d76 <_printf_i+0xd2>
 8008d6e:	232d      	movs	r3, #45	; 0x2d
 8008d70:	4276      	negs	r6, r6
 8008d72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d76:	485a      	ldr	r0, [pc, #360]	; (8008ee0 <_printf_i+0x23c>)
 8008d78:	230a      	movs	r3, #10
 8008d7a:	e012      	b.n	8008da2 <_printf_i+0xfe>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	6820      	ldr	r0, [r4, #0]
 8008d80:	1d19      	adds	r1, r3, #4
 8008d82:	6029      	str	r1, [r5, #0]
 8008d84:	0605      	lsls	r5, r0, #24
 8008d86:	d501      	bpl.n	8008d8c <_printf_i+0xe8>
 8008d88:	681e      	ldr	r6, [r3, #0]
 8008d8a:	e002      	b.n	8008d92 <_printf_i+0xee>
 8008d8c:	0641      	lsls	r1, r0, #25
 8008d8e:	d5fb      	bpl.n	8008d88 <_printf_i+0xe4>
 8008d90:	881e      	ldrh	r6, [r3, #0]
 8008d92:	4853      	ldr	r0, [pc, #332]	; (8008ee0 <_printf_i+0x23c>)
 8008d94:	2f6f      	cmp	r7, #111	; 0x6f
 8008d96:	bf0c      	ite	eq
 8008d98:	2308      	moveq	r3, #8
 8008d9a:	230a      	movne	r3, #10
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008da2:	6865      	ldr	r5, [r4, #4]
 8008da4:	60a5      	str	r5, [r4, #8]
 8008da6:	2d00      	cmp	r5, #0
 8008da8:	bfa2      	ittt	ge
 8008daa:	6821      	ldrge	r1, [r4, #0]
 8008dac:	f021 0104 	bicge.w	r1, r1, #4
 8008db0:	6021      	strge	r1, [r4, #0]
 8008db2:	b90e      	cbnz	r6, 8008db8 <_printf_i+0x114>
 8008db4:	2d00      	cmp	r5, #0
 8008db6:	d04b      	beq.n	8008e50 <_printf_i+0x1ac>
 8008db8:	4615      	mov	r5, r2
 8008dba:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dbe:	fb03 6711 	mls	r7, r3, r1, r6
 8008dc2:	5dc7      	ldrb	r7, [r0, r7]
 8008dc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008dc8:	4637      	mov	r7, r6
 8008dca:	42bb      	cmp	r3, r7
 8008dcc:	460e      	mov	r6, r1
 8008dce:	d9f4      	bls.n	8008dba <_printf_i+0x116>
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d10b      	bne.n	8008dec <_printf_i+0x148>
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	07de      	lsls	r6, r3, #31
 8008dd8:	d508      	bpl.n	8008dec <_printf_i+0x148>
 8008dda:	6923      	ldr	r3, [r4, #16]
 8008ddc:	6861      	ldr	r1, [r4, #4]
 8008dde:	4299      	cmp	r1, r3
 8008de0:	bfde      	ittt	le
 8008de2:	2330      	movle	r3, #48	; 0x30
 8008de4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008de8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dec:	1b52      	subs	r2, r2, r5
 8008dee:	6122      	str	r2, [r4, #16]
 8008df0:	f8cd a000 	str.w	sl, [sp]
 8008df4:	464b      	mov	r3, r9
 8008df6:	aa03      	add	r2, sp, #12
 8008df8:	4621      	mov	r1, r4
 8008dfa:	4640      	mov	r0, r8
 8008dfc:	f7ff fee4 	bl	8008bc8 <_printf_common>
 8008e00:	3001      	adds	r0, #1
 8008e02:	d14a      	bne.n	8008e9a <_printf_i+0x1f6>
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295
 8008e08:	b004      	add	sp, #16
 8008e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	f043 0320 	orr.w	r3, r3, #32
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	4833      	ldr	r0, [pc, #204]	; (8008ee4 <_printf_i+0x240>)
 8008e18:	2778      	movs	r7, #120	; 0x78
 8008e1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e1e:	6823      	ldr	r3, [r4, #0]
 8008e20:	6829      	ldr	r1, [r5, #0]
 8008e22:	061f      	lsls	r7, r3, #24
 8008e24:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e28:	d402      	bmi.n	8008e30 <_printf_i+0x18c>
 8008e2a:	065f      	lsls	r7, r3, #25
 8008e2c:	bf48      	it	mi
 8008e2e:	b2b6      	uxthmi	r6, r6
 8008e30:	07df      	lsls	r7, r3, #31
 8008e32:	bf48      	it	mi
 8008e34:	f043 0320 	orrmi.w	r3, r3, #32
 8008e38:	6029      	str	r1, [r5, #0]
 8008e3a:	bf48      	it	mi
 8008e3c:	6023      	strmi	r3, [r4, #0]
 8008e3e:	b91e      	cbnz	r6, 8008e48 <_printf_i+0x1a4>
 8008e40:	6823      	ldr	r3, [r4, #0]
 8008e42:	f023 0320 	bic.w	r3, r3, #32
 8008e46:	6023      	str	r3, [r4, #0]
 8008e48:	2310      	movs	r3, #16
 8008e4a:	e7a7      	b.n	8008d9c <_printf_i+0xf8>
 8008e4c:	4824      	ldr	r0, [pc, #144]	; (8008ee0 <_printf_i+0x23c>)
 8008e4e:	e7e4      	b.n	8008e1a <_printf_i+0x176>
 8008e50:	4615      	mov	r5, r2
 8008e52:	e7bd      	b.n	8008dd0 <_printf_i+0x12c>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	6826      	ldr	r6, [r4, #0]
 8008e58:	6961      	ldr	r1, [r4, #20]
 8008e5a:	1d18      	adds	r0, r3, #4
 8008e5c:	6028      	str	r0, [r5, #0]
 8008e5e:	0635      	lsls	r5, r6, #24
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	d501      	bpl.n	8008e68 <_printf_i+0x1c4>
 8008e64:	6019      	str	r1, [r3, #0]
 8008e66:	e002      	b.n	8008e6e <_printf_i+0x1ca>
 8008e68:	0670      	lsls	r0, r6, #25
 8008e6a:	d5fb      	bpl.n	8008e64 <_printf_i+0x1c0>
 8008e6c:	8019      	strh	r1, [r3, #0]
 8008e6e:	2300      	movs	r3, #0
 8008e70:	6123      	str	r3, [r4, #16]
 8008e72:	4615      	mov	r5, r2
 8008e74:	e7bc      	b.n	8008df0 <_printf_i+0x14c>
 8008e76:	682b      	ldr	r3, [r5, #0]
 8008e78:	1d1a      	adds	r2, r3, #4
 8008e7a:	602a      	str	r2, [r5, #0]
 8008e7c:	681d      	ldr	r5, [r3, #0]
 8008e7e:	6862      	ldr	r2, [r4, #4]
 8008e80:	2100      	movs	r1, #0
 8008e82:	4628      	mov	r0, r5
 8008e84:	f7f7 f9ac 	bl	80001e0 <memchr>
 8008e88:	b108      	cbz	r0, 8008e8e <_printf_i+0x1ea>
 8008e8a:	1b40      	subs	r0, r0, r5
 8008e8c:	6060      	str	r0, [r4, #4]
 8008e8e:	6863      	ldr	r3, [r4, #4]
 8008e90:	6123      	str	r3, [r4, #16]
 8008e92:	2300      	movs	r3, #0
 8008e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e98:	e7aa      	b.n	8008df0 <_printf_i+0x14c>
 8008e9a:	6923      	ldr	r3, [r4, #16]
 8008e9c:	462a      	mov	r2, r5
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	47d0      	blx	sl
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	d0ad      	beq.n	8008e04 <_printf_i+0x160>
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	079b      	lsls	r3, r3, #30
 8008eac:	d413      	bmi.n	8008ed6 <_printf_i+0x232>
 8008eae:	68e0      	ldr	r0, [r4, #12]
 8008eb0:	9b03      	ldr	r3, [sp, #12]
 8008eb2:	4298      	cmp	r0, r3
 8008eb4:	bfb8      	it	lt
 8008eb6:	4618      	movlt	r0, r3
 8008eb8:	e7a6      	b.n	8008e08 <_printf_i+0x164>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	4632      	mov	r2, r6
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	47d0      	blx	sl
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	d09d      	beq.n	8008e04 <_printf_i+0x160>
 8008ec8:	3501      	adds	r5, #1
 8008eca:	68e3      	ldr	r3, [r4, #12]
 8008ecc:	9903      	ldr	r1, [sp, #12]
 8008ece:	1a5b      	subs	r3, r3, r1
 8008ed0:	42ab      	cmp	r3, r5
 8008ed2:	dcf2      	bgt.n	8008eba <_printf_i+0x216>
 8008ed4:	e7eb      	b.n	8008eae <_printf_i+0x20a>
 8008ed6:	2500      	movs	r5, #0
 8008ed8:	f104 0619 	add.w	r6, r4, #25
 8008edc:	e7f5      	b.n	8008eca <_printf_i+0x226>
 8008ede:	bf00      	nop
 8008ee0:	080091ee 	.word	0x080091ee
 8008ee4:	080091ff 	.word	0x080091ff

08008ee8 <memmove>:
 8008ee8:	4288      	cmp	r0, r1
 8008eea:	b510      	push	{r4, lr}
 8008eec:	eb01 0402 	add.w	r4, r1, r2
 8008ef0:	d902      	bls.n	8008ef8 <memmove+0x10>
 8008ef2:	4284      	cmp	r4, r0
 8008ef4:	4623      	mov	r3, r4
 8008ef6:	d807      	bhi.n	8008f08 <memmove+0x20>
 8008ef8:	1e43      	subs	r3, r0, #1
 8008efa:	42a1      	cmp	r1, r4
 8008efc:	d008      	beq.n	8008f10 <memmove+0x28>
 8008efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f06:	e7f8      	b.n	8008efa <memmove+0x12>
 8008f08:	4402      	add	r2, r0
 8008f0a:	4601      	mov	r1, r0
 8008f0c:	428a      	cmp	r2, r1
 8008f0e:	d100      	bne.n	8008f12 <memmove+0x2a>
 8008f10:	bd10      	pop	{r4, pc}
 8008f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f1a:	e7f7      	b.n	8008f0c <memmove+0x24>

08008f1c <_sbrk_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4d06      	ldr	r5, [pc, #24]	; (8008f38 <_sbrk_r+0x1c>)
 8008f20:	2300      	movs	r3, #0
 8008f22:	4604      	mov	r4, r0
 8008f24:	4608      	mov	r0, r1
 8008f26:	602b      	str	r3, [r5, #0]
 8008f28:	f7fe f896 	bl	8007058 <_sbrk>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d102      	bne.n	8008f36 <_sbrk_r+0x1a>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	b103      	cbz	r3, 8008f36 <_sbrk_r+0x1a>
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	2000430c 	.word	0x2000430c

08008f3c <_realloc_r>:
 8008f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f40:	4680      	mov	r8, r0
 8008f42:	4614      	mov	r4, r2
 8008f44:	460e      	mov	r6, r1
 8008f46:	b921      	cbnz	r1, 8008f52 <_realloc_r+0x16>
 8008f48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	f7ff bc57 	b.w	8008800 <_malloc_r>
 8008f52:	b92a      	cbnz	r2, 8008f60 <_realloc_r+0x24>
 8008f54:	f7ff fbe8 	bl	8008728 <_free_r>
 8008f58:	4625      	mov	r5, r4
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f60:	f000 f81b 	bl	8008f9a <_malloc_usable_size_r>
 8008f64:	4284      	cmp	r4, r0
 8008f66:	4607      	mov	r7, r0
 8008f68:	d802      	bhi.n	8008f70 <_realloc_r+0x34>
 8008f6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f6e:	d812      	bhi.n	8008f96 <_realloc_r+0x5a>
 8008f70:	4621      	mov	r1, r4
 8008f72:	4640      	mov	r0, r8
 8008f74:	f7ff fc44 	bl	8008800 <_malloc_r>
 8008f78:	4605      	mov	r5, r0
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d0ed      	beq.n	8008f5a <_realloc_r+0x1e>
 8008f7e:	42bc      	cmp	r4, r7
 8008f80:	4622      	mov	r2, r4
 8008f82:	4631      	mov	r1, r6
 8008f84:	bf28      	it	cs
 8008f86:	463a      	movcs	r2, r7
 8008f88:	f7ff fbc0 	bl	800870c <memcpy>
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	4640      	mov	r0, r8
 8008f90:	f7ff fbca 	bl	8008728 <_free_r>
 8008f94:	e7e1      	b.n	8008f5a <_realloc_r+0x1e>
 8008f96:	4635      	mov	r5, r6
 8008f98:	e7df      	b.n	8008f5a <_realloc_r+0x1e>

08008f9a <_malloc_usable_size_r>:
 8008f9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f9e:	1f18      	subs	r0, r3, #4
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	bfbc      	itt	lt
 8008fa4:	580b      	ldrlt	r3, [r1, r0]
 8008fa6:	18c0      	addlt	r0, r0, r3
 8008fa8:	4770      	bx	lr
	...

08008fac <_init>:
 8008fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fae:	bf00      	nop
 8008fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb2:	bc08      	pop	{r3}
 8008fb4:	469e      	mov	lr, r3
 8008fb6:	4770      	bx	lr

08008fb8 <_fini>:
 8008fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fba:	bf00      	nop
 8008fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fbe:	bc08      	pop	{r3}
 8008fc0:	469e      	mov	lr, r3
 8008fc2:	4770      	bx	lr
