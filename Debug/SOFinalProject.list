
SOFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003160  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080032f0  080032f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003330  08003330  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003338  08003338  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003338  08003338  00013338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800333c  0800333c  0001333c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000406c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000407c  2000407c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b709  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002602  00000000  00000000  0002b78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c00  00000000  00000000  0002dd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008fb  00000000  00000000  0002e990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000230af  00000000  00000000  0002f28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e89d  00000000  00000000  0005233a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d68f3  00000000  00000000  00060bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002f20  00000000  00000000  001374cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0013a3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080032d8 	.word	0x080032d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080032d8 	.word	0x080032d8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d0:	4b0e      	ldr	r3, [pc, #56]	; (800050c <HAL_Init+0x40>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <HAL_Init+0x40>)
 80004d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004dc:	4b0b      	ldr	r3, [pc, #44]	; (800050c <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0a      	ldr	r2, [pc, #40]	; (800050c <HAL_Init+0x40>)
 80004e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a07      	ldr	r2, [pc, #28]	; (800050c <HAL_Init+0x40>)
 80004ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f4:	2003      	movs	r0, #3
 80004f6:	f000 fb6f 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fa:	200f      	movs	r0, #15
 80004fc:	f000 f808 	bl	8000510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000500:	f002 fe32 	bl	8003168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000504:	2300      	movs	r3, #0
}
 8000506:	4618      	mov	r0, r3
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40023c00 	.word	0x40023c00

08000510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x54>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <HAL_InitTick+0x58>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	4619      	mov	r1, r3
 8000522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000526:	fbb3 f3f1 	udiv	r3, r3, r1
 800052a:	fbb2 f3f3 	udiv	r3, r2, r3
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fb79 	bl	8000c26 <HAL_SYSTICK_Config>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800053a:	2301      	movs	r3, #1
 800053c:	e00e      	b.n	800055c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b0f      	cmp	r3, #15
 8000542:	d80a      	bhi.n	800055a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000544:	2200      	movs	r2, #0
 8000546:	6879      	ldr	r1, [r7, #4]
 8000548:	f04f 30ff 	mov.w	r0, #4294967295
 800054c:	f000 fb4f 	bl	8000bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <HAL_InitTick+0x5c>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000556:	2300      	movs	r3, #0
 8000558:	e000      	b.n	800055c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
}
 800055c:	4618      	mov	r0, r3
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	2000000c 	.word	0x2000000c
 8000568:	20000004 	.word	0x20000004
 800056c:	20000000 	.word	0x20000000

08000570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x20>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	461a      	mov	r2, r3
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_IncTick+0x24>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4413      	add	r3, r2
 8000580:	4a04      	ldr	r2, [pc, #16]	; (8000594 <HAL_IncTick+0x24>)
 8000582:	6013      	str	r3, [r2, #0]
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000004 	.word	0x20000004
 8000594:	2000002c 	.word	0x2000002c

08000598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  return uwTick;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <HAL_GetTick+0x14>)
 800059e:	681b      	ldr	r3, [r3, #0]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	2000002c 	.word	0x2000002c

080005b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d101      	bne.n	80005c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	e033      	b.n	800062e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d109      	bne.n	80005e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f002 fc3e 	bl	8002e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e6:	f003 0310 	and.w	r3, r3, #16
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d118      	bne.n	8000620 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005f6:	f023 0302 	bic.w	r3, r3, #2
 80005fa:	f043 0202 	orr.w	r2, r3, #2
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f93a 	bl	800087c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	f023 0303 	bic.w	r3, r3, #3
 8000616:	f043 0201 	orr.w	r2, r3, #1
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	641a      	str	r2, [r3, #64]	; 0x40
 800061e:	e001      	b.n	8000624 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000620:	2301      	movs	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800062c:	7bfb      	ldrb	r3, [r7, #15]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800064c:	2b01      	cmp	r3, #1
 800064e:	d101      	bne.n	8000654 <HAL_ADC_ConfigChannel+0x1c>
 8000650:	2302      	movs	r3, #2
 8000652:	e105      	b.n	8000860 <HAL_ADC_ConfigChannel+0x228>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2201      	movs	r2, #1
 8000658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b09      	cmp	r3, #9
 8000662:	d925      	bls.n	80006b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	68d9      	ldr	r1, [r3, #12]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	b29b      	uxth	r3, r3
 8000670:	461a      	mov	r2, r3
 8000672:	4613      	mov	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	4413      	add	r3, r2
 8000678:	3b1e      	subs	r3, #30
 800067a:	2207      	movs	r2, #7
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	43da      	mvns	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	400a      	ands	r2, r1
 8000688:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68d9      	ldr	r1, [r3, #12]
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	689a      	ldr	r2, [r3, #8]
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	b29b      	uxth	r3, r3
 800069a:	4618      	mov	r0, r3
 800069c:	4603      	mov	r3, r0
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4403      	add	r3, r0
 80006a2:	3b1e      	subs	r3, #30
 80006a4:	409a      	lsls	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	430a      	orrs	r2, r1
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	e022      	b.n	80006f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	6919      	ldr	r1, [r3, #16]
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	461a      	mov	r2, r3
 80006be:	4613      	mov	r3, r2
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	4413      	add	r3, r2
 80006c4:	2207      	movs	r2, #7
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	43da      	mvns	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	400a      	ands	r2, r1
 80006d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6919      	ldr	r1, [r3, #16]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	689a      	ldr	r2, [r3, #8]
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	4618      	mov	r0, r3
 80006e6:	4603      	mov	r3, r0
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	4403      	add	r3, r0
 80006ec:	409a      	lsls	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	430a      	orrs	r2, r1
 80006f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d824      	bhi.n	8000748 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	685a      	ldr	r2, [r3, #4]
 8000708:	4613      	mov	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4413      	add	r3, r2
 800070e:	3b05      	subs	r3, #5
 8000710:	221f      	movs	r2, #31
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	43da      	mvns	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	400a      	ands	r2, r1
 800071e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	b29b      	uxth	r3, r3
 800072c:	4618      	mov	r0, r3
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	685a      	ldr	r2, [r3, #4]
 8000732:	4613      	mov	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4413      	add	r3, r2
 8000738:	3b05      	subs	r3, #5
 800073a:	fa00 f203 	lsl.w	r2, r0, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	430a      	orrs	r2, r1
 8000744:	635a      	str	r2, [r3, #52]	; 0x34
 8000746:	e04c      	b.n	80007e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	2b0c      	cmp	r3, #12
 800074e:	d824      	bhi.n	800079a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4413      	add	r3, r2
 8000760:	3b23      	subs	r3, #35	; 0x23
 8000762:	221f      	movs	r2, #31
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	43da      	mvns	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	400a      	ands	r2, r1
 8000770:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	b29b      	uxth	r3, r3
 800077e:	4618      	mov	r0, r3
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	685a      	ldr	r2, [r3, #4]
 8000784:	4613      	mov	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	3b23      	subs	r3, #35	; 0x23
 800078c:	fa00 f203 	lsl.w	r2, r0, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	430a      	orrs	r2, r1
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
 8000798:	e023      	b.n	80007e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	4613      	mov	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	3b41      	subs	r3, #65	; 0x41
 80007ac:	221f      	movs	r2, #31
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	43da      	mvns	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	400a      	ands	r2, r1
 80007ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	685a      	ldr	r2, [r3, #4]
 80007ce:	4613      	mov	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4413      	add	r3, r2
 80007d4:	3b41      	subs	r3, #65	; 0x41
 80007d6:	fa00 f203 	lsl.w	r2, r0, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	430a      	orrs	r2, r1
 80007e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007e2:	4b22      	ldr	r3, [pc, #136]	; (800086c <HAL_ADC_ConfigChannel+0x234>)
 80007e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a21      	ldr	r2, [pc, #132]	; (8000870 <HAL_ADC_ConfigChannel+0x238>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d109      	bne.n	8000804 <HAL_ADC_ConfigChannel+0x1cc>
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b12      	cmp	r3, #18
 80007f6:	d105      	bne.n	8000804 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a19      	ldr	r2, [pc, #100]	; (8000870 <HAL_ADC_ConfigChannel+0x238>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d123      	bne.n	8000856 <HAL_ADC_ConfigChannel+0x21e>
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b10      	cmp	r3, #16
 8000814:	d003      	beq.n	800081e <HAL_ADC_ConfigChannel+0x1e6>
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b11      	cmp	r3, #17
 800081c:	d11b      	bne.n	8000856 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b10      	cmp	r3, #16
 8000830:	d111      	bne.n	8000856 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <HAL_ADC_ConfigChannel+0x23c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a10      	ldr	r2, [pc, #64]	; (8000878 <HAL_ADC_ConfigChannel+0x240>)
 8000838:	fba2 2303 	umull	r2, r3, r2, r3
 800083c:	0c9a      	lsrs	r2, r3, #18
 800083e:	4613      	mov	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000848:	e002      	b.n	8000850 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	3b01      	subs	r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1f9      	bne.n	800084a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	40012300 	.word	0x40012300
 8000870:	40012000 	.word	0x40012000
 8000874:	2000000c 	.word	0x2000000c
 8000878:	431bde83 	.word	0x431bde83

0800087c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000884:	4b79      	ldr	r3, [pc, #484]	; (8000a6c <ADC_Init+0x1f0>)
 8000886:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	685a      	ldr	r2, [r3, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	431a      	orrs	r2, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	685a      	ldr	r2, [r3, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	6859      	ldr	r1, [r3, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	691b      	ldr	r3, [r3, #16]
 80008bc:	021a      	lsls	r2, r3, #8
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	685a      	ldr	r2, [r3, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80008d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6859      	ldr	r1, [r3, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	430a      	orrs	r2, r1
 80008e6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80008f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	6899      	ldr	r1, [r3, #8]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	68da      	ldr	r2, [r3, #12]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	430a      	orrs	r2, r1
 8000908:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090e:	4a58      	ldr	r2, [pc, #352]	; (8000a70 <ADC_Init+0x1f4>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d022      	beq.n	800095a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000922:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6899      	ldr	r1, [r3, #8]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	430a      	orrs	r2, r1
 8000934:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	689a      	ldr	r2, [r3, #8]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000944:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	6899      	ldr	r1, [r3, #8]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	430a      	orrs	r2, r1
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	e00f      	b.n	800097a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000968:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	689a      	ldr	r2, [r3, #8]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000978:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f022 0202 	bic.w	r2, r2, #2
 8000988:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	6899      	ldr	r1, [r3, #8]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	7e1b      	ldrb	r3, [r3, #24]
 8000994:	005a      	lsls	r2, r3, #1
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	430a      	orrs	r2, r1
 800099c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d01b      	beq.n	80009e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009b6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80009c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	6859      	ldr	r1, [r3, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d2:	3b01      	subs	r3, #1
 80009d4:	035a      	lsls	r2, r3, #13
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	430a      	orrs	r2, r1
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	e007      	b.n	80009f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	685a      	ldr	r2, [r3, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009ee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	051a      	lsls	r2, r3, #20
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	430a      	orrs	r2, r1
 8000a14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	689a      	ldr	r2, [r3, #8]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	6899      	ldr	r1, [r3, #8]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a32:	025a      	lsls	r2, r3, #9
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	689a      	ldr	r2, [r3, #8]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	6899      	ldr	r1, [r3, #8]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	029a      	lsls	r2, r3, #10
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	609a      	str	r2, [r3, #8]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	40012300 	.word	0x40012300
 8000a70:	0f000001 	.word	0x0f000001

08000a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	60d3      	str	r3, [r2, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	f003 0307 	and.w	r3, r3, #7
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db0a      	blt.n	8000b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	490c      	ldr	r1, [pc, #48]	; (8000b24 <__NVIC_SetPriority+0x4c>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	0112      	lsls	r2, r2, #4
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	440b      	add	r3, r1
 8000afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b00:	e00a      	b.n	8000b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4908      	ldr	r1, [pc, #32]	; (8000b28 <__NVIC_SetPriority+0x50>)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	f003 030f 	and.w	r3, r3, #15
 8000b0e:	3b04      	subs	r3, #4
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	b2d2      	uxtb	r2, r2
 8000b14:	440b      	add	r3, r1
 8000b16:	761a      	strb	r2, [r3, #24]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000e100 	.word	0xe000e100
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f1c3 0307 	rsb	r3, r3, #7
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	bf28      	it	cs
 8000b4a:	2304      	movcs	r3, #4
 8000b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3304      	adds	r3, #4
 8000b52:	2b06      	cmp	r3, #6
 8000b54:	d902      	bls.n	8000b5c <NVIC_EncodePriority+0x30>
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3b03      	subs	r3, #3
 8000b5a:	e000      	b.n	8000b5e <NVIC_EncodePriority+0x32>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	f04f 32ff 	mov.w	r2, #4294967295
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	401a      	ands	r2, r3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	43d9      	mvns	r1, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	4313      	orrs	r3, r2
         );
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3724      	adds	r7, #36	; 0x24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba4:	d301      	bcc.n	8000baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00f      	b.n	8000bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <SysTick_Config+0x40>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f7ff ff8e 	bl	8000ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <SysTick_Config+0x40>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <SysTick_Config+0x40>)
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff47 	bl	8000a74 <__NVIC_SetPriorityGrouping>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c00:	f7ff ff5c 	bl	8000abc <__NVIC_GetPriorityGrouping>
 8000c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff ff8e 	bl	8000b2c <NVIC_EncodePriority>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff5d 	bl	8000ad8 <__NVIC_SetPriority>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffb0 	bl	8000b94 <SysTick_Config>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	e16b      	b.n	8000f34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	f040 815a 	bne.w	8000f2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d005      	beq.n	8000c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d130      	bne.n	8000cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc8:	2201      	movs	r2, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	091b      	lsrs	r3, r3, #4
 8000cde:	f003 0201 	and.w	r2, r3, #1
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	d017      	beq.n	8000d30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d123      	bne.n	8000d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	08da      	lsrs	r2, r3, #3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3208      	adds	r2, #8
 8000d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	220f      	movs	r2, #15
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	691a      	ldr	r2, [r3, #16]
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	08da      	lsrs	r2, r3, #3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3208      	adds	r2, #8
 8000d7e:	69b9      	ldr	r1, [r7, #24]
 8000d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0203 	and.w	r2, r3, #3
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 80b4 	beq.w	8000f2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b60      	ldr	r3, [pc, #384]	; (8000f4c <HAL_GPIO_Init+0x30c>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a5f      	ldr	r2, [pc, #380]	; (8000f4c <HAL_GPIO_Init+0x30c>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b5d      	ldr	r3, [pc, #372]	; (8000f4c <HAL_GPIO_Init+0x30c>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000de2:	4a5b      	ldr	r2, [pc, #364]	; (8000f50 <HAL_GPIO_Init+0x310>)
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	3302      	adds	r3, #2
 8000dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	220f      	movs	r2, #15
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a52      	ldr	r2, [pc, #328]	; (8000f54 <HAL_GPIO_Init+0x314>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d02b      	beq.n	8000e66 <HAL_GPIO_Init+0x226>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a51      	ldr	r2, [pc, #324]	; (8000f58 <HAL_GPIO_Init+0x318>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d025      	beq.n	8000e62 <HAL_GPIO_Init+0x222>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a50      	ldr	r2, [pc, #320]	; (8000f5c <HAL_GPIO_Init+0x31c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d01f      	beq.n	8000e5e <HAL_GPIO_Init+0x21e>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4f      	ldr	r2, [pc, #316]	; (8000f60 <HAL_GPIO_Init+0x320>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d019      	beq.n	8000e5a <HAL_GPIO_Init+0x21a>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4e      	ldr	r2, [pc, #312]	; (8000f64 <HAL_GPIO_Init+0x324>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d013      	beq.n	8000e56 <HAL_GPIO_Init+0x216>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4d      	ldr	r2, [pc, #308]	; (8000f68 <HAL_GPIO_Init+0x328>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00d      	beq.n	8000e52 <HAL_GPIO_Init+0x212>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4c      	ldr	r2, [pc, #304]	; (8000f6c <HAL_GPIO_Init+0x32c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x20e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4b      	ldr	r2, [pc, #300]	; (8000f70 <HAL_GPIO_Init+0x330>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_GPIO_Init+0x20a>
 8000e46:	2307      	movs	r3, #7
 8000e48:	e00e      	b.n	8000e68 <HAL_GPIO_Init+0x228>
 8000e4a:	2308      	movs	r3, #8
 8000e4c:	e00c      	b.n	8000e68 <HAL_GPIO_Init+0x228>
 8000e4e:	2306      	movs	r3, #6
 8000e50:	e00a      	b.n	8000e68 <HAL_GPIO_Init+0x228>
 8000e52:	2305      	movs	r3, #5
 8000e54:	e008      	b.n	8000e68 <HAL_GPIO_Init+0x228>
 8000e56:	2304      	movs	r3, #4
 8000e58:	e006      	b.n	8000e68 <HAL_GPIO_Init+0x228>
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e004      	b.n	8000e68 <HAL_GPIO_Init+0x228>
 8000e5e:	2302      	movs	r3, #2
 8000e60:	e002      	b.n	8000e68 <HAL_GPIO_Init+0x228>
 8000e62:	2301      	movs	r3, #1
 8000e64:	e000      	b.n	8000e68 <HAL_GPIO_Init+0x228>
 8000e66:	2300      	movs	r3, #0
 8000e68:	69fa      	ldr	r2, [r7, #28]
 8000e6a:	f002 0203 	and.w	r2, r2, #3
 8000e6e:	0092      	lsls	r2, r2, #2
 8000e70:	4093      	lsls	r3, r2
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e78:	4935      	ldr	r1, [pc, #212]	; (8000f50 <HAL_GPIO_Init+0x310>)
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	3302      	adds	r3, #2
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e86:	4b3b      	ldr	r3, [pc, #236]	; (8000f74 <HAL_GPIO_Init+0x334>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eaa:	4a32      	ldr	r2, [pc, #200]	; (8000f74 <HAL_GPIO_Init+0x334>)
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb0:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <HAL_GPIO_Init+0x334>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed4:	4a27      	ldr	r2, [pc, #156]	; (8000f74 <HAL_GPIO_Init+0x334>)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <HAL_GPIO_Init+0x334>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000efe:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <HAL_GPIO_Init+0x334>)
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_GPIO_Init+0x334>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f28:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <HAL_GPIO_Init+0x334>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3301      	adds	r3, #1
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	2b0f      	cmp	r3, #15
 8000f38:	f67f ae90 	bls.w	8000c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40013800 	.word	0x40013800
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	40020c00 	.word	0x40020c00
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40021400 	.word	0x40021400
 8000f6c:	40021800 	.word	0x40021800
 8000f70:	40021c00 	.word	0x40021c00
 8000f74:	40013c00 	.word	0x40013c00

08000f78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e267      	b.n	800145a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d075      	beq.n	8001082 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f96:	4b88      	ldr	r3, [pc, #544]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d00c      	beq.n	8000fbc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fa2:	4b85      	ldr	r3, [pc, #532]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	d112      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fae:	4b82      	ldr	r3, [pc, #520]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fba:	d10b      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbc:	4b7e      	ldr	r3, [pc, #504]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d05b      	beq.n	8001080 <HAL_RCC_OscConfig+0x108>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d157      	bne.n	8001080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e242      	b.n	800145a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fdc:	d106      	bne.n	8000fec <HAL_RCC_OscConfig+0x74>
 8000fde:	4b76      	ldr	r3, [pc, #472]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a75      	ldr	r2, [pc, #468]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 8000fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e01d      	b.n	8001028 <HAL_RCC_OscConfig+0xb0>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff4:	d10c      	bne.n	8001010 <HAL_RCC_OscConfig+0x98>
 8000ff6:	4b70      	ldr	r3, [pc, #448]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a6f      	ldr	r2, [pc, #444]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b6d      	ldr	r3, [pc, #436]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a6c      	ldr	r2, [pc, #432]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 8001008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e00b      	b.n	8001028 <HAL_RCC_OscConfig+0xb0>
 8001010:	4b69      	ldr	r3, [pc, #420]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a68      	ldr	r2, [pc, #416]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 8001016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b66      	ldr	r3, [pc, #408]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a65      	ldr	r2, [pc, #404]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 8001022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d013      	beq.n	8001058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001030:	f7ff fab2 	bl	8000598 <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001038:	f7ff faae 	bl	8000598 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b64      	cmp	r3, #100	; 0x64
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e207      	b.n	800145a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104a:	4b5b      	ldr	r3, [pc, #364]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f0      	beq.n	8001038 <HAL_RCC_OscConfig+0xc0>
 8001056:	e014      	b.n	8001082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001058:	f7ff fa9e 	bl	8000598 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001060:	f7ff fa9a 	bl	8000598 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b64      	cmp	r3, #100	; 0x64
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e1f3      	b.n	800145a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001072:	4b51      	ldr	r3, [pc, #324]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f0      	bne.n	8001060 <HAL_RCC_OscConfig+0xe8>
 800107e:	e000      	b.n	8001082 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d063      	beq.n	8001156 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800108e:	4b4a      	ldr	r3, [pc, #296]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00b      	beq.n	80010b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800109a:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d11c      	bne.n	80010e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010a6:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d116      	bne.n	80010e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b2:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d005      	beq.n	80010ca <HAL_RCC_OscConfig+0x152>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d001      	beq.n	80010ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e1c7      	b.n	800145a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4937      	ldr	r1, [pc, #220]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010de:	e03a      	b.n	8001156 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d020      	beq.n	800112a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e8:	4b34      	ldr	r3, [pc, #208]	; (80011bc <HAL_RCC_OscConfig+0x244>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ee:	f7ff fa53 	bl	8000598 <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f6:	f7ff fa4f 	bl	8000598 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e1a8      	b.n	800145a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001108:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0f0      	beq.n	80010f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4925      	ldr	r1, [pc, #148]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 8001124:	4313      	orrs	r3, r2
 8001126:	600b      	str	r3, [r1, #0]
 8001128:	e015      	b.n	8001156 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800112a:	4b24      	ldr	r3, [pc, #144]	; (80011bc <HAL_RCC_OscConfig+0x244>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001130:	f7ff fa32 	bl	8000598 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001138:	f7ff fa2e 	bl	8000598 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e187      	b.n	800145a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	2b00      	cmp	r3, #0
 8001160:	d036      	beq.n	80011d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d016      	beq.n	8001198 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_RCC_OscConfig+0x248>)
 800116c:	2201      	movs	r2, #1
 800116e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001170:	f7ff fa12 	bl	8000598 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001178:	f7ff fa0e 	bl	8000598 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e167      	b.n	800145a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_RCC_OscConfig+0x240>)
 800118c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0f0      	beq.n	8001178 <HAL_RCC_OscConfig+0x200>
 8001196:	e01b      	b.n	80011d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_RCC_OscConfig+0x248>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119e:	f7ff f9fb 	bl	8000598 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a4:	e00e      	b.n	80011c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a6:	f7ff f9f7 	bl	8000598 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d907      	bls.n	80011c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e150      	b.n	800145a <HAL_RCC_OscConfig+0x4e2>
 80011b8:	40023800 	.word	0x40023800
 80011bc:	42470000 	.word	0x42470000
 80011c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c4:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 80011c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1ea      	bne.n	80011a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 8097 	beq.w	800130c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e2:	4b81      	ldr	r3, [pc, #516]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10f      	bne.n	800120e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	4b7d      	ldr	r3, [pc, #500]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a7c      	ldr	r2, [pc, #496]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b7a      	ldr	r3, [pc, #488]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800120a:	2301      	movs	r3, #1
 800120c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120e:	4b77      	ldr	r3, [pc, #476]	; (80013ec <HAL_RCC_OscConfig+0x474>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001216:	2b00      	cmp	r3, #0
 8001218:	d118      	bne.n	800124c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800121a:	4b74      	ldr	r3, [pc, #464]	; (80013ec <HAL_RCC_OscConfig+0x474>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a73      	ldr	r2, [pc, #460]	; (80013ec <HAL_RCC_OscConfig+0x474>)
 8001220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001226:	f7ff f9b7 	bl	8000598 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800122e:	f7ff f9b3 	bl	8000598 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e10c      	b.n	800145a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001240:	4b6a      	ldr	r3, [pc, #424]	; (80013ec <HAL_RCC_OscConfig+0x474>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0f0      	beq.n	800122e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d106      	bne.n	8001262 <HAL_RCC_OscConfig+0x2ea>
 8001254:	4b64      	ldr	r3, [pc, #400]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 8001256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001258:	4a63      	ldr	r2, [pc, #396]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6713      	str	r3, [r2, #112]	; 0x70
 8001260:	e01c      	b.n	800129c <HAL_RCC_OscConfig+0x324>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2b05      	cmp	r3, #5
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0x30c>
 800126a:	4b5f      	ldr	r3, [pc, #380]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 800126c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800126e:	4a5e      	ldr	r2, [pc, #376]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6713      	str	r3, [r2, #112]	; 0x70
 8001276:	4b5c      	ldr	r3, [pc, #368]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 8001278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127a:	4a5b      	ldr	r2, [pc, #364]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6713      	str	r3, [r2, #112]	; 0x70
 8001282:	e00b      	b.n	800129c <HAL_RCC_OscConfig+0x324>
 8001284:	4b58      	ldr	r3, [pc, #352]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 8001286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001288:	4a57      	ldr	r2, [pc, #348]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 800128a:	f023 0301 	bic.w	r3, r3, #1
 800128e:	6713      	str	r3, [r2, #112]	; 0x70
 8001290:	4b55      	ldr	r3, [pc, #340]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 8001292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001294:	4a54      	ldr	r2, [pc, #336]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 8001296:	f023 0304 	bic.w	r3, r3, #4
 800129a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d015      	beq.n	80012d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a4:	f7ff f978 	bl	8000598 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012aa:	e00a      	b.n	80012c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ac:	f7ff f974 	bl	8000598 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e0cb      	b.n	800145a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c2:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 80012c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0ee      	beq.n	80012ac <HAL_RCC_OscConfig+0x334>
 80012ce:	e014      	b.n	80012fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d0:	f7ff f962 	bl	8000598 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d6:	e00a      	b.n	80012ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d8:	f7ff f95e 	bl	8000598 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e0b5      	b.n	800145a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ee:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 80012f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1ee      	bne.n	80012d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d105      	bne.n	800130c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001300:	4b39      	ldr	r3, [pc, #228]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	4a38      	ldr	r2, [pc, #224]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 8001306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800130a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80a1 	beq.w	8001458 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001316:	4b34      	ldr	r3, [pc, #208]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b08      	cmp	r3, #8
 8001320:	d05c      	beq.n	80013dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d141      	bne.n	80013ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132a:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <HAL_RCC_OscConfig+0x478>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff f932 	bl	8000598 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001338:	f7ff f92e 	bl	8000598 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e087      	b.n	800145a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134a:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69da      	ldr	r2, [r3, #28]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	019b      	lsls	r3, r3, #6
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136c:	085b      	lsrs	r3, r3, #1
 800136e:	3b01      	subs	r3, #1
 8001370:	041b      	lsls	r3, r3, #16
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	061b      	lsls	r3, r3, #24
 800137a:	491b      	ldr	r1, [pc, #108]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_RCC_OscConfig+0x478>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001386:	f7ff f907 	bl	8000598 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138e:	f7ff f903 	bl	8000598 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e05c      	b.n	800145a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x416>
 80013ac:	e054      	b.n	8001458 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <HAL_RCC_OscConfig+0x478>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff f8f0 	bl	8000598 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013bc:	f7ff f8ec 	bl	8000598 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e045      	b.n	800145a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_RCC_OscConfig+0x470>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x444>
 80013da:	e03d      	b.n	8001458 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d107      	bne.n	80013f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e038      	b.n	800145a <HAL_RCC_OscConfig+0x4e2>
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40007000 	.word	0x40007000
 80013f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_RCC_OscConfig+0x4ec>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d028      	beq.n	8001454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800140c:	429a      	cmp	r2, r3
 800140e:	d121      	bne.n	8001454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141a:	429a      	cmp	r2, r3
 800141c:	d11a      	bne.n	8001454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001424:	4013      	ands	r3, r2
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800142a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800142c:	4293      	cmp	r3, r2
 800142e:	d111      	bne.n	8001454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143a:	085b      	lsrs	r3, r3, #1
 800143c:	3b01      	subs	r3, #1
 800143e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001440:	429a      	cmp	r2, r3
 8001442:	d107      	bne.n	8001454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001450:	429a      	cmp	r2, r3
 8001452:	d001      	beq.n	8001458 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800

08001468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0cc      	b.n	8001616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800147c:	4b68      	ldr	r3, [pc, #416]	; (8001620 <HAL_RCC_ClockConfig+0x1b8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d90c      	bls.n	80014a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148a:	4b65      	ldr	r3, [pc, #404]	; (8001620 <HAL_RCC_ClockConfig+0x1b8>)
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001492:	4b63      	ldr	r3, [pc, #396]	; (8001620 <HAL_RCC_ClockConfig+0x1b8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0b8      	b.n	8001616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d020      	beq.n	80014f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014bc:	4b59      	ldr	r3, [pc, #356]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4a58      	ldr	r2, [pc, #352]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014d4:	4b53      	ldr	r3, [pc, #332]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	4a52      	ldr	r2, [pc, #328]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e0:	4b50      	ldr	r3, [pc, #320]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	494d      	ldr	r1, [pc, #308]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d044      	beq.n	8001588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d107      	bne.n	8001516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	4b47      	ldr	r3, [pc, #284]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d119      	bne.n	8001546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e07f      	b.n	8001616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d003      	beq.n	8001526 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001522:	2b03      	cmp	r3, #3
 8001524:	d107      	bne.n	8001536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001526:	4b3f      	ldr	r3, [pc, #252]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d109      	bne.n	8001546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e06f      	b.n	8001616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001536:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e067      	b.n	8001616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001546:	4b37      	ldr	r3, [pc, #220]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f023 0203 	bic.w	r2, r3, #3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4934      	ldr	r1, [pc, #208]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 8001554:	4313      	orrs	r3, r2
 8001556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001558:	f7ff f81e 	bl	8000598 <HAL_GetTick>
 800155c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155e:	e00a      	b.n	8001576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001560:	f7ff f81a 	bl	8000598 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f241 3288 	movw	r2, #5000	; 0x1388
 800156e:	4293      	cmp	r3, r2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e04f      	b.n	8001616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001576:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 020c 	and.w	r2, r3, #12
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	429a      	cmp	r2, r3
 8001586:	d1eb      	bne.n	8001560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001588:	4b25      	ldr	r3, [pc, #148]	; (8001620 <HAL_RCC_ClockConfig+0x1b8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d20c      	bcs.n	80015b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	4b22      	ldr	r3, [pc, #136]	; (8001620 <HAL_RCC_ClockConfig+0x1b8>)
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800159e:	4b20      	ldr	r3, [pc, #128]	; (8001620 <HAL_RCC_ClockConfig+0x1b8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e032      	b.n	8001616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4916      	ldr	r1, [pc, #88]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d009      	beq.n	80015ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	490e      	ldr	r1, [pc, #56]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015ee:	f000 f821 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 80015f2:	4602      	mov	r2, r0
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	091b      	lsrs	r3, r3, #4
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	490a      	ldr	r1, [pc, #40]	; (8001628 <HAL_RCC_ClockConfig+0x1c0>)
 8001600:	5ccb      	ldrb	r3, [r1, r3]
 8001602:	fa22 f303 	lsr.w	r3, r2, r3
 8001606:	4a09      	ldr	r2, [pc, #36]	; (800162c <HAL_RCC_ClockConfig+0x1c4>)
 8001608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_RCC_ClockConfig+0x1c8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ff7e 	bl	8000510 <HAL_InitTick>

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023c00 	.word	0x40023c00
 8001624:	40023800 	.word	0x40023800
 8001628:	08003320 	.word	0x08003320
 800162c:	2000000c 	.word	0x2000000c
 8001630:	20000000 	.word	0x20000000

08001634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001638:	b090      	sub	sp, #64	; 0x40
 800163a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800164c:	4b59      	ldr	r3, [pc, #356]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 030c 	and.w	r3, r3, #12
 8001654:	2b08      	cmp	r3, #8
 8001656:	d00d      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0x40>
 8001658:	2b08      	cmp	r3, #8
 800165a:	f200 80a1 	bhi.w	80017a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <HAL_RCC_GetSysClockFreq+0x34>
 8001662:	2b04      	cmp	r3, #4
 8001664:	d003      	beq.n	800166e <HAL_RCC_GetSysClockFreq+0x3a>
 8001666:	e09b      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001668:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800166a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800166c:	e09b      	b.n	80017a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800166e:	4b53      	ldr	r3, [pc, #332]	; (80017bc <HAL_RCC_GetSysClockFreq+0x188>)
 8001670:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001672:	e098      	b.n	80017a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001674:	4b4f      	ldr	r3, [pc, #316]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800167c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800167e:	4b4d      	ldr	r3, [pc, #308]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d028      	beq.n	80016dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800168a:	4b4a      	ldr	r3, [pc, #296]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	099b      	lsrs	r3, r3, #6
 8001690:	2200      	movs	r2, #0
 8001692:	623b      	str	r3, [r7, #32]
 8001694:	627a      	str	r2, [r7, #36]	; 0x24
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800169c:	2100      	movs	r1, #0
 800169e:	4b47      	ldr	r3, [pc, #284]	; (80017bc <HAL_RCC_GetSysClockFreq+0x188>)
 80016a0:	fb03 f201 	mul.w	r2, r3, r1
 80016a4:	2300      	movs	r3, #0
 80016a6:	fb00 f303 	mul.w	r3, r0, r3
 80016aa:	4413      	add	r3, r2
 80016ac:	4a43      	ldr	r2, [pc, #268]	; (80017bc <HAL_RCC_GetSysClockFreq+0x188>)
 80016ae:	fba0 1202 	umull	r1, r2, r0, r2
 80016b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016b4:	460a      	mov	r2, r1
 80016b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80016b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ba:	4413      	add	r3, r2
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c0:	2200      	movs	r2, #0
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	61fa      	str	r2, [r7, #28]
 80016c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016ce:	f7fe fd7f 	bl	80001d0 <__aeabi_uldivmod>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4613      	mov	r3, r2
 80016d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016da:	e053      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016dc:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	099b      	lsrs	r3, r3, #6
 80016e2:	2200      	movs	r2, #0
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	617a      	str	r2, [r7, #20]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016ee:	f04f 0b00 	mov.w	fp, #0
 80016f2:	4652      	mov	r2, sl
 80016f4:	465b      	mov	r3, fp
 80016f6:	f04f 0000 	mov.w	r0, #0
 80016fa:	f04f 0100 	mov.w	r1, #0
 80016fe:	0159      	lsls	r1, r3, #5
 8001700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001704:	0150      	lsls	r0, r2, #5
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	ebb2 080a 	subs.w	r8, r2, sl
 800170e:	eb63 090b 	sbc.w	r9, r3, fp
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800171e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001722:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001726:	ebb2 0408 	subs.w	r4, r2, r8
 800172a:	eb63 0509 	sbc.w	r5, r3, r9
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	00eb      	lsls	r3, r5, #3
 8001738:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800173c:	00e2      	lsls	r2, r4, #3
 800173e:	4614      	mov	r4, r2
 8001740:	461d      	mov	r5, r3
 8001742:	eb14 030a 	adds.w	r3, r4, sl
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	eb45 030b 	adc.w	r3, r5, fp
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	e9d7 4500 	ldrd	r4, r5, [r7]
 800175a:	4629      	mov	r1, r5
 800175c:	028b      	lsls	r3, r1, #10
 800175e:	4621      	mov	r1, r4
 8001760:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001764:	4621      	mov	r1, r4
 8001766:	028a      	lsls	r2, r1, #10
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176e:	2200      	movs	r2, #0
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	60fa      	str	r2, [r7, #12]
 8001774:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001778:	f7fe fd2a 	bl	80001d0 <__aeabi_uldivmod>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4613      	mov	r3, r2
 8001782:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	0c1b      	lsrs	r3, r3, #16
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	3301      	adds	r3, #1
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001794:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001798:	fbb2 f3f3 	udiv	r3, r2, r3
 800179c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800179e:	e002      	b.n	80017a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80017a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3740      	adds	r7, #64	; 0x40
 80017ac:	46bd      	mov	sp, r7
 80017ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	00f42400 	.word	0x00f42400
 80017bc:	017d7840 	.word	0x017d7840

080017c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e07b      	b.n	80018ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d108      	bne.n	80017ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017e2:	d009      	beq.n	80017f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
 80017ea:	e005      	b.n	80017f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f001 fc60 	bl	80030d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2202      	movs	r2, #2
 800181c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800182e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187c:	ea42 0103 	orr.w	r1, r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001884:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	0c1b      	lsrs	r3, r3, #16
 8001896:	f003 0104 	and.w	r1, r3, #4
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	f003 0210 	and.w	r2, r3, #16
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69da      	ldr	r2, [r3, #28]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b085      	sub	sp, #20
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80018e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e4:	2b84      	cmp	r3, #132	; 0x84
 80018e6:	d005      	beq.n	80018f4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80018e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	3303      	adds	r3, #3
 80018f2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80018f4:	68fb      	ldr	r3, [r7, #12]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001906:	f000 fadf 	bl	8001ec8 <vTaskStartScheduler>
  
  return osOK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	bd80      	pop	{r7, pc}

08001910 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af04      	add	r7, sp, #16
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d020      	beq.n	8001964 <osThreadCreate+0x54>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d01c      	beq.n	8001964 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685c      	ldr	r4, [r3, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691e      	ldr	r6, [r3, #16]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ffc8 	bl	80018d2 <makeFreeRtosPriority>
 8001942:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800194c:	9202      	str	r2, [sp, #8]
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	9100      	str	r1, [sp, #0]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	4632      	mov	r2, r6
 8001956:	4629      	mov	r1, r5
 8001958:	4620      	mov	r0, r4
 800195a:	f000 f8ed 	bl	8001b38 <xTaskCreateStatic>
 800195e:	4603      	mov	r3, r0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	e01c      	b.n	800199e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685c      	ldr	r4, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001970:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ffaa 	bl	80018d2 <makeFreeRtosPriority>
 800197e:	4602      	mov	r2, r0
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	9200      	str	r2, [sp, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	4632      	mov	r2, r6
 800198c:	4629      	mov	r1, r5
 800198e:	4620      	mov	r0, r4
 8001990:	f000 f92f 	bl	8001bf2 <xTaskCreate>
 8001994:	4603      	mov	r3, r0
 8001996:	2b01      	cmp	r3, #1
 8001998:	d001      	beq.n	800199e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <osDelay+0x16>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	e000      	b.n	80019c0 <osDelay+0x18>
 80019be:	2301      	movs	r3, #1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 fa4d 	bl	8001e60 <vTaskDelay>
  
  return osOK;
 80019c6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f103 0208 	add.w	r2, r3, #8
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f103 0208 	add.w	r2, r3, #8
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f103 0208 	add.w	r2, r3, #8
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b085      	sub	sp, #20
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	601a      	str	r2, [r3, #0]
}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a72:	b480      	push	{r7}
 8001a74:	b085      	sub	sp, #20
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a88:	d103      	bne.n	8001a92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e00c      	b.n	8001aac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3308      	adds	r3, #8
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	e002      	b.n	8001aa0 <vListInsert+0x2e>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d2f6      	bcs.n	8001a9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	601a      	str	r2, [r3, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6892      	ldr	r2, [r2, #8]
 8001afa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6852      	ldr	r2, [r2, #4]
 8001b04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d103      	bne.n	8001b18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	1e5a      	subs	r2, r3, #1
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08e      	sub	sp, #56	; 0x38
 8001b3c:	af04      	add	r7, sp, #16
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10a      	bne.n	8001b62 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b50:	f383 8811 	msr	BASEPRI, r3
 8001b54:	f3bf 8f6f 	isb	sy
 8001b58:	f3bf 8f4f 	dsb	sy
 8001b5c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b5e:	bf00      	nop
 8001b60:	e7fe      	b.n	8001b60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10a      	bne.n	8001b7e <xTaskCreateStatic+0x46>
	__asm volatile
 8001b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b6c:	f383 8811 	msr	BASEPRI, r3
 8001b70:	f3bf 8f6f 	isb	sy
 8001b74:	f3bf 8f4f 	dsb	sy
 8001b78:	61fb      	str	r3, [r7, #28]
}
 8001b7a:	bf00      	nop
 8001b7c:	e7fe      	b.n	8001b7c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001b7e:	2354      	movs	r3, #84	; 0x54
 8001b80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	2b54      	cmp	r3, #84	; 0x54
 8001b86:	d00a      	beq.n	8001b9e <xTaskCreateStatic+0x66>
	__asm volatile
 8001b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b8c:	f383 8811 	msr	BASEPRI, r3
 8001b90:	f3bf 8f6f 	isb	sy
 8001b94:	f3bf 8f4f 	dsb	sy
 8001b98:	61bb      	str	r3, [r7, #24]
}
 8001b9a:	bf00      	nop
 8001b9c:	e7fe      	b.n	8001b9c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001b9e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d01e      	beq.n	8001be4 <xTaskCreateStatic+0xac>
 8001ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d01b      	beq.n	8001be4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bb4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	2202      	movs	r2, #2
 8001bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	9303      	str	r3, [sp, #12]
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	9302      	str	r3, [sp, #8]
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 f850 	bl	8001c7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001bdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bde:	f000 f8d5 	bl	8001d8c <prvAddNewTaskToReadyList>
 8001be2:	e001      	b.n	8001be8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001be8:	697b      	ldr	r3, [r7, #20]
	}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3728      	adds	r7, #40	; 0x28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b08c      	sub	sp, #48	; 0x30
 8001bf6:	af04      	add	r7, sp, #16
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fee6 	bl	80029d8 <pvPortMalloc>
 8001c0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00e      	beq.n	8001c32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001c14:	2054      	movs	r0, #84	; 0x54
 8001c16:	f000 fedf 	bl	80029d8 <pvPortMalloc>
 8001c1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	631a      	str	r2, [r3, #48]	; 0x30
 8001c28:	e005      	b.n	8001c36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f000 ffa0 	bl	8002b70 <vPortFree>
 8001c30:	e001      	b.n	8001c36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d017      	beq.n	8001c6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c44:	88fa      	ldrh	r2, [r7, #6]
 8001c46:	2300      	movs	r3, #0
 8001c48:	9303      	str	r3, [sp, #12]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	9302      	str	r3, [sp, #8]
 8001c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 f80e 	bl	8001c7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001c60:	69f8      	ldr	r0, [r7, #28]
 8001c62:	f000 f893 	bl	8001d8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001c66:	2301      	movs	r3, #1
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	e002      	b.n	8001c72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001c72:	69bb      	ldr	r3, [r7, #24]
	}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3720      	adds	r7, #32
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c94:	3b01      	subs	r3, #1
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	f023 0307 	bic.w	r3, r3, #7
 8001ca2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8001cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb2:	f383 8811 	msr	BASEPRI, r3
 8001cb6:	f3bf 8f6f 	isb	sy
 8001cba:	f3bf 8f4f 	dsb	sy
 8001cbe:	617b      	str	r3, [r7, #20]
}
 8001cc0:	bf00      	nop
 8001cc2:	e7fe      	b.n	8001cc2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d01f      	beq.n	8001d0a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	e012      	b.n	8001cf6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	7819      	ldrb	r1, [r3, #0]
 8001cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	4413      	add	r3, r2
 8001cde:	3334      	adds	r3, #52	; 0x34
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	4413      	add	r3, r2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d006      	beq.n	8001cfe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d9e9      	bls.n	8001cd0 <prvInitialiseNewTask+0x54>
 8001cfc:	e000      	b.n	8001d00 <prvInitialiseNewTask+0x84>
			{
				break;
 8001cfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d08:	e003      	b.n	8001d12 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d14:	2b06      	cmp	r3, #6
 8001d16:	d901      	bls.n	8001d1c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d18:	2306      	movs	r3, #6
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d26:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d30:	3304      	adds	r3, #4
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fe6c 	bl	8001a10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3a:	3318      	adds	r3, #24
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fe67 	bl	8001a10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4a:	f1c3 0207 	rsb	r2, r3, #7
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	68f9      	ldr	r1, [r7, #12]
 8001d6a:	69b8      	ldr	r0, [r7, #24]
 8001d6c:	f000 fc24 	bl	80025b8 <pxPortInitialiseStack>
 8001d70:	4602      	mov	r2, r0
 8001d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d82:	bf00      	nop
 8001d84:	3720      	adds	r7, #32
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001d94:	f000 fd3e 	bl	8002814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001d98:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <prvAddNewTaskToReadyList+0xb8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	4a29      	ldr	r2, [pc, #164]	; (8001e44 <prvAddNewTaskToReadyList+0xb8>)
 8001da0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <prvAddNewTaskToReadyList+0xbc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d109      	bne.n	8001dbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001daa:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <prvAddNewTaskToReadyList+0xbc>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001db0:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <prvAddNewTaskToReadyList+0xb8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d110      	bne.n	8001dda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001db8:	f000 fabc 	bl	8002334 <prvInitialiseTaskLists>
 8001dbc:	e00d      	b.n	8001dda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001dbe:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <prvAddNewTaskToReadyList+0xc0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001dc6:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <prvAddNewTaskToReadyList+0xbc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d802      	bhi.n	8001dda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001dd4:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <prvAddNewTaskToReadyList+0xbc>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001dda:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <prvAddNewTaskToReadyList+0xc4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	4a1b      	ldr	r2, [pc, #108]	; (8001e50 <prvAddNewTaskToReadyList+0xc4>)
 8001de2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	2201      	movs	r2, #1
 8001dea:	409a      	lsls	r2, r3
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <prvAddNewTaskToReadyList+0xc8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <prvAddNewTaskToReadyList+0xc8>)
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4a15      	ldr	r2, [pc, #84]	; (8001e58 <prvAddNewTaskToReadyList+0xcc>)
 8001e04:	441a      	add	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	f7ff fe0c 	bl	8001a2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001e12:	f000 fd2f 	bl	8002874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <prvAddNewTaskToReadyList+0xc0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00e      	beq.n	8001e3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <prvAddNewTaskToReadyList+0xbc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d207      	bcs.n	8001e3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <prvAddNewTaskToReadyList+0xd0>)
 8001e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	f3bf 8f4f 	dsb	sy
 8001e38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000130 	.word	0x20000130
 8001e48:	20000030 	.word	0x20000030
 8001e4c:	2000013c 	.word	0x2000013c
 8001e50:	2000014c 	.word	0x2000014c
 8001e54:	20000138 	.word	0x20000138
 8001e58:	20000034 	.word	0x20000034
 8001e5c:	e000ed04 	.word	0xe000ed04

08001e60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d017      	beq.n	8001ea2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <vTaskDelay+0x60>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <vTaskDelay+0x30>
	__asm volatile
 8001e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e7e:	f383 8811 	msr	BASEPRI, r3
 8001e82:	f3bf 8f6f 	isb	sy
 8001e86:	f3bf 8f4f 	dsb	sy
 8001e8a:	60bb      	str	r3, [r7, #8]
}
 8001e8c:	bf00      	nop
 8001e8e:	e7fe      	b.n	8001e8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001e90:	f000 f87a 	bl	8001f88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001e94:	2100      	movs	r1, #0
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fb28 	bl	80024ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001e9c:	f000 f882 	bl	8001fa4 <xTaskResumeAll>
 8001ea0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <vTaskDelay+0x64>)
 8001eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	f3bf 8f4f 	dsb	sy
 8001eb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001eb8:	bf00      	nop
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000158 	.word	0x20000158
 8001ec4:	e000ed04 	.word	0xe000ed04

08001ec8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001ed6:	463a      	mov	r2, r7
 8001ed8:	1d39      	adds	r1, r7, #4
 8001eda:	f107 0308 	add.w	r3, r7, #8
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 fffa 	bl	8002ed8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001ee4:	6839      	ldr	r1, [r7, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	9202      	str	r2, [sp, #8]
 8001eec:	9301      	str	r3, [sp, #4]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	460a      	mov	r2, r1
 8001ef6:	491e      	ldr	r1, [pc, #120]	; (8001f70 <vTaskStartScheduler+0xa8>)
 8001ef8:	481e      	ldr	r0, [pc, #120]	; (8001f74 <vTaskStartScheduler+0xac>)
 8001efa:	f7ff fe1d 	bl	8001b38 <xTaskCreateStatic>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <vTaskStartScheduler+0xb0>)
 8001f02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001f04:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <vTaskStartScheduler+0xb0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	e001      	b.n	8001f16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d116      	bne.n	8001f4a <vTaskStartScheduler+0x82>
	__asm volatile
 8001f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f20:	f383 8811 	msr	BASEPRI, r3
 8001f24:	f3bf 8f6f 	isb	sy
 8001f28:	f3bf 8f4f 	dsb	sy
 8001f2c:	613b      	str	r3, [r7, #16]
}
 8001f2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <vTaskStartScheduler+0xb4>)
 8001f32:	f04f 32ff 	mov.w	r2, #4294967295
 8001f36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <vTaskStartScheduler+0xb8>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <vTaskStartScheduler+0xbc>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001f44:	f000 fbc4 	bl	80026d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001f48:	e00e      	b.n	8001f68 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d10a      	bne.n	8001f68 <vTaskStartScheduler+0xa0>
	__asm volatile
 8001f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f56:	f383 8811 	msr	BASEPRI, r3
 8001f5a:	f3bf 8f6f 	isb	sy
 8001f5e:	f3bf 8f4f 	dsb	sy
 8001f62:	60fb      	str	r3, [r7, #12]
}
 8001f64:	bf00      	nop
 8001f66:	e7fe      	b.n	8001f66 <vTaskStartScheduler+0x9e>
}
 8001f68:	bf00      	nop
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	080032f0 	.word	0x080032f0
 8001f74:	08002305 	.word	0x08002305
 8001f78:	20000154 	.word	0x20000154
 8001f7c:	20000150 	.word	0x20000150
 8001f80:	2000013c 	.word	0x2000013c
 8001f84:	20000134 	.word	0x20000134

08001f88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <vTaskSuspendAll+0x18>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	4a03      	ldr	r2, [pc, #12]	; (8001fa0 <vTaskSuspendAll+0x18>)
 8001f94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	20000158 	.word	0x20000158

08001fa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001fb2:	4b41      	ldr	r3, [pc, #260]	; (80020b8 <xTaskResumeAll+0x114>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10a      	bne.n	8001fd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8001fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fbe:	f383 8811 	msr	BASEPRI, r3
 8001fc2:	f3bf 8f6f 	isb	sy
 8001fc6:	f3bf 8f4f 	dsb	sy
 8001fca:	603b      	str	r3, [r7, #0]
}
 8001fcc:	bf00      	nop
 8001fce:	e7fe      	b.n	8001fce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001fd0:	f000 fc20 	bl	8002814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001fd4:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <xTaskResumeAll+0x114>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	4a37      	ldr	r2, [pc, #220]	; (80020b8 <xTaskResumeAll+0x114>)
 8001fdc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <xTaskResumeAll+0x114>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d161      	bne.n	80020aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001fe6:	4b35      	ldr	r3, [pc, #212]	; (80020bc <xTaskResumeAll+0x118>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d05d      	beq.n	80020aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001fee:	e02e      	b.n	800204e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ff0:	4b33      	ldr	r3, [pc, #204]	; (80020c0 <xTaskResumeAll+0x11c>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	3318      	adds	r3, #24
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fd71 	bl	8001ae4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	3304      	adds	r3, #4
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fd6c 	bl	8001ae4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	2201      	movs	r2, #1
 8002012:	409a      	lsls	r2, r3
 8002014:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <xTaskResumeAll+0x120>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4313      	orrs	r3, r2
 800201a:	4a2a      	ldr	r2, [pc, #168]	; (80020c4 <xTaskResumeAll+0x120>)
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4a27      	ldr	r2, [pc, #156]	; (80020c8 <xTaskResumeAll+0x124>)
 800202c:	441a      	add	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3304      	adds	r3, #4
 8002032:	4619      	mov	r1, r3
 8002034:	4610      	mov	r0, r2
 8002036:	f7ff fcf8 	bl	8001a2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203e:	4b23      	ldr	r3, [pc, #140]	; (80020cc <xTaskResumeAll+0x128>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	429a      	cmp	r2, r3
 8002046:	d302      	bcc.n	800204e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002048:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <xTaskResumeAll+0x12c>)
 800204a:	2201      	movs	r2, #1
 800204c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800204e:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <xTaskResumeAll+0x11c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1cc      	bne.n	8001ff0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800205c:	f000 fa08 	bl	8002470 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002060:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <xTaskResumeAll+0x130>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d010      	beq.n	800208e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800206c:	f000 f836 	bl	80020dc <xTaskIncrementTick>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <xTaskResumeAll+0x12c>)
 8002078:	2201      	movs	r2, #1
 800207a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f1      	bne.n	800206c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <xTaskResumeAll+0x130>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <xTaskResumeAll+0x12c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002096:	2301      	movs	r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <xTaskResumeAll+0x134>)
 800209c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	f3bf 8f4f 	dsb	sy
 80020a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80020aa:	f000 fbe3 	bl	8002874 <vPortExitCritical>

	return xAlreadyYielded;
 80020ae:	68bb      	ldr	r3, [r7, #8]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000158 	.word	0x20000158
 80020bc:	20000130 	.word	0x20000130
 80020c0:	200000f0 	.word	0x200000f0
 80020c4:	20000138 	.word	0x20000138
 80020c8:	20000034 	.word	0x20000034
 80020cc:	20000030 	.word	0x20000030
 80020d0:	20000144 	.word	0x20000144
 80020d4:	20000140 	.word	0x20000140
 80020d8:	e000ed04 	.word	0xe000ed04

080020dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020e6:	4b4e      	ldr	r3, [pc, #312]	; (8002220 <xTaskIncrementTick+0x144>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f040 808e 	bne.w	800220c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80020f0:	4b4c      	ldr	r3, [pc, #304]	; (8002224 <xTaskIncrementTick+0x148>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	3301      	adds	r3, #1
 80020f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80020f8:	4a4a      	ldr	r2, [pc, #296]	; (8002224 <xTaskIncrementTick+0x148>)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d120      	bne.n	8002146 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002104:	4b48      	ldr	r3, [pc, #288]	; (8002228 <xTaskIncrementTick+0x14c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <xTaskIncrementTick+0x48>
	__asm volatile
 800210e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002112:	f383 8811 	msr	BASEPRI, r3
 8002116:	f3bf 8f6f 	isb	sy
 800211a:	f3bf 8f4f 	dsb	sy
 800211e:	603b      	str	r3, [r7, #0]
}
 8002120:	bf00      	nop
 8002122:	e7fe      	b.n	8002122 <xTaskIncrementTick+0x46>
 8002124:	4b40      	ldr	r3, [pc, #256]	; (8002228 <xTaskIncrementTick+0x14c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b40      	ldr	r3, [pc, #256]	; (800222c <xTaskIncrementTick+0x150>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a3e      	ldr	r2, [pc, #248]	; (8002228 <xTaskIncrementTick+0x14c>)
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4a3e      	ldr	r2, [pc, #248]	; (800222c <xTaskIncrementTick+0x150>)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4b3d      	ldr	r3, [pc, #244]	; (8002230 <xTaskIncrementTick+0x154>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	4a3c      	ldr	r2, [pc, #240]	; (8002230 <xTaskIncrementTick+0x154>)
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	f000 f995 	bl	8002470 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002146:	4b3b      	ldr	r3, [pc, #236]	; (8002234 <xTaskIncrementTick+0x158>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	429a      	cmp	r2, r3
 800214e:	d348      	bcc.n	80021e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002150:	4b35      	ldr	r3, [pc, #212]	; (8002228 <xTaskIncrementTick+0x14c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d104      	bne.n	8002164 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800215a:	4b36      	ldr	r3, [pc, #216]	; (8002234 <xTaskIncrementTick+0x158>)
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	601a      	str	r2, [r3, #0]
					break;
 8002162:	e03e      	b.n	80021e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002164:	4b30      	ldr	r3, [pc, #192]	; (8002228 <xTaskIncrementTick+0x14c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	d203      	bcs.n	8002184 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800217c:	4a2d      	ldr	r2, [pc, #180]	; (8002234 <xTaskIncrementTick+0x158>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002182:	e02e      	b.n	80021e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	3304      	adds	r3, #4
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fcab 	bl	8001ae4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	2b00      	cmp	r3, #0
 8002194:	d004      	beq.n	80021a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	3318      	adds	r3, #24
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fca2 	bl	8001ae4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	2201      	movs	r2, #1
 80021a6:	409a      	lsls	r2, r3
 80021a8:	4b23      	ldr	r3, [pc, #140]	; (8002238 <xTaskIncrementTick+0x15c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	4a22      	ldr	r2, [pc, #136]	; (8002238 <xTaskIncrementTick+0x15c>)
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4a1f      	ldr	r2, [pc, #124]	; (800223c <xTaskIncrementTick+0x160>)
 80021c0:	441a      	add	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	3304      	adds	r3, #4
 80021c6:	4619      	mov	r1, r3
 80021c8:	4610      	mov	r0, r2
 80021ca:	f7ff fc2e 	bl	8001a2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <xTaskIncrementTick+0x164>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	429a      	cmp	r2, r3
 80021da:	d3b9      	bcc.n	8002150 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80021dc:	2301      	movs	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021e0:	e7b6      	b.n	8002150 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <xTaskIncrementTick+0x164>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e8:	4914      	ldr	r1, [pc, #80]	; (800223c <xTaskIncrementTick+0x160>)
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d901      	bls.n	80021fe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80021fa:	2301      	movs	r3, #1
 80021fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <xTaskIncrementTick+0x168>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d007      	beq.n	8002216 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002206:	2301      	movs	r3, #1
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	e004      	b.n	8002216 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800220c:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <xTaskIncrementTick+0x16c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <xTaskIncrementTick+0x16c>)
 8002214:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002216:	697b      	ldr	r3, [r7, #20]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000158 	.word	0x20000158
 8002224:	20000134 	.word	0x20000134
 8002228:	200000e8 	.word	0x200000e8
 800222c:	200000ec 	.word	0x200000ec
 8002230:	20000148 	.word	0x20000148
 8002234:	20000150 	.word	0x20000150
 8002238:	20000138 	.word	0x20000138
 800223c:	20000034 	.word	0x20000034
 8002240:	20000030 	.word	0x20000030
 8002244:	20000144 	.word	0x20000144
 8002248:	20000140 	.word	0x20000140

0800224c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002252:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <vTaskSwitchContext+0xa4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <vTaskSwitchContext+0xa8>)
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002260:	e03f      	b.n	80022e2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002262:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <vTaskSwitchContext+0xa8>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002268:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <vTaskSwitchContext+0xac>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002276:	7afb      	ldrb	r3, [r7, #11]
 8002278:	f1c3 031f 	rsb	r3, r3, #31
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	491f      	ldr	r1, [pc, #124]	; (80022fc <vTaskSwitchContext+0xb0>)
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10a      	bne.n	80022a8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002296:	f383 8811 	msr	BASEPRI, r3
 800229a:	f3bf 8f6f 	isb	sy
 800229e:	f3bf 8f4f 	dsb	sy
 80022a2:	607b      	str	r3, [r7, #4]
}
 80022a4:	bf00      	nop
 80022a6:	e7fe      	b.n	80022a6 <vTaskSwitchContext+0x5a>
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <vTaskSwitchContext+0xb0>)
 80022b4:	4413      	add	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	3308      	adds	r3, #8
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d104      	bne.n	80022d8 <vTaskSwitchContext+0x8c>
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	4a08      	ldr	r2, [pc, #32]	; (8002300 <vTaskSwitchContext+0xb4>)
 80022e0:	6013      	str	r3, [r2, #0]
}
 80022e2:	bf00      	nop
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000158 	.word	0x20000158
 80022f4:	20000144 	.word	0x20000144
 80022f8:	20000138 	.word	0x20000138
 80022fc:	20000034 	.word	0x20000034
 8002300:	20000030 	.word	0x20000030

08002304 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800230c:	f000 f852 	bl	80023b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <prvIdleTask+0x28>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d9f9      	bls.n	800230c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <prvIdleTask+0x2c>)
 800231a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	f3bf 8f4f 	dsb	sy
 8002324:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002328:	e7f0      	b.n	800230c <prvIdleTask+0x8>
 800232a:	bf00      	nop
 800232c:	20000034 	.word	0x20000034
 8002330:	e000ed04 	.word	0xe000ed04

08002334 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	e00c      	b.n	800235a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4a12      	ldr	r2, [pc, #72]	; (8002394 <prvInitialiseTaskLists+0x60>)
 800234c:	4413      	add	r3, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fb3e 	bl	80019d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3301      	adds	r3, #1
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b06      	cmp	r3, #6
 800235e:	d9ef      	bls.n	8002340 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002360:	480d      	ldr	r0, [pc, #52]	; (8002398 <prvInitialiseTaskLists+0x64>)
 8002362:	f7ff fb35 	bl	80019d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002366:	480d      	ldr	r0, [pc, #52]	; (800239c <prvInitialiseTaskLists+0x68>)
 8002368:	f7ff fb32 	bl	80019d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800236c:	480c      	ldr	r0, [pc, #48]	; (80023a0 <prvInitialiseTaskLists+0x6c>)
 800236e:	f7ff fb2f 	bl	80019d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002372:	480c      	ldr	r0, [pc, #48]	; (80023a4 <prvInitialiseTaskLists+0x70>)
 8002374:	f7ff fb2c 	bl	80019d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002378:	480b      	ldr	r0, [pc, #44]	; (80023a8 <prvInitialiseTaskLists+0x74>)
 800237a:	f7ff fb29 	bl	80019d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <prvInitialiseTaskLists+0x78>)
 8002380:	4a05      	ldr	r2, [pc, #20]	; (8002398 <prvInitialiseTaskLists+0x64>)
 8002382:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002384:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <prvInitialiseTaskLists+0x7c>)
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <prvInitialiseTaskLists+0x68>)
 8002388:	601a      	str	r2, [r3, #0]
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000034 	.word	0x20000034
 8002398:	200000c0 	.word	0x200000c0
 800239c:	200000d4 	.word	0x200000d4
 80023a0:	200000f0 	.word	0x200000f0
 80023a4:	20000104 	.word	0x20000104
 80023a8:	2000011c 	.word	0x2000011c
 80023ac:	200000e8 	.word	0x200000e8
 80023b0:	200000ec 	.word	0x200000ec

080023b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80023ba:	e019      	b.n	80023f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80023bc:	f000 fa2a 	bl	8002814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <prvCheckTasksWaitingTermination+0x50>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3304      	adds	r3, #4
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fb89 	bl	8001ae4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <prvCheckTasksWaitingTermination+0x54>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <prvCheckTasksWaitingTermination+0x54>)
 80023da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <prvCheckTasksWaitingTermination+0x58>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <prvCheckTasksWaitingTermination+0x58>)
 80023e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80023e6:	f000 fa45 	bl	8002874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f810 	bl	8002410 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <prvCheckTasksWaitingTermination+0x58>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1e1      	bne.n	80023bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000104 	.word	0x20000104
 8002408:	20000130 	.word	0x20000130
 800240c:	20000118 	.word	0x20000118

08002410 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800241e:	2b00      	cmp	r3, #0
 8002420:	d108      	bne.n	8002434 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fba2 	bl	8002b70 <vPortFree>
				vPortFree( pxTCB );
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 fb9f 	bl	8002b70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002432:	e018      	b.n	8002466 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800243a:	2b01      	cmp	r3, #1
 800243c:	d103      	bne.n	8002446 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fb96 	bl	8002b70 <vPortFree>
	}
 8002444:	e00f      	b.n	8002466 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800244c:	2b02      	cmp	r3, #2
 800244e:	d00a      	beq.n	8002466 <prvDeleteTCB+0x56>
	__asm volatile
 8002450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002454:	f383 8811 	msr	BASEPRI, r3
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	60fb      	str	r3, [r7, #12]
}
 8002462:	bf00      	nop
 8002464:	e7fe      	b.n	8002464 <prvDeleteTCB+0x54>
	}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002476:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <prvResetNextTaskUnblockTime+0x38>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d104      	bne.n	800248a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <prvResetNextTaskUnblockTime+0x3c>)
 8002482:	f04f 32ff 	mov.w	r2, #4294967295
 8002486:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002488:	e008      	b.n	800249c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <prvResetNextTaskUnblockTime+0x38>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	4a04      	ldr	r2, [pc, #16]	; (80024ac <prvResetNextTaskUnblockTime+0x3c>)
 800249a:	6013      	str	r3, [r2, #0]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	200000e8 	.word	0x200000e8
 80024ac:	20000150 	.word	0x20000150

080024b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <xTaskGetSchedulerState+0x34>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80024be:	2301      	movs	r3, #1
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	e008      	b.n	80024d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <xTaskGetSchedulerState+0x38>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80024cc:	2302      	movs	r3, #2
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	e001      	b.n	80024d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80024d6:	687b      	ldr	r3, [r7, #4]
	}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	2000013c 	.word	0x2000013c
 80024e8:	20000158 	.word	0x20000158

080024ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <prvAddCurrentTaskToDelayedList+0xb0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024fc:	4b28      	ldr	r3, [pc, #160]	; (80025a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3304      	adds	r3, #4
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff faee 	bl	8001ae4 <uxListRemove>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10b      	bne.n	8002526 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800250e:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	2201      	movs	r2, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43da      	mvns	r2, r3
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4013      	ands	r3, r2
 8002522:	4a20      	ldr	r2, [pc, #128]	; (80025a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002524:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d10a      	bne.n	8002544 <prvAddCurrentTaskToDelayedList+0x58>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	3304      	adds	r3, #4
 800253a:	4619      	mov	r1, r3
 800253c:	481a      	ldr	r0, [pc, #104]	; (80025a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800253e:	f7ff fa74 	bl	8001a2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002542:	e026      	b.n	8002592 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	429a      	cmp	r2, r3
 800255a:	d209      	bcs.n	8002570 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3304      	adds	r3, #4
 8002566:	4619      	mov	r1, r3
 8002568:	4610      	mov	r0, r2
 800256a:	f7ff fa82 	bl	8001a72 <vListInsert>
}
 800256e:	e010      	b.n	8002592 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002570:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3304      	adds	r3, #4
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f7ff fa78 	bl	8001a72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002582:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	429a      	cmp	r2, r3
 800258a:	d202      	bcs.n	8002592 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800258c:	4a09      	ldr	r2, [pc, #36]	; (80025b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	6013      	str	r3, [r2, #0]
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000134 	.word	0x20000134
 80025a0:	20000030 	.word	0x20000030
 80025a4:	20000138 	.word	0x20000138
 80025a8:	2000011c 	.word	0x2000011c
 80025ac:	200000ec 	.word	0x200000ec
 80025b0:	200000e8 	.word	0x200000e8
 80025b4:	20000150 	.word	0x20000150

080025b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3b04      	subs	r3, #4
 80025c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	3b04      	subs	r3, #4
 80025d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f023 0201 	bic.w	r2, r3, #1
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	3b04      	subs	r3, #4
 80025e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80025e8:	4a0c      	ldr	r2, [pc, #48]	; (800261c <pxPortInitialiseStack+0x64>)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3b14      	subs	r3, #20
 80025f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	3b04      	subs	r3, #4
 80025fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f06f 0202 	mvn.w	r2, #2
 8002606:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3b20      	subs	r3, #32
 800260c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800260e:	68fb      	ldr	r3, [r7, #12]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	08002621 	.word	0x08002621

08002620 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800262a:	4b12      	ldr	r3, [pc, #72]	; (8002674 <prvTaskExitError+0x54>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002632:	d00a      	beq.n	800264a <prvTaskExitError+0x2a>
	__asm volatile
 8002634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002638:	f383 8811 	msr	BASEPRI, r3
 800263c:	f3bf 8f6f 	isb	sy
 8002640:	f3bf 8f4f 	dsb	sy
 8002644:	60fb      	str	r3, [r7, #12]
}
 8002646:	bf00      	nop
 8002648:	e7fe      	b.n	8002648 <prvTaskExitError+0x28>
	__asm volatile
 800264a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264e:	f383 8811 	msr	BASEPRI, r3
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	f3bf 8f4f 	dsb	sy
 800265a:	60bb      	str	r3, [r7, #8]
}
 800265c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800265e:	bf00      	nop
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0fc      	beq.n	8002660 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002666:	bf00      	nop
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	20000008 	.word	0x20000008
	...

08002680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002680:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <pxCurrentTCBConst2>)
 8002682:	6819      	ldr	r1, [r3, #0]
 8002684:	6808      	ldr	r0, [r1, #0]
 8002686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800268a:	f380 8809 	msr	PSP, r0
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f04f 0000 	mov.w	r0, #0
 8002696:	f380 8811 	msr	BASEPRI, r0
 800269a:	4770      	bx	lr
 800269c:	f3af 8000 	nop.w

080026a0 <pxCurrentTCBConst2>:
 80026a0:	20000030 	.word	0x20000030
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80026a4:	bf00      	nop
 80026a6:	bf00      	nop

080026a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80026a8:	4808      	ldr	r0, [pc, #32]	; (80026cc <prvPortStartFirstTask+0x24>)
 80026aa:	6800      	ldr	r0, [r0, #0]
 80026ac:	6800      	ldr	r0, [r0, #0]
 80026ae:	f380 8808 	msr	MSP, r0
 80026b2:	f04f 0000 	mov.w	r0, #0
 80026b6:	f380 8814 	msr	CONTROL, r0
 80026ba:	b662      	cpsie	i
 80026bc:	b661      	cpsie	f
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	df00      	svc	0
 80026c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80026ca:	bf00      	nop
 80026cc:	e000ed08 	.word	0xe000ed08

080026d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80026d6:	4b46      	ldr	r3, [pc, #280]	; (80027f0 <xPortStartScheduler+0x120>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a46      	ldr	r2, [pc, #280]	; (80027f4 <xPortStartScheduler+0x124>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d10a      	bne.n	80026f6 <xPortStartScheduler+0x26>
	__asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	613b      	str	r3, [r7, #16]
}
 80026f2:	bf00      	nop
 80026f4:	e7fe      	b.n	80026f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80026f6:	4b3e      	ldr	r3, [pc, #248]	; (80027f0 <xPortStartScheduler+0x120>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a3f      	ldr	r2, [pc, #252]	; (80027f8 <xPortStartScheduler+0x128>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d10a      	bne.n	8002716 <xPortStartScheduler+0x46>
	__asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	60fb      	str	r3, [r7, #12]
}
 8002712:	bf00      	nop
 8002714:	e7fe      	b.n	8002714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002716:	4b39      	ldr	r3, [pc, #228]	; (80027fc <xPortStartScheduler+0x12c>)
 8002718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	22ff      	movs	r2, #255	; 0xff
 8002726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4b31      	ldr	r3, [pc, #196]	; (8002800 <xPortStartScheduler+0x130>)
 800273c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800273e:	4b31      	ldr	r3, [pc, #196]	; (8002804 <xPortStartScheduler+0x134>)
 8002740:	2207      	movs	r2, #7
 8002742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002744:	e009      	b.n	800275a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002746:	4b2f      	ldr	r3, [pc, #188]	; (8002804 <xPortStartScheduler+0x134>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3b01      	subs	r3, #1
 800274c:	4a2d      	ldr	r2, [pc, #180]	; (8002804 <xPortStartScheduler+0x134>)
 800274e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	b2db      	uxtb	r3, r3
 8002758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002762:	2b80      	cmp	r3, #128	; 0x80
 8002764:	d0ef      	beq.n	8002746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002766:	4b27      	ldr	r3, [pc, #156]	; (8002804 <xPortStartScheduler+0x134>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f1c3 0307 	rsb	r3, r3, #7
 800276e:	2b04      	cmp	r3, #4
 8002770:	d00a      	beq.n	8002788 <xPortStartScheduler+0xb8>
	__asm volatile
 8002772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002776:	f383 8811 	msr	BASEPRI, r3
 800277a:	f3bf 8f6f 	isb	sy
 800277e:	f3bf 8f4f 	dsb	sy
 8002782:	60bb      	str	r3, [r7, #8]
}
 8002784:	bf00      	nop
 8002786:	e7fe      	b.n	8002786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002788:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <xPortStartScheduler+0x134>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <xPortStartScheduler+0x134>)
 8002790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002792:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <xPortStartScheduler+0x134>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800279a:	4a1a      	ldr	r2, [pc, #104]	; (8002804 <xPortStartScheduler+0x134>)
 800279c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80027a6:	4b18      	ldr	r3, [pc, #96]	; (8002808 <xPortStartScheduler+0x138>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a17      	ldr	r2, [pc, #92]	; (8002808 <xPortStartScheduler+0x138>)
 80027ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <xPortStartScheduler+0x138>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a14      	ldr	r2, [pc, #80]	; (8002808 <xPortStartScheduler+0x138>)
 80027b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80027bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80027be:	f000 f8dd 	bl	800297c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <xPortStartScheduler+0x13c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80027c8:	f000 f8fc 	bl	80029c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80027cc:	4b10      	ldr	r3, [pc, #64]	; (8002810 <xPortStartScheduler+0x140>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a0f      	ldr	r2, [pc, #60]	; (8002810 <xPortStartScheduler+0x140>)
 80027d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80027d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80027d8:	f7ff ff66 	bl	80026a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80027dc:	f7ff fd36 	bl	800224c <vTaskSwitchContext>
	prvTaskExitError();
 80027e0:	f7ff ff1e 	bl	8002620 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	e000ed00 	.word	0xe000ed00
 80027f4:	410fc271 	.word	0x410fc271
 80027f8:	410fc270 	.word	0x410fc270
 80027fc:	e000e400 	.word	0xe000e400
 8002800:	2000015c 	.word	0x2000015c
 8002804:	20000160 	.word	0x20000160
 8002808:	e000ed20 	.word	0xe000ed20
 800280c:	20000008 	.word	0x20000008
 8002810:	e000ef34 	.word	0xe000ef34

08002814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
	__asm volatile
 800281a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	607b      	str	r3, [r7, #4]
}
 800282c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800282e:	4b0f      	ldr	r3, [pc, #60]	; (800286c <vPortEnterCritical+0x58>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	3301      	adds	r3, #1
 8002834:	4a0d      	ldr	r2, [pc, #52]	; (800286c <vPortEnterCritical+0x58>)
 8002836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <vPortEnterCritical+0x58>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d10f      	bne.n	8002860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <vPortEnterCritical+0x5c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <vPortEnterCritical+0x4c>
	__asm volatile
 800284a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284e:	f383 8811 	msr	BASEPRI, r3
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	603b      	str	r3, [r7, #0]
}
 800285c:	bf00      	nop
 800285e:	e7fe      	b.n	800285e <vPortEnterCritical+0x4a>
	}
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	20000008 	.word	0x20000008
 8002870:	e000ed04 	.word	0xe000ed04

08002874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <vPortExitCritical+0x50>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10a      	bne.n	8002898 <vPortExitCritical+0x24>
	__asm volatile
 8002882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002886:	f383 8811 	msr	BASEPRI, r3
 800288a:	f3bf 8f6f 	isb	sy
 800288e:	f3bf 8f4f 	dsb	sy
 8002892:	607b      	str	r3, [r7, #4]
}
 8002894:	bf00      	nop
 8002896:	e7fe      	b.n	8002896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <vPortExitCritical+0x50>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3b01      	subs	r3, #1
 800289e:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <vPortExitCritical+0x50>)
 80028a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80028a2:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <vPortExitCritical+0x50>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d105      	bne.n	80028b6 <vPortExitCritical+0x42>
 80028aa:	2300      	movs	r3, #0
 80028ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80028b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000008 	.word	0x20000008
	...

080028d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80028d0:	f3ef 8009 	mrs	r0, PSP
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	4b15      	ldr	r3, [pc, #84]	; (8002930 <pxCurrentTCBConst>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	f01e 0f10 	tst.w	lr, #16
 80028e0:	bf08      	it	eq
 80028e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80028e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ea:	6010      	str	r0, [r2, #0]
 80028ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80028f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80028f4:	f380 8811 	msr	BASEPRI, r0
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f7ff fca4 	bl	800224c <vTaskSwitchContext>
 8002904:	f04f 0000 	mov.w	r0, #0
 8002908:	f380 8811 	msr	BASEPRI, r0
 800290c:	bc09      	pop	{r0, r3}
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	6808      	ldr	r0, [r1, #0]
 8002912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002916:	f01e 0f10 	tst.w	lr, #16
 800291a:	bf08      	it	eq
 800291c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002920:	f380 8809 	msr	PSP, r0
 8002924:	f3bf 8f6f 	isb	sy
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	f3af 8000 	nop.w

08002930 <pxCurrentTCBConst>:
 8002930:	20000030 	.word	0x20000030
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop

08002938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
	__asm volatile
 800293e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002942:	f383 8811 	msr	BASEPRI, r3
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	607b      	str	r3, [r7, #4]
}
 8002950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002952:	f7ff fbc3 	bl	80020dc <xTaskIncrementTick>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <xPortSysTickHandler+0x40>)
 800295e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	2300      	movs	r3, #0
 8002966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f383 8811 	msr	BASEPRI, r3
}
 800296e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	e000ed04 	.word	0xe000ed04

0800297c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <vPortSetupTimerInterrupt+0x34>)
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <vPortSetupTimerInterrupt+0x38>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800298c:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <vPortSetupTimerInterrupt+0x3c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <vPortSetupTimerInterrupt+0x40>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	099b      	lsrs	r3, r3, #6
 8002998:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <vPortSetupTimerInterrupt+0x44>)
 800299a:	3b01      	subs	r3, #1
 800299c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <vPortSetupTimerInterrupt+0x34>)
 80029a0:	2207      	movs	r2, #7
 80029a2:	601a      	str	r2, [r3, #0]
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e010 	.word	0xe000e010
 80029b4:	e000e018 	.word	0xe000e018
 80029b8:	2000000c 	.word	0x2000000c
 80029bc:	10624dd3 	.word	0x10624dd3
 80029c0:	e000e014 	.word	0xe000e014

080029c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80029c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80029d4 <vPortEnableVFP+0x10>
 80029c8:	6801      	ldr	r1, [r0, #0]
 80029ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80029ce:	6001      	str	r1, [r0, #0]
 80029d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80029d2:	bf00      	nop
 80029d4:	e000ed88 	.word	0xe000ed88

080029d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	; 0x28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80029e4:	f7ff fad0 	bl	8001f88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80029e8:	4b5b      	ldr	r3, [pc, #364]	; (8002b58 <pvPortMalloc+0x180>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80029f0:	f000 f920 	bl	8002c34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80029f4:	4b59      	ldr	r3, [pc, #356]	; (8002b5c <pvPortMalloc+0x184>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f040 8093 	bne.w	8002b28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01d      	beq.n	8002a44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002a08:	2208      	movs	r2, #8
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d014      	beq.n	8002a44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f023 0307 	bic.w	r3, r3, #7
 8002a20:	3308      	adds	r3, #8
 8002a22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <pvPortMalloc+0x6c>
	__asm volatile
 8002a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a32:	f383 8811 	msr	BASEPRI, r3
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	f3bf 8f4f 	dsb	sy
 8002a3e:	617b      	str	r3, [r7, #20]
}
 8002a40:	bf00      	nop
 8002a42:	e7fe      	b.n	8002a42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d06e      	beq.n	8002b28 <pvPortMalloc+0x150>
 8002a4a:	4b45      	ldr	r3, [pc, #276]	; (8002b60 <pvPortMalloc+0x188>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d869      	bhi.n	8002b28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002a54:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <pvPortMalloc+0x18c>)
 8002a56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002a58:	4b42      	ldr	r3, [pc, #264]	; (8002b64 <pvPortMalloc+0x18c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a5e:	e004      	b.n	8002a6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d903      	bls.n	8002a7c <pvPortMalloc+0xa4>
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f1      	bne.n	8002a60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002a7c:	4b36      	ldr	r3, [pc, #216]	; (8002b58 <pvPortMalloc+0x180>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d050      	beq.n	8002b28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	4413      	add	r3, r2
 8002a8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	1ad2      	subs	r2, r2, r3
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d91f      	bls.n	8002ae8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <pvPortMalloc+0xf8>
	__asm volatile
 8002aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	613b      	str	r3, [r7, #16]
}
 8002acc:	bf00      	nop
 8002ace:	e7fe      	b.n	8002ace <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	1ad2      	subs	r2, r2, r3
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002ae2:	69b8      	ldr	r0, [r7, #24]
 8002ae4:	f000 f908 	bl	8002cf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <pvPortMalloc+0x188>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	4a1b      	ldr	r2, [pc, #108]	; (8002b60 <pvPortMalloc+0x188>)
 8002af4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002af6:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <pvPortMalloc+0x188>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <pvPortMalloc+0x190>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d203      	bcs.n	8002b0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <pvPortMalloc+0x188>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a18      	ldr	r2, [pc, #96]	; (8002b68 <pvPortMalloc+0x190>)
 8002b08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <pvPortMalloc+0x184>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002b1e:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <pvPortMalloc+0x194>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3301      	adds	r3, #1
 8002b24:	4a11      	ldr	r2, [pc, #68]	; (8002b6c <pvPortMalloc+0x194>)
 8002b26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002b28:	f7ff fa3c 	bl	8001fa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <pvPortMalloc+0x174>
	__asm volatile
 8002b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3a:	f383 8811 	msr	BASEPRI, r3
 8002b3e:	f3bf 8f6f 	isb	sy
 8002b42:	f3bf 8f4f 	dsb	sy
 8002b46:	60fb      	str	r3, [r7, #12]
}
 8002b48:	bf00      	nop
 8002b4a:	e7fe      	b.n	8002b4a <pvPortMalloc+0x172>
	return pvReturn;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3728      	adds	r7, #40	; 0x28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20003d6c 	.word	0x20003d6c
 8002b5c:	20003d80 	.word	0x20003d80
 8002b60:	20003d70 	.word	0x20003d70
 8002b64:	20003d64 	.word	0x20003d64
 8002b68:	20003d74 	.word	0x20003d74
 8002b6c:	20003d78 	.word	0x20003d78

08002b70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d04d      	beq.n	8002c1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002b82:	2308      	movs	r3, #8
 8002b84:	425b      	negs	r3, r3
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4413      	add	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <vPortFree+0xb8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10a      	bne.n	8002bb4 <vPortFree+0x44>
	__asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	60fb      	str	r3, [r7, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	e7fe      	b.n	8002bb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <vPortFree+0x62>
	__asm volatile
 8002bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	60bb      	str	r3, [r7, #8]
}
 8002bce:	bf00      	nop
 8002bd0:	e7fe      	b.n	8002bd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <vPortFree+0xb8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01e      	beq.n	8002c1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d11a      	bne.n	8002c1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <vPortFree+0xb8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002bf8:	f7ff f9c6 	bl	8001f88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <vPortFree+0xbc>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4413      	add	r3, r2
 8002c06:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <vPortFree+0xbc>)
 8002c08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c0a:	6938      	ldr	r0, [r7, #16]
 8002c0c:	f000 f874 	bl	8002cf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002c10:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <vPortFree+0xc0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	3301      	adds	r3, #1
 8002c16:	4a06      	ldr	r2, [pc, #24]	; (8002c30 <vPortFree+0xc0>)
 8002c18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002c1a:	f7ff f9c3 	bl	8001fa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002c1e:	bf00      	nop
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20003d80 	.word	0x20003d80
 8002c2c:	20003d70 	.word	0x20003d70
 8002c30:	20003d7c 	.word	0x20003d7c

08002c34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002c3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002c40:	4b27      	ldr	r3, [pc, #156]	; (8002ce0 <prvHeapInit+0xac>)
 8002c42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00c      	beq.n	8002c68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3307      	adds	r3, #7
 8002c52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0307 	bic.w	r3, r3, #7
 8002c5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	4a1f      	ldr	r2, [pc, #124]	; (8002ce0 <prvHeapInit+0xac>)
 8002c64:	4413      	add	r3, r2
 8002c66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ce4 <prvHeapInit+0xb0>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002c72:	4b1c      	ldr	r3, [pc, #112]	; (8002ce4 <prvHeapInit+0xb0>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002c80:	2208      	movs	r2, #8
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0307 	bic.w	r3, r3, #7
 8002c8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4a15      	ldr	r2, [pc, #84]	; (8002ce8 <prvHeapInit+0xb4>)
 8002c94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <prvHeapInit+0xb4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <prvHeapInit+0xb4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	1ad2      	subs	r2, r2, r3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <prvHeapInit+0xb4>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <prvHeapInit+0xb8>)
 8002cc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <prvHeapInit+0xbc>)
 8002cca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002ccc:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <prvHeapInit+0xc0>)
 8002cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002cd2:	601a      	str	r2, [r3, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	20000164 	.word	0x20000164
 8002ce4:	20003d64 	.word	0x20003d64
 8002ce8:	20003d6c 	.word	0x20003d6c
 8002cec:	20003d74 	.word	0x20003d74
 8002cf0:	20003d70 	.word	0x20003d70
 8002cf4:	20003d80 	.word	0x20003d80

08002cf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002d00:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <prvInsertBlockIntoFreeList+0xac>)
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	e002      	b.n	8002d0c <prvInsertBlockIntoFreeList+0x14>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d8f7      	bhi.n	8002d06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	4413      	add	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d108      	bne.n	8002d3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	441a      	add	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	441a      	add	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d118      	bne.n	8002d80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <prvInsertBlockIntoFreeList+0xb0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d00d      	beq.n	8002d76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	441a      	add	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e008      	b.n	8002d88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002d76:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <prvInsertBlockIntoFreeList+0xb0>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e003      	b.n	8002d88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d002      	beq.n	8002d96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	20003d64 	.word	0x20003d64
 8002da8:	20003d6c 	.word	0x20003d6c

08002dac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002db2:	463b      	mov	r3, r7
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002dbe:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <MX_ADC1_Init+0x98>)
 8002dc0:	4a21      	ldr	r2, [pc, #132]	; (8002e48 <MX_ADC1_Init+0x9c>)
 8002dc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002dc4:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <MX_ADC1_Init+0x98>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002dca:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <MX_ADC1_Init+0x98>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002dd0:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <MX_ADC1_Init+0x98>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <MX_ADC1_Init+0x98>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ddc:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <MX_ADC1_Init+0x98>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002de4:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <MX_ADC1_Init+0x98>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002dea:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <MX_ADC1_Init+0x98>)
 8002dec:	4a17      	ldr	r2, [pc, #92]	; (8002e4c <MX_ADC1_Init+0xa0>)
 8002dee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002df0:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <MX_ADC1_Init+0x98>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002df6:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <MX_ADC1_Init+0x98>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002dfc:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <MX_ADC1_Init+0x98>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e04:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <MX_ADC1_Init+0x98>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e0a:	480e      	ldr	r0, [pc, #56]	; (8002e44 <MX_ADC1_Init+0x98>)
 8002e0c:	f7fd fbd0 	bl	80005b0 <HAL_ADC_Init>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002e16:	f000 f927 	bl	8003068 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e26:	463b      	mov	r3, r7
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4806      	ldr	r0, [pc, #24]	; (8002e44 <MX_ADC1_Init+0x98>)
 8002e2c:	f7fd fc04 	bl	8000638 <HAL_ADC_ConfigChannel>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002e36:	f000 f917 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20003d84 	.word	0x20003d84
 8002e48:	40012000 	.word	0x40012000
 8002e4c:	0f000001 	.word	0x0f000001

08002e50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	; 0x28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a17      	ldr	r2, [pc, #92]	; (8002ecc <HAL_ADC_MspInit+0x7c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d127      	bne.n	8002ec2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <HAL_ADC_MspInit+0x80>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	4a15      	ldr	r2, [pc, #84]	; (8002ed0 <HAL_ADC_MspInit+0x80>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	6453      	str	r3, [r2, #68]	; 0x44
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <HAL_ADC_MspInit+0x80>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <HAL_ADC_MspInit+0x80>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	4a0e      	ldr	r2, [pc, #56]	; (8002ed0 <HAL_ADC_MspInit+0x80>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_ADC_MspInit+0x80>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb6:	f107 0314 	add.w	r3, r7, #20
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4805      	ldr	r0, [pc, #20]	; (8002ed4 <HAL_ADC_MspInit+0x84>)
 8002ebe:	f7fd febf 	bl	8000c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002ec2:	bf00      	nop
 8002ec4:	3728      	adds	r7, #40	; 0x28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40012000 	.word	0x40012000
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40020000 	.word	0x40020000

08002ed8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ee8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4a06      	ldr	r2, [pc, #24]	; (8002f08 <vApplicationGetIdleTaskMemory+0x30>)
 8002eee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	20003dd0 	.word	0x20003dd0
 8002f08:	20003e24 	.word	0x20003e24

08002f0c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002f0c:	b5b0      	push	{r4, r5, r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002f12:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <MX_FREERTOS_Init+0x30>)
 8002f14:	1d3c      	adds	r4, r7, #4
 8002f16:	461d      	mov	r5, r3
 8002f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002f24:	1d3b      	adds	r3, r7, #4
 8002f26:	2100      	movs	r1, #0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe fcf1 	bl	8001910 <osThreadCreate>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4a03      	ldr	r2, [pc, #12]	; (8002f40 <MX_FREERTOS_Init+0x34>)
 8002f32:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002f34:	bf00      	nop
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3c:	08003304 	.word	0x08003304
 8002f40:	20003dcc 	.word	0x20003dcc

08002f44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f7fe fd2b 	bl	80019a8 <osDelay>
 8002f52:	e7fb      	b.n	8002f4c <StartDefaultTask+0x8>

08002f54 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	607b      	str	r3, [r7, #4]
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <MX_GPIO_Init+0x30>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	4a08      	ldr	r2, [pc, #32]	; (8002f84 <MX_GPIO_Init+0x30>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <MX_GPIO_Init+0x30>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]

}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800

08002f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f8c:	f7fd fa9e 	bl	80004cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f90:	f000 f80c 	bl	8002fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f94:	f7ff ffde 	bl	8002f54 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002f98:	f7ff ff08 	bl	8002dac <MX_ADC1_Init>
  MX_SPI1_Init();
 8002f9c:	f000 f86a 	bl	8003074 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002fa0:	f7ff ffb4 	bl	8002f0c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002fa4:	f7fe fcad 	bl	8001902 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002fa8:	e7fe      	b.n	8002fa8 <main+0x20>
	...

08002fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b094      	sub	sp, #80	; 0x50
 8002fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fb2:	f107 0320 	add.w	r3, r7, #32
 8002fb6:	2230      	movs	r2, #48	; 0x30
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f95f 	bl	800327e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fc0:	f107 030c 	add.w	r3, r7, #12
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	4b22      	ldr	r3, [pc, #136]	; (8003060 <SystemClock_Config+0xb4>)
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	4a21      	ldr	r2, [pc, #132]	; (8003060 <SystemClock_Config+0xb4>)
 8002fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fde:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe0:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <SystemClock_Config+0xb4>)
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fec:	2300      	movs	r3, #0
 8002fee:	607b      	str	r3, [r7, #4]
 8002ff0:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <SystemClock_Config+0xb8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1b      	ldr	r2, [pc, #108]	; (8003064 <SystemClock_Config+0xb8>)
 8002ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	4b19      	ldr	r3, [pc, #100]	; (8003064 <SystemClock_Config+0xb8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003004:	607b      	str	r3, [r7, #4]
 8003006:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003008:	2302      	movs	r3, #2
 800300a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800300c:	2301      	movs	r3, #1
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003010:	2310      	movs	r3, #16
 8003012:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003014:	2300      	movs	r3, #0
 8003016:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003018:	f107 0320 	add.w	r3, r7, #32
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd ffab 	bl	8000f78 <HAL_RCC_OscConfig>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8003028:	f000 f81e 	bl	8003068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800302c:	230f      	movs	r3, #15
 800302e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003030:	2300      	movs	r3, #0
 8003032:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003040:	f107 030c 	add.w	r3, r7, #12
 8003044:	2100      	movs	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fa0e 	bl	8001468 <HAL_RCC_ClockConfig>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003052:	f000 f809 	bl	8003068 <Error_Handler>
  }
}
 8003056:	bf00      	nop
 8003058:	3750      	adds	r7, #80	; 0x50
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	40007000 	.word	0x40007000

08003068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800306c:	b672      	cpsid	i
}
 800306e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003070:	e7fe      	b.n	8003070 <Error_Handler+0x8>
	...

08003074 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003078:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <MX_SPI1_Init+0x5c>)
 800307a:	4a16      	ldr	r2, [pc, #88]	; (80030d4 <MX_SPI1_Init+0x60>)
 800307c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <MX_SPI1_Init+0x5c>)
 8003080:	2200      	movs	r2, #0
 8003082:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <MX_SPI1_Init+0x5c>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <MX_SPI1_Init+0x5c>)
 800308c:	2200      	movs	r2, #0
 800308e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <MX_SPI1_Init+0x5c>)
 8003092:	2200      	movs	r2, #0
 8003094:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <MX_SPI1_Init+0x5c>)
 8003098:	2200      	movs	r2, #0
 800309a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <MX_SPI1_Init+0x5c>)
 800309e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030a4:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <MX_SPI1_Init+0x5c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030aa:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <MX_SPI1_Init+0x5c>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030b0:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <MX_SPI1_Init+0x5c>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <MX_SPI1_Init+0x5c>)
 80030b8:	220a      	movs	r2, #10
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030bc:	4804      	ldr	r0, [pc, #16]	; (80030d0 <MX_SPI1_Init+0x5c>)
 80030be:	f7fe fb7f 	bl	80017c0 <HAL_SPI_Init>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80030c8:	f7ff ffce 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030cc:	bf00      	nop
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20004024 	.word	0x20004024
 80030d4:	40013000 	.word	0x40013000

080030d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	; 0x28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a19      	ldr	r2, [pc, #100]	; (800315c <HAL_SPI_MspInit+0x84>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d12b      	bne.n	8003152 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <HAL_SPI_MspInit+0x88>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	4a17      	ldr	r2, [pc, #92]	; (8003160 <HAL_SPI_MspInit+0x88>)
 8003104:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003108:	6453      	str	r3, [r2, #68]	; 0x44
 800310a:	4b15      	ldr	r3, [pc, #84]	; (8003160 <HAL_SPI_MspInit+0x88>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	4b11      	ldr	r3, [pc, #68]	; (8003160 <HAL_SPI_MspInit+0x88>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	4a10      	ldr	r2, [pc, #64]	; (8003160 <HAL_SPI_MspInit+0x88>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6313      	str	r3, [r2, #48]	; 0x30
 8003126:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <HAL_SPI_MspInit+0x88>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003132:	23e0      	movs	r3, #224	; 0xe0
 8003134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003136:	2302      	movs	r3, #2
 8003138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313e:	2303      	movs	r3, #3
 8003140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003142:	2305      	movs	r3, #5
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003146:	f107 0314 	add.w	r3, r7, #20
 800314a:	4619      	mov	r1, r3
 800314c:	4805      	ldr	r0, [pc, #20]	; (8003164 <HAL_SPI_MspInit+0x8c>)
 800314e:	f7fd fd77 	bl	8000c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003152:	bf00      	nop
 8003154:	3728      	adds	r7, #40	; 0x28
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40013000 	.word	0x40013000
 8003160:	40023800 	.word	0x40023800
 8003164:	40020000 	.word	0x40020000

08003168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_MspInit+0x54>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	4a11      	ldr	r2, [pc, #68]	; (80031bc <HAL_MspInit+0x54>)
 8003178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800317c:	6453      	str	r3, [r2, #68]	; 0x44
 800317e:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <HAL_MspInit+0x54>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003186:	607b      	str	r3, [r7, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_MspInit+0x54>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <HAL_MspInit+0x54>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003198:	6413      	str	r3, [r2, #64]	; 0x40
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <HAL_MspInit+0x54>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031a6:	2200      	movs	r2, #0
 80031a8:	210f      	movs	r1, #15
 80031aa:	f06f 0001 	mvn.w	r0, #1
 80031ae:	f7fd fd1e 	bl	8000bee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800

080031c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031c4:	e7fe      	b.n	80031c4 <NMI_Handler+0x4>

080031c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ca:	e7fe      	b.n	80031ca <HardFault_Handler+0x4>

080031cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031d0:	e7fe      	b.n	80031d0 <MemManage_Handler+0x4>

080031d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031d6:	e7fe      	b.n	80031d6 <BusFault_Handler+0x4>

080031d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031dc:	e7fe      	b.n	80031dc <UsageFault_Handler+0x4>

080031de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031f0:	f7fd f9be 	bl	8000570 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80031f4:	f7ff f95c 	bl	80024b0 <xTaskGetSchedulerState>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d001      	beq.n	8003202 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80031fe:	f7ff fb9b 	bl	8002938 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <SystemInit+0x20>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	4a05      	ldr	r2, [pc, #20]	; (8003228 <SystemInit+0x20>)
 8003214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800322c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003264 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003230:	f7ff ffea 	bl	8003208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003234:	480c      	ldr	r0, [pc, #48]	; (8003268 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003236:	490d      	ldr	r1, [pc, #52]	; (800326c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003238:	4a0d      	ldr	r2, [pc, #52]	; (8003270 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800323a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800323c:	e002      	b.n	8003244 <LoopCopyDataInit>

0800323e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800323e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003242:	3304      	adds	r3, #4

08003244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003248:	d3f9      	bcc.n	800323e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800324a:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800324c:	4c0a      	ldr	r4, [pc, #40]	; (8003278 <LoopFillZerobss+0x22>)
  movs r3, #0
 800324e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003250:	e001      	b.n	8003256 <LoopFillZerobss>

08003252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003254:	3204      	adds	r2, #4

08003256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003258:	d3fb      	bcc.n	8003252 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800325a:	f000 f819 	bl	8003290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800325e:	f7ff fe93 	bl	8002f88 <main>
  bx  lr    
 8003262:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003264:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800326c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003270:	08003340 	.word	0x08003340
  ldr r2, =_sbss
 8003274:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003278:	2000407c 	.word	0x2000407c

0800327c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800327c:	e7fe      	b.n	800327c <ADC_IRQHandler>

0800327e <memset>:
 800327e:	4402      	add	r2, r0
 8003280:	4603      	mov	r3, r0
 8003282:	4293      	cmp	r3, r2
 8003284:	d100      	bne.n	8003288 <memset+0xa>
 8003286:	4770      	bx	lr
 8003288:	f803 1b01 	strb.w	r1, [r3], #1
 800328c:	e7f9      	b.n	8003282 <memset+0x4>
	...

08003290 <__libc_init_array>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	4d0d      	ldr	r5, [pc, #52]	; (80032c8 <__libc_init_array+0x38>)
 8003294:	4c0d      	ldr	r4, [pc, #52]	; (80032cc <__libc_init_array+0x3c>)
 8003296:	1b64      	subs	r4, r4, r5
 8003298:	10a4      	asrs	r4, r4, #2
 800329a:	2600      	movs	r6, #0
 800329c:	42a6      	cmp	r6, r4
 800329e:	d109      	bne.n	80032b4 <__libc_init_array+0x24>
 80032a0:	4d0b      	ldr	r5, [pc, #44]	; (80032d0 <__libc_init_array+0x40>)
 80032a2:	4c0c      	ldr	r4, [pc, #48]	; (80032d4 <__libc_init_array+0x44>)
 80032a4:	f000 f818 	bl	80032d8 <_init>
 80032a8:	1b64      	subs	r4, r4, r5
 80032aa:	10a4      	asrs	r4, r4, #2
 80032ac:	2600      	movs	r6, #0
 80032ae:	42a6      	cmp	r6, r4
 80032b0:	d105      	bne.n	80032be <__libc_init_array+0x2e>
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b8:	4798      	blx	r3
 80032ba:	3601      	adds	r6, #1
 80032bc:	e7ee      	b.n	800329c <__libc_init_array+0xc>
 80032be:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c2:	4798      	blx	r3
 80032c4:	3601      	adds	r6, #1
 80032c6:	e7f2      	b.n	80032ae <__libc_init_array+0x1e>
 80032c8:	08003338 	.word	0x08003338
 80032cc:	08003338 	.word	0x08003338
 80032d0:	08003338 	.word	0x08003338
 80032d4:	0800333c 	.word	0x0800333c

080032d8 <_init>:
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	bf00      	nop
 80032dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032de:	bc08      	pop	{r3}
 80032e0:	469e      	mov	lr, r3
 80032e2:	4770      	bx	lr

080032e4 <_fini>:
 80032e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e6:	bf00      	nop
 80032e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ea:	bc08      	pop	{r3}
 80032ec:	469e      	mov	lr, r3
 80032ee:	4770      	bx	lr
